
bootloader_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000397c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000160  08003b1c  08003b1c  00004b1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003c7c  08003c7c  0000505c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08003c7c  08003c7c  00004c7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003c84  08003c84  0000505c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003c84  08003c84  00004c84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003c88  08003c88  00004c88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08003c8c  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003e24  2000005c  08003ce8  0000505c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003e80  08003ce8  00005e80  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000505c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009901  00000000  00000000  0000508c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e4d  00000000  00000000  0000e98d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000930  00000000  00000000  000107e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000006ed  00000000  00000000  00011110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015d42  00000000  00000000  000117fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b211  00000000  00000000  0002753f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000859b5  00000000  00000000  00032750  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b8105  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002930  00000000  00000000  000b8148  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  000baa78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08003b04 	.word	0x08003b04

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	08003b04 	.word	0x08003b04

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b988 	b.w	80005b8 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	468e      	mov	lr, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	4688      	mov	r8, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d962      	bls.n	800039c <__udivmoddi4+0xdc>
 80002d6:	fab2 f682 	clz	r6, r2
 80002da:	b14e      	cbz	r6, 80002f0 <__udivmoddi4+0x30>
 80002dc:	f1c6 0320 	rsb	r3, r6, #32
 80002e0:	fa01 f806 	lsl.w	r8, r1, r6
 80002e4:	fa20 f303 	lsr.w	r3, r0, r3
 80002e8:	40b7      	lsls	r7, r6
 80002ea:	ea43 0808 	orr.w	r8, r3, r8
 80002ee:	40b4      	lsls	r4, r6
 80002f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f4:	fa1f fc87 	uxth.w	ip, r7
 80002f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002fc:	0c23      	lsrs	r3, r4, #16
 80002fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000302:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000306:	fb01 f20c 	mul.w	r2, r1, ip
 800030a:	429a      	cmp	r2, r3
 800030c:	d909      	bls.n	8000322 <__udivmoddi4+0x62>
 800030e:	18fb      	adds	r3, r7, r3
 8000310:	f101 30ff 	add.w	r0, r1, #4294967295
 8000314:	f080 80ea 	bcs.w	80004ec <__udivmoddi4+0x22c>
 8000318:	429a      	cmp	r2, r3
 800031a:	f240 80e7 	bls.w	80004ec <__udivmoddi4+0x22c>
 800031e:	3902      	subs	r1, #2
 8000320:	443b      	add	r3, r7
 8000322:	1a9a      	subs	r2, r3, r2
 8000324:	b2a3      	uxth	r3, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000332:	fb00 fc0c 	mul.w	ip, r0, ip
 8000336:	459c      	cmp	ip, r3
 8000338:	d909      	bls.n	800034e <__udivmoddi4+0x8e>
 800033a:	18fb      	adds	r3, r7, r3
 800033c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000340:	f080 80d6 	bcs.w	80004f0 <__udivmoddi4+0x230>
 8000344:	459c      	cmp	ip, r3
 8000346:	f240 80d3 	bls.w	80004f0 <__udivmoddi4+0x230>
 800034a:	443b      	add	r3, r7
 800034c:	3802      	subs	r0, #2
 800034e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000352:	eba3 030c 	sub.w	r3, r3, ip
 8000356:	2100      	movs	r1, #0
 8000358:	b11d      	cbz	r5, 8000362 <__udivmoddi4+0xa2>
 800035a:	40f3      	lsrs	r3, r6
 800035c:	2200      	movs	r2, #0
 800035e:	e9c5 3200 	strd	r3, r2, [r5]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d905      	bls.n	8000376 <__udivmoddi4+0xb6>
 800036a:	b10d      	cbz	r5, 8000370 <__udivmoddi4+0xb0>
 800036c:	e9c5 0100 	strd	r0, r1, [r5]
 8000370:	2100      	movs	r1, #0
 8000372:	4608      	mov	r0, r1
 8000374:	e7f5      	b.n	8000362 <__udivmoddi4+0xa2>
 8000376:	fab3 f183 	clz	r1, r3
 800037a:	2900      	cmp	r1, #0
 800037c:	d146      	bne.n	800040c <__udivmoddi4+0x14c>
 800037e:	4573      	cmp	r3, lr
 8000380:	d302      	bcc.n	8000388 <__udivmoddi4+0xc8>
 8000382:	4282      	cmp	r2, r0
 8000384:	f200 8105 	bhi.w	8000592 <__udivmoddi4+0x2d2>
 8000388:	1a84      	subs	r4, r0, r2
 800038a:	eb6e 0203 	sbc.w	r2, lr, r3
 800038e:	2001      	movs	r0, #1
 8000390:	4690      	mov	r8, r2
 8000392:	2d00      	cmp	r5, #0
 8000394:	d0e5      	beq.n	8000362 <__udivmoddi4+0xa2>
 8000396:	e9c5 4800 	strd	r4, r8, [r5]
 800039a:	e7e2      	b.n	8000362 <__udivmoddi4+0xa2>
 800039c:	2a00      	cmp	r2, #0
 800039e:	f000 8090 	beq.w	80004c2 <__udivmoddi4+0x202>
 80003a2:	fab2 f682 	clz	r6, r2
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	f040 80a4 	bne.w	80004f4 <__udivmoddi4+0x234>
 80003ac:	1a8a      	subs	r2, r1, r2
 80003ae:	0c03      	lsrs	r3, r0, #16
 80003b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003b4:	b280      	uxth	r0, r0
 80003b6:	b2bc      	uxth	r4, r7
 80003b8:	2101      	movs	r1, #1
 80003ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80003be:	fb0e 221c 	mls	r2, lr, ip, r2
 80003c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003c6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ca:	429a      	cmp	r2, r3
 80003cc:	d907      	bls.n	80003de <__udivmoddi4+0x11e>
 80003ce:	18fb      	adds	r3, r7, r3
 80003d0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003d4:	d202      	bcs.n	80003dc <__udivmoddi4+0x11c>
 80003d6:	429a      	cmp	r2, r3
 80003d8:	f200 80e0 	bhi.w	800059c <__udivmoddi4+0x2dc>
 80003dc:	46c4      	mov	ip, r8
 80003de:	1a9b      	subs	r3, r3, r2
 80003e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003ec:	fb02 f404 	mul.w	r4, r2, r4
 80003f0:	429c      	cmp	r4, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x144>
 80003f4:	18fb      	adds	r3, r7, r3
 80003f6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x142>
 80003fc:	429c      	cmp	r4, r3
 80003fe:	f200 80ca 	bhi.w	8000596 <__udivmoddi4+0x2d6>
 8000402:	4602      	mov	r2, r0
 8000404:	1b1b      	subs	r3, r3, r4
 8000406:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800040a:	e7a5      	b.n	8000358 <__udivmoddi4+0x98>
 800040c:	f1c1 0620 	rsb	r6, r1, #32
 8000410:	408b      	lsls	r3, r1
 8000412:	fa22 f706 	lsr.w	r7, r2, r6
 8000416:	431f      	orrs	r7, r3
 8000418:	fa0e f401 	lsl.w	r4, lr, r1
 800041c:	fa20 f306 	lsr.w	r3, r0, r6
 8000420:	fa2e fe06 	lsr.w	lr, lr, r6
 8000424:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000428:	4323      	orrs	r3, r4
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	fa1f fc87 	uxth.w	ip, r7
 8000432:	fbbe f0f9 	udiv	r0, lr, r9
 8000436:	0c1c      	lsrs	r4, r3, #16
 8000438:	fb09 ee10 	mls	lr, r9, r0, lr
 800043c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000440:	fb00 fe0c 	mul.w	lr, r0, ip
 8000444:	45a6      	cmp	lr, r4
 8000446:	fa02 f201 	lsl.w	r2, r2, r1
 800044a:	d909      	bls.n	8000460 <__udivmoddi4+0x1a0>
 800044c:	193c      	adds	r4, r7, r4
 800044e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000452:	f080 809c 	bcs.w	800058e <__udivmoddi4+0x2ce>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f240 8099 	bls.w	800058e <__udivmoddi4+0x2ce>
 800045c:	3802      	subs	r0, #2
 800045e:	443c      	add	r4, r7
 8000460:	eba4 040e 	sub.w	r4, r4, lr
 8000464:	fa1f fe83 	uxth.w	lr, r3
 8000468:	fbb4 f3f9 	udiv	r3, r4, r9
 800046c:	fb09 4413 	mls	r4, r9, r3, r4
 8000470:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000474:	fb03 fc0c 	mul.w	ip, r3, ip
 8000478:	45a4      	cmp	ip, r4
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x1ce>
 800047c:	193c      	adds	r4, r7, r4
 800047e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000482:	f080 8082 	bcs.w	800058a <__udivmoddi4+0x2ca>
 8000486:	45a4      	cmp	ip, r4
 8000488:	d97f      	bls.n	800058a <__udivmoddi4+0x2ca>
 800048a:	3b02      	subs	r3, #2
 800048c:	443c      	add	r4, r7
 800048e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000492:	eba4 040c 	sub.w	r4, r4, ip
 8000496:	fba0 ec02 	umull	lr, ip, r0, r2
 800049a:	4564      	cmp	r4, ip
 800049c:	4673      	mov	r3, lr
 800049e:	46e1      	mov	r9, ip
 80004a0:	d362      	bcc.n	8000568 <__udivmoddi4+0x2a8>
 80004a2:	d05f      	beq.n	8000564 <__udivmoddi4+0x2a4>
 80004a4:	b15d      	cbz	r5, 80004be <__udivmoddi4+0x1fe>
 80004a6:	ebb8 0203 	subs.w	r2, r8, r3
 80004aa:	eb64 0409 	sbc.w	r4, r4, r9
 80004ae:	fa04 f606 	lsl.w	r6, r4, r6
 80004b2:	fa22 f301 	lsr.w	r3, r2, r1
 80004b6:	431e      	orrs	r6, r3
 80004b8:	40cc      	lsrs	r4, r1
 80004ba:	e9c5 6400 	strd	r6, r4, [r5]
 80004be:	2100      	movs	r1, #0
 80004c0:	e74f      	b.n	8000362 <__udivmoddi4+0xa2>
 80004c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004c6:	0c01      	lsrs	r1, r0, #16
 80004c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004cc:	b280      	uxth	r0, r0
 80004ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004d2:	463b      	mov	r3, r7
 80004d4:	4638      	mov	r0, r7
 80004d6:	463c      	mov	r4, r7
 80004d8:	46b8      	mov	r8, r7
 80004da:	46be      	mov	lr, r7
 80004dc:	2620      	movs	r6, #32
 80004de:	fbb1 f1f7 	udiv	r1, r1, r7
 80004e2:	eba2 0208 	sub.w	r2, r2, r8
 80004e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ea:	e766      	b.n	80003ba <__udivmoddi4+0xfa>
 80004ec:	4601      	mov	r1, r0
 80004ee:	e718      	b.n	8000322 <__udivmoddi4+0x62>
 80004f0:	4610      	mov	r0, r2
 80004f2:	e72c      	b.n	800034e <__udivmoddi4+0x8e>
 80004f4:	f1c6 0220 	rsb	r2, r6, #32
 80004f8:	fa2e f302 	lsr.w	r3, lr, r2
 80004fc:	40b7      	lsls	r7, r6
 80004fe:	40b1      	lsls	r1, r6
 8000500:	fa20 f202 	lsr.w	r2, r0, r2
 8000504:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000508:	430a      	orrs	r2, r1
 800050a:	fbb3 f8fe 	udiv	r8, r3, lr
 800050e:	b2bc      	uxth	r4, r7
 8000510:	fb0e 3318 	mls	r3, lr, r8, r3
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb08 f904 	mul.w	r9, r8, r4
 800051e:	40b0      	lsls	r0, r6
 8000520:	4589      	cmp	r9, r1
 8000522:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000526:	b280      	uxth	r0, r0
 8000528:	d93e      	bls.n	80005a8 <__udivmoddi4+0x2e8>
 800052a:	1879      	adds	r1, r7, r1
 800052c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000530:	d201      	bcs.n	8000536 <__udivmoddi4+0x276>
 8000532:	4589      	cmp	r9, r1
 8000534:	d81f      	bhi.n	8000576 <__udivmoddi4+0x2b6>
 8000536:	eba1 0109 	sub.w	r1, r1, r9
 800053a:	fbb1 f9fe 	udiv	r9, r1, lr
 800053e:	fb09 f804 	mul.w	r8, r9, r4
 8000542:	fb0e 1119 	mls	r1, lr, r9, r1
 8000546:	b292      	uxth	r2, r2
 8000548:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800054c:	4542      	cmp	r2, r8
 800054e:	d229      	bcs.n	80005a4 <__udivmoddi4+0x2e4>
 8000550:	18ba      	adds	r2, r7, r2
 8000552:	f109 31ff 	add.w	r1, r9, #4294967295
 8000556:	d2c4      	bcs.n	80004e2 <__udivmoddi4+0x222>
 8000558:	4542      	cmp	r2, r8
 800055a:	d2c2      	bcs.n	80004e2 <__udivmoddi4+0x222>
 800055c:	f1a9 0102 	sub.w	r1, r9, #2
 8000560:	443a      	add	r2, r7
 8000562:	e7be      	b.n	80004e2 <__udivmoddi4+0x222>
 8000564:	45f0      	cmp	r8, lr
 8000566:	d29d      	bcs.n	80004a4 <__udivmoddi4+0x1e4>
 8000568:	ebbe 0302 	subs.w	r3, lr, r2
 800056c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000570:	3801      	subs	r0, #1
 8000572:	46e1      	mov	r9, ip
 8000574:	e796      	b.n	80004a4 <__udivmoddi4+0x1e4>
 8000576:	eba7 0909 	sub.w	r9, r7, r9
 800057a:	4449      	add	r1, r9
 800057c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000580:	fbb1 f9fe 	udiv	r9, r1, lr
 8000584:	fb09 f804 	mul.w	r8, r9, r4
 8000588:	e7db      	b.n	8000542 <__udivmoddi4+0x282>
 800058a:	4673      	mov	r3, lr
 800058c:	e77f      	b.n	800048e <__udivmoddi4+0x1ce>
 800058e:	4650      	mov	r0, sl
 8000590:	e766      	b.n	8000460 <__udivmoddi4+0x1a0>
 8000592:	4608      	mov	r0, r1
 8000594:	e6fd      	b.n	8000392 <__udivmoddi4+0xd2>
 8000596:	443b      	add	r3, r7
 8000598:	3a02      	subs	r2, #2
 800059a:	e733      	b.n	8000404 <__udivmoddi4+0x144>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	443b      	add	r3, r7
 80005a2:	e71c      	b.n	80003de <__udivmoddi4+0x11e>
 80005a4:	4649      	mov	r1, r9
 80005a6:	e79c      	b.n	80004e2 <__udivmoddi4+0x222>
 80005a8:	eba1 0109 	sub.w	r1, r1, r9
 80005ac:	46c4      	mov	ip, r8
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fb09 f804 	mul.w	r8, r9, r4
 80005b6:	e7c4      	b.n	8000542 <__udivmoddi4+0x282>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <ReceiveFirmawre>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void ReceiveFirmawre(void){
 80005bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80005c0:	b09c      	sub	sp, #112	@ 0x70
 80005c2:	af00      	add	r7, sp, #0
	uint32_t firmwareSize;
	uint32_t firmwareCRC;
	if(HAL_UART_Receive(&huart1, &firmwareSize, sizeof(firmwareSize), 7000)!=HAL_OK)
 80005c4:	f107 0160 	add.w	r1, r7, #96	@ 0x60
 80005c8:	f641 3358 	movw	r3, #7000	@ 0x1b58
 80005cc:	2204      	movs	r2, #4
 80005ce:	4864      	ldr	r0, [pc, #400]	@ (8000760 <ReceiveFirmawre+0x1a4>)
 80005d0:	f002 fa1d 	bl	8002a0e <HAL_UART_Receive>
 80005d4:	4603      	mov	r3, r0
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d007      	beq.n	80005ea <ReceiveFirmawre+0x2e>
	{HAL_UART_Transmit(&huart2, "NO CODE \n", strlen("NO CODE \n"), 10);
 80005da:	230a      	movs	r3, #10
 80005dc:	2209      	movs	r2, #9
 80005de:	4961      	ldr	r1, [pc, #388]	@ (8000764 <ReceiveFirmawre+0x1a8>)
 80005e0:	4861      	ldr	r0, [pc, #388]	@ (8000768 <ReceiveFirmawre+0x1ac>)
 80005e2:	f002 f989 	bl	80028f8 <HAL_UART_Transmit>
		JumpToApplication();}
 80005e6:	f000 f9e3 	bl	80009b0 <JumpToApplication>
	//firmwareSize *= 1024;
	if(HAL_UART_Receive(&huart1, &firmwareCRC, sizeof(firmwareCRC), 2000)!=HAL_OK)
 80005ea:	f107 015c 	add.w	r1, r7, #92	@ 0x5c
 80005ee:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80005f2:	2204      	movs	r2, #4
 80005f4:	485a      	ldr	r0, [pc, #360]	@ (8000760 <ReceiveFirmawre+0x1a4>)
 80005f6:	f002 fa0a 	bl	8002a0e <HAL_UART_Receive>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d001      	beq.n	8000604 <ReceiveFirmawre+0x48>
		JumpToApplication();
 8000600:	f000 f9d6 	bl	80009b0 <JumpToApplication>
	char debugMsg[50];
	int len = snprintf(debugMsg, sizeof(debugMsg), "Firmware size: %lu bytes\n", firmwareSize);
 8000604:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8000606:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 800060a:	4a58      	ldr	r2, [pc, #352]	@ (800076c <ReceiveFirmawre+0x1b0>)
 800060c:	2132      	movs	r1, #50	@ 0x32
 800060e:	f002 fdc5 	bl	800319c <sniprintf>
 8000612:	66b8      	str	r0, [r7, #104]	@ 0x68
	HAL_UART_Transmit(&huart2, (uint8_t*)debugMsg, len, HAL_MAX_DELAY);
 8000614:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8000616:	b29a      	uxth	r2, r3
 8000618:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 800061c:	f04f 33ff 	mov.w	r3, #4294967295
 8000620:	4851      	ldr	r0, [pc, #324]	@ (8000768 <ReceiveFirmawre+0x1ac>)
 8000622:	f002 f969 	bl	80028f8 <HAL_UART_Transmit>

	if(HAL_UART_Receive(&huart1, buffer,firmwareSize,20000)!=HAL_OK)
 8000626:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8000628:	b29a      	uxth	r2, r3
 800062a:	f644 6320 	movw	r3, #20000	@ 0x4e20
 800062e:	4950      	ldr	r1, [pc, #320]	@ (8000770 <ReceiveFirmawre+0x1b4>)
 8000630:	484b      	ldr	r0, [pc, #300]	@ (8000760 <ReceiveFirmawre+0x1a4>)
 8000632:	f002 f9ec 	bl	8002a0e <HAL_UART_Receive>
 8000636:	4603      	mov	r3, r0
 8000638:	2b00      	cmp	r3, #0
 800063a:	d007      	beq.n	800064c <ReceiveFirmawre+0x90>
		{HAL_UART_Transmit(&huart2, "NO FIRMWARE RECEIVED \n", strlen("NO FIRMWARE RECEIVED \n"), 100);
 800063c:	2364      	movs	r3, #100	@ 0x64
 800063e:	2216      	movs	r2, #22
 8000640:	494c      	ldr	r1, [pc, #304]	@ (8000774 <ReceiveFirmawre+0x1b8>)
 8000642:	4849      	ldr	r0, [pc, #292]	@ (8000768 <ReceiveFirmawre+0x1ac>)
 8000644:	f002 f958 	bl	80028f8 <HAL_UART_Transmit>
		JumpToApplication();}
 8000648:	f000 f9b2 	bl	80009b0 <JumpToApplication>
	HAL_UART_Transmit(&huart2, " FIRMWARE RECEIVED \n", strlen(" FIRMWARE RECEIVED \n"), 100);
 800064c:	2364      	movs	r3, #100	@ 0x64
 800064e:	2214      	movs	r2, #20
 8000650:	4949      	ldr	r1, [pc, #292]	@ (8000778 <ReceiveFirmawre+0x1bc>)
 8000652:	4845      	ldr	r0, [pc, #276]	@ (8000768 <ReceiveFirmawre+0x1ac>)
 8000654:	f002 f950 	bl	80028f8 <HAL_UART_Transmit>
	FLASH_EraseInitTypeDef EraseStructure;
	uint32_t SectorError = 0;
 8000658:	2300      	movs	r3, #0
 800065a:	613b      	str	r3, [r7, #16]
	EraseStructure.Banks=FLASH_BANK_1;
 800065c:	2301      	movs	r3, #1
 800065e:	61bb      	str	r3, [r7, #24]
	EraseStructure.NbSectors=2;
 8000660:	2302      	movs	r3, #2
 8000662:	623b      	str	r3, [r7, #32]
	EraseStructure.Sector=FLASH_SECTOR_6;
 8000664:	2306      	movs	r3, #6
 8000666:	61fb      	str	r3, [r7, #28]
	EraseStructure.TypeErase=FLASH_TYPEERASE_SECTORS;
 8000668:	2300      	movs	r3, #0
 800066a:	617b      	str	r3, [r7, #20]
	EraseStructure.VoltageRange=FLASH_VOLTAGE_RANGE_3;
 800066c:	2302      	movs	r3, #2
 800066e:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_FLASH_Unlock();
 8000670:	f000 ff48 	bl	8001504 <HAL_FLASH_Unlock>
	if (HAL_FLASHEx_Erase(&EraseStructure, &SectorError) != HAL_OK) {
 8000674:	f107 0210 	add.w	r2, r7, #16
 8000678:	f107 0314 	add.w	r3, r7, #20
 800067c:	4611      	mov	r1, r2
 800067e:	4618      	mov	r0, r3
 8000680:	f001 f8b2 	bl	80017e8 <HAL_FLASHEx_Erase>
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	d002      	beq.n	8000690 <ReceiveFirmawre+0xd4>
		HAL_FLASH_Lock();
 800068a:	f000 ff5d 	bl	8001548 <HAL_FLASH_Lock>
 800068e:	e063      	b.n	8000758 <ReceiveFirmawre+0x19c>
		return;
	}
	for(uint32_t i=0 ; i<firmwareSize/4 ; i++){
 8000690:	2300      	movs	r3, #0
 8000692:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8000694:	e015      	b.n	80006c2 <ReceiveFirmawre+0x106>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,(uint32_t)(UPDATE_SPACE_ADRESS+ i*4),((uint32_t*)buffer)[i]);
 8000696:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000698:	f103 7300 	add.w	r3, r3, #33554432	@ 0x2000000
 800069c:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 80006a0:	0099      	lsls	r1, r3, #2
 80006a2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80006a4:	009b      	lsls	r3, r3, #2
 80006a6:	4a32      	ldr	r2, [pc, #200]	@ (8000770 <ReceiveFirmawre+0x1b4>)
 80006a8:	4413      	add	r3, r2
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	2200      	movs	r2, #0
 80006ae:	603b      	str	r3, [r7, #0]
 80006b0:	607a      	str	r2, [r7, #4]
 80006b2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80006b6:	2002      	movs	r0, #2
 80006b8:	f000 fed2 	bl	8001460 <HAL_FLASH_Program>
	for(uint32_t i=0 ; i<firmwareSize/4 ; i++){
 80006bc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80006be:	3301      	adds	r3, #1
 80006c0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80006c2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80006c4:	089b      	lsrs	r3, r3, #2
 80006c6:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80006c8:	429a      	cmp	r2, r3
 80006ca:	d3e4      	bcc.n	8000696 <ReceiveFirmawre+0xda>
	}
	uint8_t RemainingBytes = firmwareSize % 4;
 80006cc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80006ce:	b2db      	uxtb	r3, r3
 80006d0:	f003 0303 	and.w	r3, r3, #3
 80006d4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if(RemainingBytes>0)
 80006d8:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d01f      	beq.n	8000720 <ReceiveFirmawre+0x164>
	{
		uint32_t lastword=0xFFFFFFFF;
 80006e0:	f04f 33ff 	mov.w	r3, #4294967295
 80006e4:	60fb      	str	r3, [r7, #12]
		memcpy(&lastword,buffer + firmwareSize - RemainingBytes,RemainingBytes);
 80006e6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80006e8:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80006ec:	1ad3      	subs	r3, r2, r3
 80006ee:	4a20      	ldr	r2, [pc, #128]	@ (8000770 <ReceiveFirmawre+0x1b4>)
 80006f0:	1899      	adds	r1, r3, r2
 80006f2:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
 80006f6:	f107 030c 	add.w	r3, r7, #12
 80006fa:	4618      	mov	r0, r3
 80006fc:	f002 fdb8 	bl	8003270 <memcpy>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, (uint32_t)UPDATE_SPACE_ADRESS+((firmwareSize/4)*4) , lastword);
 8000700:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8000702:	f023 0303 	bic.w	r3, r3, #3
 8000706:	f103 6100 	add.w	r1, r3, #134217728	@ 0x8000000
 800070a:	f501 2180 	add.w	r1, r1, #262144	@ 0x40000
 800070e:	68fb      	ldr	r3, [r7, #12]
 8000710:	2200      	movs	r2, #0
 8000712:	469a      	mov	sl, r3
 8000714:	4693      	mov	fp, r2
 8000716:	4652      	mov	r2, sl
 8000718:	465b      	mov	r3, fp
 800071a:	2002      	movs	r0, #2
 800071c:	f000 fea0 	bl	8001460 <HAL_FLASH_Program>
	}
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,(uint32_t)(FIRMWARE_SIZE_ADRESS),firmwareSize);
 8000720:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8000722:	2200      	movs	r2, #0
 8000724:	4698      	mov	r8, r3
 8000726:	4691      	mov	r9, r2
 8000728:	4642      	mov	r2, r8
 800072a:	464b      	mov	r3, r9
 800072c:	4913      	ldr	r1, [pc, #76]	@ (800077c <ReceiveFirmawre+0x1c0>)
 800072e:	2002      	movs	r0, #2
 8000730:	f000 fe96 	bl	8001460 <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,(uint32_t)(RECEIVED_CRC_ADRESS),firmwareCRC);
 8000734:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000736:	2200      	movs	r2, #0
 8000738:	461c      	mov	r4, r3
 800073a:	4615      	mov	r5, r2
 800073c:	4622      	mov	r2, r4
 800073e:	462b      	mov	r3, r5
 8000740:	490f      	ldr	r1, [pc, #60]	@ (8000780 <ReceiveFirmawre+0x1c4>)
 8000742:	2002      	movs	r0, #2
 8000744:	f000 fe8c 	bl	8001460 <HAL_FLASH_Program>
	HAL_FLASH_Lock();
 8000748:	f000 fefe 	bl	8001548 <HAL_FLASH_Lock>
	HAL_UART_Transmit(&huart2, " FIRMWARE COPIED TO UPDATE \n", strlen(" FIRMWARE COPIED TO UPDATE \n"), 100);
 800074c:	2364      	movs	r3, #100	@ 0x64
 800074e:	221c      	movs	r2, #28
 8000750:	490c      	ldr	r1, [pc, #48]	@ (8000784 <ReceiveFirmawre+0x1c8>)
 8000752:	4805      	ldr	r0, [pc, #20]	@ (8000768 <ReceiveFirmawre+0x1ac>)
 8000754:	f002 f8d0 	bl	80028f8 <HAL_UART_Transmit>
}
 8000758:	3770      	adds	r7, #112	@ 0x70
 800075a:	46bd      	mov	sp, r7
 800075c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8000760:	20000080 	.word	0x20000080
 8000764:	08003b1c 	.word	0x08003b1c
 8000768:	200000c8 	.word	0x200000c8
 800076c:	08003b28 	.word	0x08003b28
 8000770:	20000110 	.word	0x20000110
 8000774:	08003b44 	.word	0x08003b44
 8000778:	08003b5c 	.word	0x08003b5c
 800077c:	0807fffc 	.word	0x0807fffc
 8000780:	0807fff8 	.word	0x0807fff8
 8000784:	08003b74 	.word	0x08003b74

08000788 <ValidateFirmware>:

uint8_t ValidateFirmware(void) {
 8000788:	b580      	push	{r7, lr}
 800078a:	b0a0      	sub	sp, #128	@ 0x80
 800078c:	af02      	add	r7, sp, #8
    char msg[100];


    uint32_t firmwareSize = *((uint32_t*)FIRMWARE_SIZE_ADRESS);
 800078e:	4b31      	ldr	r3, [pc, #196]	@ (8000854 <ValidateFirmware+0xcc>)
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	673b      	str	r3, [r7, #112]	@ 0x70
  hcrc.Instance->CR |= CRC_CR_RESET;
 8000794:	4b30      	ldr	r3, [pc, #192]	@ (8000858 <ValidateFirmware+0xd0>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	689a      	ldr	r2, [r3, #8]
 800079a:	4b2f      	ldr	r3, [pc, #188]	@ (8000858 <ValidateFirmware+0xd0>)
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	f042 0201 	orr.w	r2, r2, #1
 80007a2:	609a      	str	r2, [r3, #8]

    // Compute CRC over all full 32-bit words
    uint32_t CalculatedCRC = HAL_CRC_Calculate(&hcrc, (uint32_t*)UPDATE_SPACE_ADRESS, firmwareSize / 4);
 80007a4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80007a6:	089b      	lsrs	r3, r3, #2
 80007a8:	461a      	mov	r2, r3
 80007aa:	492c      	ldr	r1, [pc, #176]	@ (800085c <ValidateFirmware+0xd4>)
 80007ac:	482a      	ldr	r0, [pc, #168]	@ (8000858 <ValidateFirmware+0xd0>)
 80007ae:	f000 fe23 	bl	80013f8 <HAL_CRC_Calculate>
 80007b2:	6778      	str	r0, [r7, #116]	@ 0x74
    uint8_t RemainingBytes = firmwareSize % 4;
 80007b4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80007b6:	b2db      	uxtb	r3, r3
 80007b8:	f003 0303 	and.w	r3, r3, #3
 80007bc:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
    if (RemainingBytes > 0) {
 80007c0:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d017      	beq.n	80007f8 <ValidateFirmware+0x70>
    	uint32_t lastWord = 0;
 80007c8:	2300      	movs	r3, #0
 80007ca:	603b      	str	r3, [r7, #0]
    	memcpy(&lastWord, (uint8_t*)(UPDATE_SPACE_ADRESS + firmwareSize - RemainingBytes), RemainingBytes);
 80007cc:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80007d0:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80007d2:	1ad3      	subs	r3, r2, r3
 80007d4:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 80007d8:	f503 2380 	add.w	r3, r3, #262144	@ 0x40000
 80007dc:	4619      	mov	r1, r3
 80007de:	f897 206f 	ldrb.w	r2, [r7, #111]	@ 0x6f
 80007e2:	463b      	mov	r3, r7
 80007e4:	4618      	mov	r0, r3
 80007e6:	f002 fd43 	bl	8003270 <memcpy>
    	CalculatedCRC = HAL_CRC_Accumulate(&hcrc, &lastWord, 1);
 80007ea:	463b      	mov	r3, r7
 80007ec:	2201      	movs	r2, #1
 80007ee:	4619      	mov	r1, r3
 80007f0:	4819      	ldr	r0, [pc, #100]	@ (8000858 <ValidateFirmware+0xd0>)
 80007f2:	f000 fdd6 	bl	80013a2 <HAL_CRC_Accumulate>
 80007f6:	6778      	str	r0, [r7, #116]	@ 0x74
    }
    uint32_t ReceivedCRC = *((uint32_t*)RECEIVED_CRC_ADRESS);
 80007f8:	4b19      	ldr	r3, [pc, #100]	@ (8000860 <ValidateFirmware+0xd8>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	66bb      	str	r3, [r7, #104]	@ 0x68

    // Log CRCs
    snprintf(msg, sizeof(msg), "Calculated CRC: 0x%08lX, Received CRC: 0x%08lX\n", (unsigned long)CalculatedCRC, (unsigned long)ReceivedCRC);
 80007fe:	1d38      	adds	r0, r7, #4
 8000800:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8000802:	9300      	str	r3, [sp, #0]
 8000804:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000806:	4a17      	ldr	r2, [pc, #92]	@ (8000864 <ValidateFirmware+0xdc>)
 8000808:	2164      	movs	r1, #100	@ 0x64
 800080a:	f002 fcc7 	bl	800319c <sniprintf>
    HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), 100);
 800080e:	1d3b      	adds	r3, r7, #4
 8000810:	4618      	mov	r0, r3
 8000812:	f7ff fce5 	bl	80001e0 <strlen>
 8000816:	4603      	mov	r3, r0
 8000818:	b29a      	uxth	r2, r3
 800081a:	1d39      	adds	r1, r7, #4
 800081c:	2364      	movs	r3, #100	@ 0x64
 800081e:	4812      	ldr	r0, [pc, #72]	@ (8000868 <ValidateFirmware+0xe0>)
 8000820:	f002 f86a 	bl	80028f8 <HAL_UART_Transmit>

    if (CalculatedCRC == ReceivedCRC) {
 8000824:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8000826:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8000828:	429a      	cmp	r2, r3
 800082a:	d107      	bne.n	800083c <ValidateFirmware+0xb4>
        HAL_UART_Transmit(&huart2, (uint8_t*)"FIRMWARE VALIDATED\n", strlen("FIRMWARE VALIDATED\n"), 100);
 800082c:	2364      	movs	r3, #100	@ 0x64
 800082e:	2213      	movs	r2, #19
 8000830:	490e      	ldr	r1, [pc, #56]	@ (800086c <ValidateFirmware+0xe4>)
 8000832:	480d      	ldr	r0, [pc, #52]	@ (8000868 <ValidateFirmware+0xe0>)
 8000834:	f002 f860 	bl	80028f8 <HAL_UART_Transmit>
        return 1;
 8000838:	2301      	movs	r3, #1
 800083a:	e006      	b.n	800084a <ValidateFirmware+0xc2>
    } else {
        HAL_UART_Transmit(&huart2, (uint8_t*)"FIRMWARE VALIDATION FAILED\n", strlen("FIRMWARE VALIDATION FAILED\n"), 100);
 800083c:	2364      	movs	r3, #100	@ 0x64
 800083e:	221b      	movs	r2, #27
 8000840:	490b      	ldr	r1, [pc, #44]	@ (8000870 <ValidateFirmware+0xe8>)
 8000842:	4809      	ldr	r0, [pc, #36]	@ (8000868 <ValidateFirmware+0xe0>)
 8000844:	f002 f858 	bl	80028f8 <HAL_UART_Transmit>
        return 0;
 8000848:	2300      	movs	r3, #0
    }
}
 800084a:	4618      	mov	r0, r3
 800084c:	3778      	adds	r7, #120	@ 0x78
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	0807fffc 	.word	0x0807fffc
 8000858:	20000078 	.word	0x20000078
 800085c:	08040000 	.word	0x08040000
 8000860:	0807fff8 	.word	0x0807fff8
 8000864:	08003b94 	.word	0x08003b94
 8000868:	200000c8 	.word	0x200000c8
 800086c:	08003bc4 	.word	0x08003bc4
 8000870:	08003bd8 	.word	0x08003bd8

08000874 <WriteFirmware>:


void WriteFirmware(void){
 8000874:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000878:	b08c      	sub	sp, #48	@ 0x30
 800087a:	af00      	add	r7, sp, #0
	if(!ValidateFirmware())
 800087c:	f7ff ff84 	bl	8000788 <ValidateFirmware>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d102      	bne.n	800088c <WriteFirmware+0x18>
	{ JumpToApplication();
 8000886:	f000 f893 	bl	80009b0 <JumpToApplication>
        return;}
 800088a:	e085      	b.n	8000998 <WriteFirmware+0x124>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, VALID_FIRMWARE_FLAG_ADRESS, 0xFFFFFFFF);
 800088c:	f04f 32ff 	mov.w	r2, #4294967295
 8000890:	f04f 0300 	mov.w	r3, #0
 8000894:	4942      	ldr	r1, [pc, #264]	@ (80009a0 <WriteFirmware+0x12c>)
 8000896:	2002      	movs	r0, #2
 8000898:	f000 fde2 	bl	8001460 <HAL_FLASH_Program>
	FLASH_EraseInitTypeDef EraseStructure;
	uint32_t SectorError = 0;
 800089c:	2300      	movs	r3, #0
 800089e:	607b      	str	r3, [r7, #4]
	EraseStructure.Banks=FLASH_BANK_1;
 80008a0:	2301      	movs	r3, #1
 80008a2:	60fb      	str	r3, [r7, #12]
	EraseStructure.NbSectors=4;
 80008a4:	2304      	movs	r3, #4
 80008a6:	617b      	str	r3, [r7, #20]
	EraseStructure.Sector=FLASH_SECTOR_2;
 80008a8:	2302      	movs	r3, #2
 80008aa:	613b      	str	r3, [r7, #16]
	EraseStructure.TypeErase=FLASH_TYPEERASE_SECTORS;
 80008ac:	2300      	movs	r3, #0
 80008ae:	60bb      	str	r3, [r7, #8]
	EraseStructure.VoltageRange=FLASH_VOLTAGE_RANGE_3;
 80008b0:	2302      	movs	r3, #2
 80008b2:	61bb      	str	r3, [r7, #24]
	HAL_FLASH_Unlock();
 80008b4:	f000 fe26 	bl	8001504 <HAL_FLASH_Unlock>
	if (HAL_FLASHEx_Erase(&EraseStructure, &SectorError) != HAL_OK) {
 80008b8:	1d3a      	adds	r2, r7, #4
 80008ba:	f107 0308 	add.w	r3, r7, #8
 80008be:	4611      	mov	r1, r2
 80008c0:	4618      	mov	r0, r3
 80008c2:	f000 ff91 	bl	80017e8 <HAL_FLASHEx_Erase>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d002      	beq.n	80008d2 <WriteFirmware+0x5e>
		HAL_FLASH_Lock();
 80008cc:	f000 fe3c 	bl	8001548 <HAL_FLASH_Lock>
		return;
 80008d0:	e062      	b.n	8000998 <WriteFirmware+0x124>
	}
	uint32_t firmwareSize=*((uint32_t*)FIRMWARE_SIZE_ADRESS);
 80008d2:	4b34      	ldr	r3, [pc, #208]	@ (80009a4 <WriteFirmware+0x130>)
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	62bb      	str	r3, [r7, #40]	@ 0x28
	for(uint32_t i=0 ; i<firmwareSize/4 ; i++){
 80008d8:	2300      	movs	r3, #0
 80008da:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80008dc:	e01b      	b.n	8000916 <WriteFirmware+0xa2>

		uint32_t writeAddr = APPLICATION_ADRESS + i * 4;
 80008de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80008e0:	f103 7300 	add.w	r3, r3, #33554432	@ 0x2000000
 80008e4:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80008e8:	009b      	lsls	r3, r3, #2
 80008ea:	623b      	str	r3, [r7, #32]
		uint32_t data = *((uint32_t*)(UPDATE_SPACE_ADRESS + i * 4));
 80008ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80008ee:	f103 7300 	add.w	r3, r3, #33554432	@ 0x2000000
 80008f2:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 80008f6:	009b      	lsls	r3, r3, #2
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	61fb      	str	r3, [r7, #28]
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, writeAddr, data);
 80008fc:	69fb      	ldr	r3, [r7, #28]
 80008fe:	2200      	movs	r2, #0
 8000900:	4698      	mov	r8, r3
 8000902:	4691      	mov	r9, r2
 8000904:	4642      	mov	r2, r8
 8000906:	464b      	mov	r3, r9
 8000908:	6a39      	ldr	r1, [r7, #32]
 800090a:	2002      	movs	r0, #2
 800090c:	f000 fda8 	bl	8001460 <HAL_FLASH_Program>
	for(uint32_t i=0 ; i<firmwareSize/4 ; i++){
 8000910:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000912:	3301      	adds	r3, #1
 8000914:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000916:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000918:	089b      	lsrs	r3, r3, #2
 800091a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800091c:	429a      	cmp	r2, r3
 800091e:	d3de      	bcc.n	80008de <WriteFirmware+0x6a>

	}
	uint8_t RemainingBytes = firmwareSize % 4;
 8000920:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000922:	b2db      	uxtb	r3, r3
 8000924:	f003 0303 	and.w	r3, r3, #3
 8000928:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if(RemainingBytes>0)
 800092c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000930:	2b00      	cmp	r3, #0
 8000932:	d021      	beq.n	8000978 <WriteFirmware+0x104>
	{
		uint32_t lastword=0xFFFFFFFF;
 8000934:	f04f 33ff 	mov.w	r3, #4294967295
 8000938:	603b      	str	r3, [r7, #0]
		memcpy(&lastword,  (uint8_t*)(UPDATE_SPACE_ADRESS + firmwareSize - RemainingBytes),RemainingBytes);
 800093a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800093e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000940:	1ad3      	subs	r3, r2, r3
 8000942:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 8000946:	f503 2380 	add.w	r3, r3, #262144	@ 0x40000
 800094a:	4619      	mov	r1, r3
 800094c:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8000950:	463b      	mov	r3, r7
 8000952:	4618      	mov	r0, r3
 8000954:	f002 fc8c 	bl	8003270 <memcpy>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, (uint32_t)APPLICATION_ADRESS+((firmwareSize/4)*4) , lastword);
 8000958:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800095a:	f023 0303 	bic.w	r3, r3, #3
 800095e:	f103 6100 	add.w	r1, r3, #134217728	@ 0x8000000
 8000962:	f501 4100 	add.w	r1, r1, #32768	@ 0x8000
 8000966:	683b      	ldr	r3, [r7, #0]
 8000968:	2200      	movs	r2, #0
 800096a:	461c      	mov	r4, r3
 800096c:	4615      	mov	r5, r2
 800096e:	4622      	mov	r2, r4
 8000970:	462b      	mov	r3, r5
 8000972:	2002      	movs	r0, #2
 8000974:	f000 fd74 	bl	8001460 <HAL_FLASH_Program>
	}
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, VALID_FIRMWARE_FLAG_ADRESS, 0x00000000);
 8000978:	f04f 0200 	mov.w	r2, #0
 800097c:	f04f 0300 	mov.w	r3, #0
 8000980:	4907      	ldr	r1, [pc, #28]	@ (80009a0 <WriteFirmware+0x12c>)
 8000982:	2002      	movs	r0, #2
 8000984:	f000 fd6c 	bl	8001460 <HAL_FLASH_Program>
	HAL_FLASH_Lock();
 8000988:	f000 fdde 	bl	8001548 <HAL_FLASH_Lock>
	HAL_UART_Transmit(&huart2, (uint8_t*)"FIRMWARE WRITING\n", strlen("FIRMWARE WRITING\n"), 100);
 800098c:	2364      	movs	r3, #100	@ 0x64
 800098e:	2211      	movs	r2, #17
 8000990:	4905      	ldr	r1, [pc, #20]	@ (80009a8 <WriteFirmware+0x134>)
 8000992:	4806      	ldr	r0, [pc, #24]	@ (80009ac <WriteFirmware+0x138>)
 8000994:	f001 ffb0 	bl	80028f8 <HAL_UART_Transmit>

}
 8000998:	3730      	adds	r7, #48	@ 0x30
 800099a:	46bd      	mov	sp, r7
 800099c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80009a0:	0807fff0 	.word	0x0807fff0
 80009a4:	0807fffc 	.word	0x0807fffc
 80009a8:	08003bf4 	.word	0x08003bf4
 80009ac:	200000c8 	.word	0x200000c8

080009b0 <JumpToApplication>:

void JumpToApplication(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b084      	sub	sp, #16
 80009b4:	af00      	add	r7, sp, #0
    //char msg[100];
	uint32_t MSP_Value = *((volatile uint32_t*)APPLICATION_ADRESS);
 80009b6:	4b14      	ldr	r3, [pc, #80]	@ (8000a08 <JumpToApplication+0x58>)
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	60fb      	str	r3, [r7, #12]
	uint32_t AppJump = *((volatile uint32_t*)(APPLICATION_ADRESS+4));
 80009bc:	4b13      	ldr	r3, [pc, #76]	@ (8000a0c <JumpToApplication+0x5c>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	60bb      	str	r3, [r7, #8]
   // snprintf(msg, sizeof(msg), "MSP VALUE: %d", MSP_Value);
    //HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), 100);
	if ((MSP_Value >= 0x20000000) && (MSP_Value <= 0x2001FFFF))
 80009c2:	68fb      	ldr	r3, [r7, #12]
 80009c4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80009c8:	d31a      	bcc.n	8000a00 <JumpToApplication+0x50>
 80009ca:	68fb      	ldr	r3, [r7, #12]
 80009cc:	4a10      	ldr	r2, [pc, #64]	@ (8000a10 <JumpToApplication+0x60>)
 80009ce:	4293      	cmp	r3, r2
 80009d0:	d816      	bhi.n	8000a00 <JumpToApplication+0x50>
	{
		HAL_UART_Transmit(&huart2, "JUMPING TO APP \n", strlen("JUMPING TO APP \n"), 10);
 80009d2:	230a      	movs	r3, #10
 80009d4:	2210      	movs	r2, #16
 80009d6:	490f      	ldr	r1, [pc, #60]	@ (8000a14 <JumpToApplication+0x64>)
 80009d8:	480f      	ldr	r0, [pc, #60]	@ (8000a18 <JumpToApplication+0x68>)
 80009da:	f001 ff8d 	bl	80028f8 <HAL_UART_Transmit>
		HAL_DeInit();
 80009de:	f000 fb35 	bl	800104c <HAL_DeInit>
		HAL_RCC_DeInit();
 80009e2:	f001 fe6b 	bl	80026bc <HAL_RCC_DeInit>

		HAL_Delay(10);             // Small delay to ensure completion
 80009e6:	200a      	movs	r0, #10
 80009e8:	f000 fbb6 	bl	8001158 <HAL_Delay>
 80009ec:	68fb      	ldr	r3, [r7, #12]
 80009ee:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 80009f0:	683b      	ldr	r3, [r7, #0]
 80009f2:	f383 8808 	msr	MSP, r3
}
 80009f6:	bf00      	nop
		__set_MSP(MSP_Value);

		ptrFunc Jump=(ptrFunc)AppJump;
 80009f8:	68bb      	ldr	r3, [r7, #8]
 80009fa:	607b      	str	r3, [r7, #4]
		Jump();
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	4798      	blx	r3
	}
	//else
		//HAL_UART_Transmit(&huart2, "INVALID FIRMWARE \n", strlen("INVALID FIRMWARE \n"), 10);
}
 8000a00:	bf00      	nop
 8000a02:	3710      	adds	r7, #16
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	08008000 	.word	0x08008000
 8000a0c:	08008004 	.word	0x08008004
 8000a10:	2001ffff 	.word	0x2001ffff
 8000a14:	08003c08 	.word	0x08003c08
 8000a18:	200000c8 	.word	0x200000c8

08000a1c <CheckAndJumpIfFirmwareValid>:

void CheckAndJumpIfFirmwareValid(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b082      	sub	sp, #8
 8000a20:	af00      	add	r7, sp, #0
    uint32_t flag = *((volatile uint32_t*)VALID_FIRMWARE_FLAG_ADRESS);
 8000a22:	4b0a      	ldr	r3, [pc, #40]	@ (8000a4c <CheckAndJumpIfFirmwareValid+0x30>)
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	607b      	str	r3, [r7, #4]

    if (flag == 0x00000000)
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d102      	bne.n	8000a34 <CheckAndJumpIfFirmwareValid+0x18>
    {
        JumpToApplication();
 8000a2e:	f7ff ffbf 	bl	80009b0 <JumpToApplication>
    else
    {
        HAL_UART_Transmit(&huart2, "INVALID FIRMWARE\r\n", strlen("INVALID FIRMWARE \n"), HAL_MAX_DELAY);

    }
}
 8000a32:	e006      	b.n	8000a42 <CheckAndJumpIfFirmwareValid+0x26>
        HAL_UART_Transmit(&huart2, "INVALID FIRMWARE\r\n", strlen("INVALID FIRMWARE \n"), HAL_MAX_DELAY);
 8000a34:	f04f 33ff 	mov.w	r3, #4294967295
 8000a38:	2212      	movs	r2, #18
 8000a3a:	4905      	ldr	r1, [pc, #20]	@ (8000a50 <CheckAndJumpIfFirmwareValid+0x34>)
 8000a3c:	4805      	ldr	r0, [pc, #20]	@ (8000a54 <CheckAndJumpIfFirmwareValid+0x38>)
 8000a3e:	f001 ff5b 	bl	80028f8 <HAL_UART_Transmit>
}
 8000a42:	bf00      	nop
 8000a44:	3708      	adds	r7, #8
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	0807fff0 	.word	0x0807fff0
 8000a50:	08003c1c 	.word	0x08003c1c
 8000a54:	200000c8 	.word	0x200000c8

08000a58 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a5c:	f000 fad4 	bl	8001008 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a60:	f000 f822 	bl	8000aa8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a64:	f000 f8f4 	bl	8000c50 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000a68:	f000 f8c8 	bl	8000bfc <MX_USART2_UART_Init>
  MX_CRC_Init();
 8000a6c:	f000 f888 	bl	8000b80 <MX_CRC_Init>
  MX_USART1_UART_Init();
 8000a70:	f000 f89a 	bl	8000ba8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_PWR_EnableBkUpAccess();
 8000a74:	f001 f976 	bl	8001d64 <HAL_PWR_EnableBkUpAccess>
  if(RTC->BKP1R!=0xF07AF07A)
 8000a78:	4b09      	ldr	r3, [pc, #36]	@ (8000aa0 <main+0x48>)
 8000a7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000a7c:	4a09      	ldr	r2, [pc, #36]	@ (8000aa4 <main+0x4c>)
 8000a7e:	4293      	cmp	r3, r2
 8000a80:	d001      	beq.n	8000a86 <main+0x2e>
	  JumpToApplication();
 8000a82:	f7ff ff95 	bl	80009b0 <JumpToApplication>
  RTC->BKP1R=0xFFFFFFFF;//clear the flag
 8000a86:	4b06      	ldr	r3, [pc, #24]	@ (8000aa0 <main+0x48>)
 8000a88:	f04f 32ff 	mov.w	r2, #4294967295
 8000a8c:	655a      	str	r2, [r3, #84]	@ 0x54
  ReceiveFirmawre();
 8000a8e:	f7ff fd95 	bl	80005bc <ReceiveFirmawre>
  WriteFirmware();
 8000a92:	f7ff feef 	bl	8000874 <WriteFirmware>
  CheckAndJumpIfFirmwareValid();
 8000a96:	f7ff ffc1 	bl	8000a1c <CheckAndJumpIfFirmwareValid>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a9a:	bf00      	nop
 8000a9c:	e7fd      	b.n	8000a9a <main+0x42>
 8000a9e:	bf00      	nop
 8000aa0:	40002800 	.word	0x40002800
 8000aa4:	f07af07a 	.word	0xf07af07a

08000aa8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b094      	sub	sp, #80	@ 0x50
 8000aac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000aae:	f107 0320 	add.w	r3, r7, #32
 8000ab2:	2230      	movs	r2, #48	@ 0x30
 8000ab4:	2100      	movs	r1, #0
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f002 fba6 	bl	8003208 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000abc:	f107 030c 	add.w	r3, r7, #12
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	601a      	str	r2, [r3, #0]
 8000ac4:	605a      	str	r2, [r3, #4]
 8000ac6:	609a      	str	r2, [r3, #8]
 8000ac8:	60da      	str	r2, [r3, #12]
 8000aca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000acc:	2300      	movs	r3, #0
 8000ace:	60bb      	str	r3, [r7, #8]
 8000ad0:	4b29      	ldr	r3, [pc, #164]	@ (8000b78 <SystemClock_Config+0xd0>)
 8000ad2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ad4:	4a28      	ldr	r2, [pc, #160]	@ (8000b78 <SystemClock_Config+0xd0>)
 8000ad6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ada:	6413      	str	r3, [r2, #64]	@ 0x40
 8000adc:	4b26      	ldr	r3, [pc, #152]	@ (8000b78 <SystemClock_Config+0xd0>)
 8000ade:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ae0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ae4:	60bb      	str	r3, [r7, #8]
 8000ae6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000ae8:	2300      	movs	r3, #0
 8000aea:	607b      	str	r3, [r7, #4]
 8000aec:	4b23      	ldr	r3, [pc, #140]	@ (8000b7c <SystemClock_Config+0xd4>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000af4:	4a21      	ldr	r2, [pc, #132]	@ (8000b7c <SystemClock_Config+0xd4>)
 8000af6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000afa:	6013      	str	r3, [r2, #0]
 8000afc:	4b1f      	ldr	r3, [pc, #124]	@ (8000b7c <SystemClock_Config+0xd4>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000b04:	607b      	str	r3, [r7, #4]
 8000b06:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b08:	2302      	movs	r3, #2
 8000b0a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b0c:	2301      	movs	r3, #1
 8000b0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b10:	2310      	movs	r3, #16
 8000b12:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b14:	2302      	movs	r3, #2
 8000b16:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000b1c:	2310      	movs	r3, #16
 8000b1e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000b20:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000b24:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000b26:	2304      	movs	r3, #4
 8000b28:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000b2a:	2307      	movs	r3, #7
 8000b2c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b2e:	f107 0320 	add.w	r3, r7, #32
 8000b32:	4618      	mov	r0, r3
 8000b34:	f001 f92a 	bl	8001d8c <HAL_RCC_OscConfig>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d001      	beq.n	8000b42 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000b3e:	f000 f8f5 	bl	8000d2c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b42:	230f      	movs	r3, #15
 8000b44:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b46:	2302      	movs	r3, #2
 8000b48:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b4e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b52:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b54:	2300      	movs	r3, #0
 8000b56:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b58:	f107 030c 	add.w	r3, r7, #12
 8000b5c:	2102      	movs	r1, #2
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f001 fb8c 	bl	800227c <HAL_RCC_ClockConfig>
 8000b64:	4603      	mov	r3, r0
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d001      	beq.n	8000b6e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000b6a:	f000 f8df 	bl	8000d2c <Error_Handler>
  }
}
 8000b6e:	bf00      	nop
 8000b70:	3750      	adds	r7, #80	@ 0x50
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	40023800 	.word	0x40023800
 8000b7c:	40007000 	.word	0x40007000

08000b80 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000b84:	4b06      	ldr	r3, [pc, #24]	@ (8000ba0 <MX_CRC_Init+0x20>)
 8000b86:	4a07      	ldr	r2, [pc, #28]	@ (8000ba4 <MX_CRC_Init+0x24>)
 8000b88:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000b8a:	4805      	ldr	r0, [pc, #20]	@ (8000ba0 <MX_CRC_Init+0x20>)
 8000b8c:	f000 fbed 	bl	800136a <HAL_CRC_Init>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d001      	beq.n	8000b9a <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000b96:	f000 f8c9 	bl	8000d2c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000b9a:	bf00      	nop
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	20000078 	.word	0x20000078
 8000ba4:	40023000 	.word	0x40023000

08000ba8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000bac:	4b11      	ldr	r3, [pc, #68]	@ (8000bf4 <MX_USART1_UART_Init+0x4c>)
 8000bae:	4a12      	ldr	r2, [pc, #72]	@ (8000bf8 <MX_USART1_UART_Init+0x50>)
 8000bb0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000bb2:	4b10      	ldr	r3, [pc, #64]	@ (8000bf4 <MX_USART1_UART_Init+0x4c>)
 8000bb4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000bb8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000bba:	4b0e      	ldr	r3, [pc, #56]	@ (8000bf4 <MX_USART1_UART_Init+0x4c>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000bc0:	4b0c      	ldr	r3, [pc, #48]	@ (8000bf4 <MX_USART1_UART_Init+0x4c>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000bc6:	4b0b      	ldr	r3, [pc, #44]	@ (8000bf4 <MX_USART1_UART_Init+0x4c>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000bcc:	4b09      	ldr	r3, [pc, #36]	@ (8000bf4 <MX_USART1_UART_Init+0x4c>)
 8000bce:	220c      	movs	r2, #12
 8000bd0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bd2:	4b08      	ldr	r3, [pc, #32]	@ (8000bf4 <MX_USART1_UART_Init+0x4c>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bd8:	4b06      	ldr	r3, [pc, #24]	@ (8000bf4 <MX_USART1_UART_Init+0x4c>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000bde:	4805      	ldr	r0, [pc, #20]	@ (8000bf4 <MX_USART1_UART_Init+0x4c>)
 8000be0:	f001 fe3a 	bl	8002858 <HAL_UART_Init>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d001      	beq.n	8000bee <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000bea:	f000 f89f 	bl	8000d2c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000bee:	bf00      	nop
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	20000080 	.word	0x20000080
 8000bf8:	40011000 	.word	0x40011000

08000bfc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c00:	4b11      	ldr	r3, [pc, #68]	@ (8000c48 <MX_USART2_UART_Init+0x4c>)
 8000c02:	4a12      	ldr	r2, [pc, #72]	@ (8000c4c <MX_USART2_UART_Init+0x50>)
 8000c04:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c06:	4b10      	ldr	r3, [pc, #64]	@ (8000c48 <MX_USART2_UART_Init+0x4c>)
 8000c08:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c0c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c0e:	4b0e      	ldr	r3, [pc, #56]	@ (8000c48 <MX_USART2_UART_Init+0x4c>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c14:	4b0c      	ldr	r3, [pc, #48]	@ (8000c48 <MX_USART2_UART_Init+0x4c>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c1a:	4b0b      	ldr	r3, [pc, #44]	@ (8000c48 <MX_USART2_UART_Init+0x4c>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c20:	4b09      	ldr	r3, [pc, #36]	@ (8000c48 <MX_USART2_UART_Init+0x4c>)
 8000c22:	220c      	movs	r2, #12
 8000c24:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c26:	4b08      	ldr	r3, [pc, #32]	@ (8000c48 <MX_USART2_UART_Init+0x4c>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c2c:	4b06      	ldr	r3, [pc, #24]	@ (8000c48 <MX_USART2_UART_Init+0x4c>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c32:	4805      	ldr	r0, [pc, #20]	@ (8000c48 <MX_USART2_UART_Init+0x4c>)
 8000c34:	f001 fe10 	bl	8002858 <HAL_UART_Init>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d001      	beq.n	8000c42 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000c3e:	f000 f875 	bl	8000d2c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c42:	bf00      	nop
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	200000c8 	.word	0x200000c8
 8000c4c:	40004400 	.word	0x40004400

08000c50 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b08a      	sub	sp, #40	@ 0x28
 8000c54:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c56:	f107 0314 	add.w	r3, r7, #20
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	601a      	str	r2, [r3, #0]
 8000c5e:	605a      	str	r2, [r3, #4]
 8000c60:	609a      	str	r2, [r3, #8]
 8000c62:	60da      	str	r2, [r3, #12]
 8000c64:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c66:	2300      	movs	r3, #0
 8000c68:	613b      	str	r3, [r7, #16]
 8000c6a:	4b2d      	ldr	r3, [pc, #180]	@ (8000d20 <MX_GPIO_Init+0xd0>)
 8000c6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c6e:	4a2c      	ldr	r2, [pc, #176]	@ (8000d20 <MX_GPIO_Init+0xd0>)
 8000c70:	f043 0304 	orr.w	r3, r3, #4
 8000c74:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c76:	4b2a      	ldr	r3, [pc, #168]	@ (8000d20 <MX_GPIO_Init+0xd0>)
 8000c78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c7a:	f003 0304 	and.w	r3, r3, #4
 8000c7e:	613b      	str	r3, [r7, #16]
 8000c80:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c82:	2300      	movs	r3, #0
 8000c84:	60fb      	str	r3, [r7, #12]
 8000c86:	4b26      	ldr	r3, [pc, #152]	@ (8000d20 <MX_GPIO_Init+0xd0>)
 8000c88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c8a:	4a25      	ldr	r2, [pc, #148]	@ (8000d20 <MX_GPIO_Init+0xd0>)
 8000c8c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000c90:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c92:	4b23      	ldr	r3, [pc, #140]	@ (8000d20 <MX_GPIO_Init+0xd0>)
 8000c94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000c9a:	60fb      	str	r3, [r7, #12]
 8000c9c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	60bb      	str	r3, [r7, #8]
 8000ca2:	4b1f      	ldr	r3, [pc, #124]	@ (8000d20 <MX_GPIO_Init+0xd0>)
 8000ca4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ca6:	4a1e      	ldr	r2, [pc, #120]	@ (8000d20 <MX_GPIO_Init+0xd0>)
 8000ca8:	f043 0301 	orr.w	r3, r3, #1
 8000cac:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cae:	4b1c      	ldr	r3, [pc, #112]	@ (8000d20 <MX_GPIO_Init+0xd0>)
 8000cb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cb2:	f003 0301 	and.w	r3, r3, #1
 8000cb6:	60bb      	str	r3, [r7, #8]
 8000cb8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cba:	2300      	movs	r3, #0
 8000cbc:	607b      	str	r3, [r7, #4]
 8000cbe:	4b18      	ldr	r3, [pc, #96]	@ (8000d20 <MX_GPIO_Init+0xd0>)
 8000cc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cc2:	4a17      	ldr	r2, [pc, #92]	@ (8000d20 <MX_GPIO_Init+0xd0>)
 8000cc4:	f043 0302 	orr.w	r3, r3, #2
 8000cc8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cca:	4b15      	ldr	r3, [pc, #84]	@ (8000d20 <MX_GPIO_Init+0xd0>)
 8000ccc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cce:	f003 0302 	and.w	r3, r3, #2
 8000cd2:	607b      	str	r3, [r7, #4]
 8000cd4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	2120      	movs	r1, #32
 8000cda:	4812      	ldr	r0, [pc, #72]	@ (8000d24 <MX_GPIO_Init+0xd4>)
 8000cdc:	f001 f828 	bl	8001d30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000ce0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ce4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000ce6:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000cea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cec:	2300      	movs	r3, #0
 8000cee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000cf0:	f107 0314 	add.w	r3, r7, #20
 8000cf4:	4619      	mov	r1, r3
 8000cf6:	480c      	ldr	r0, [pc, #48]	@ (8000d28 <MX_GPIO_Init+0xd8>)
 8000cf8:	f000 fe96 	bl	8001a28 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000cfc:	2320      	movs	r3, #32
 8000cfe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d00:	2301      	movs	r3, #1
 8000d02:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d04:	2300      	movs	r3, #0
 8000d06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000d0c:	f107 0314 	add.w	r3, r7, #20
 8000d10:	4619      	mov	r1, r3
 8000d12:	4804      	ldr	r0, [pc, #16]	@ (8000d24 <MX_GPIO_Init+0xd4>)
 8000d14:	f000 fe88 	bl	8001a28 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000d18:	bf00      	nop
 8000d1a:	3728      	adds	r7, #40	@ 0x28
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	40023800 	.word	0x40023800
 8000d24:	40020000 	.word	0x40020000
 8000d28:	40020800 	.word	0x40020800

08000d2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000d30:	b672      	cpsid	i
}
 8000d32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d34:	bf00      	nop
 8000d36:	e7fd      	b.n	8000d34 <Error_Handler+0x8>

08000d38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b083      	sub	sp, #12
 8000d3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d3e:	2300      	movs	r3, #0
 8000d40:	607b      	str	r3, [r7, #4]
 8000d42:	4b10      	ldr	r3, [pc, #64]	@ (8000d84 <HAL_MspInit+0x4c>)
 8000d44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d46:	4a0f      	ldr	r2, [pc, #60]	@ (8000d84 <HAL_MspInit+0x4c>)
 8000d48:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d4c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d4e:	4b0d      	ldr	r3, [pc, #52]	@ (8000d84 <HAL_MspInit+0x4c>)
 8000d50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d52:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d56:	607b      	str	r3, [r7, #4]
 8000d58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	603b      	str	r3, [r7, #0]
 8000d5e:	4b09      	ldr	r3, [pc, #36]	@ (8000d84 <HAL_MspInit+0x4c>)
 8000d60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d62:	4a08      	ldr	r2, [pc, #32]	@ (8000d84 <HAL_MspInit+0x4c>)
 8000d64:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d68:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d6a:	4b06      	ldr	r3, [pc, #24]	@ (8000d84 <HAL_MspInit+0x4c>)
 8000d6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d72:	603b      	str	r3, [r7, #0]
 8000d74:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d76:	bf00      	nop
 8000d78:	370c      	adds	r7, #12
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr
 8000d82:	bf00      	nop
 8000d84:	40023800 	.word	0x40023800

08000d88 <HAL_CRC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcrc: CRC handle pointer
  * @retval None
  */
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b085      	sub	sp, #20
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	4a0b      	ldr	r2, [pc, #44]	@ (8000dc4 <HAL_CRC_MspInit+0x3c>)
 8000d96:	4293      	cmp	r3, r2
 8000d98:	d10d      	bne.n	8000db6 <HAL_CRC_MspInit+0x2e>
  {
    /* USER CODE BEGIN CRC_MspInit 0 */

    /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	60fb      	str	r3, [r7, #12]
 8000d9e:	4b0a      	ldr	r3, [pc, #40]	@ (8000dc8 <HAL_CRC_MspInit+0x40>)
 8000da0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000da2:	4a09      	ldr	r2, [pc, #36]	@ (8000dc8 <HAL_CRC_MspInit+0x40>)
 8000da4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000da8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000daa:	4b07      	ldr	r3, [pc, #28]	@ (8000dc8 <HAL_CRC_MspInit+0x40>)
 8000dac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dae:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000db2:	60fb      	str	r3, [r7, #12]
 8000db4:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END CRC_MspInit 1 */

  }

}
 8000db6:	bf00      	nop
 8000db8:	3714      	adds	r7, #20
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr
 8000dc2:	bf00      	nop
 8000dc4:	40023000 	.word	0x40023000
 8000dc8:	40023800 	.word	0x40023800

08000dcc <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b08c      	sub	sp, #48	@ 0x30
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd4:	f107 031c 	add.w	r3, r7, #28
 8000dd8:	2200      	movs	r2, #0
 8000dda:	601a      	str	r2, [r3, #0]
 8000ddc:	605a      	str	r2, [r3, #4]
 8000dde:	609a      	str	r2, [r3, #8]
 8000de0:	60da      	str	r2, [r3, #12]
 8000de2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	4a32      	ldr	r2, [pc, #200]	@ (8000eb4 <HAL_UART_MspInit+0xe8>)
 8000dea:	4293      	cmp	r3, r2
 8000dec:	d12d      	bne.n	8000e4a <HAL_UART_MspInit+0x7e>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000dee:	2300      	movs	r3, #0
 8000df0:	61bb      	str	r3, [r7, #24]
 8000df2:	4b31      	ldr	r3, [pc, #196]	@ (8000eb8 <HAL_UART_MspInit+0xec>)
 8000df4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000df6:	4a30      	ldr	r2, [pc, #192]	@ (8000eb8 <HAL_UART_MspInit+0xec>)
 8000df8:	f043 0310 	orr.w	r3, r3, #16
 8000dfc:	6453      	str	r3, [r2, #68]	@ 0x44
 8000dfe:	4b2e      	ldr	r3, [pc, #184]	@ (8000eb8 <HAL_UART_MspInit+0xec>)
 8000e00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e02:	f003 0310 	and.w	r3, r3, #16
 8000e06:	61bb      	str	r3, [r7, #24]
 8000e08:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	617b      	str	r3, [r7, #20]
 8000e0e:	4b2a      	ldr	r3, [pc, #168]	@ (8000eb8 <HAL_UART_MspInit+0xec>)
 8000e10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e12:	4a29      	ldr	r2, [pc, #164]	@ (8000eb8 <HAL_UART_MspInit+0xec>)
 8000e14:	f043 0301 	orr.w	r3, r3, #1
 8000e18:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e1a:	4b27      	ldr	r3, [pc, #156]	@ (8000eb8 <HAL_UART_MspInit+0xec>)
 8000e1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e1e:	f003 0301 	and.w	r3, r3, #1
 8000e22:	617b      	str	r3, [r7, #20]
 8000e24:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000e26:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000e2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e2c:	2302      	movs	r3, #2
 8000e2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e30:	2300      	movs	r3, #0
 8000e32:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e34:	2303      	movs	r3, #3
 8000e36:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000e38:	2307      	movs	r3, #7
 8000e3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e3c:	f107 031c 	add.w	r3, r7, #28
 8000e40:	4619      	mov	r1, r3
 8000e42:	481e      	ldr	r0, [pc, #120]	@ (8000ebc <HAL_UART_MspInit+0xf0>)
 8000e44:	f000 fdf0 	bl	8001a28 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }

}
 8000e48:	e030      	b.n	8000eac <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART2)
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	4a1c      	ldr	r2, [pc, #112]	@ (8000ec0 <HAL_UART_MspInit+0xf4>)
 8000e50:	4293      	cmp	r3, r2
 8000e52:	d12b      	bne.n	8000eac <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e54:	2300      	movs	r3, #0
 8000e56:	613b      	str	r3, [r7, #16]
 8000e58:	4b17      	ldr	r3, [pc, #92]	@ (8000eb8 <HAL_UART_MspInit+0xec>)
 8000e5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e5c:	4a16      	ldr	r2, [pc, #88]	@ (8000eb8 <HAL_UART_MspInit+0xec>)
 8000e5e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e62:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e64:	4b14      	ldr	r3, [pc, #80]	@ (8000eb8 <HAL_UART_MspInit+0xec>)
 8000e66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e68:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e6c:	613b      	str	r3, [r7, #16]
 8000e6e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e70:	2300      	movs	r3, #0
 8000e72:	60fb      	str	r3, [r7, #12]
 8000e74:	4b10      	ldr	r3, [pc, #64]	@ (8000eb8 <HAL_UART_MspInit+0xec>)
 8000e76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e78:	4a0f      	ldr	r2, [pc, #60]	@ (8000eb8 <HAL_UART_MspInit+0xec>)
 8000e7a:	f043 0301 	orr.w	r3, r3, #1
 8000e7e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e80:	4b0d      	ldr	r3, [pc, #52]	@ (8000eb8 <HAL_UART_MspInit+0xec>)
 8000e82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e84:	f003 0301 	and.w	r3, r3, #1
 8000e88:	60fb      	str	r3, [r7, #12]
 8000e8a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000e8c:	230c      	movs	r3, #12
 8000e8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e90:	2302      	movs	r3, #2
 8000e92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e94:	2300      	movs	r3, #0
 8000e96:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e9c:	2307      	movs	r3, #7
 8000e9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ea0:	f107 031c 	add.w	r3, r7, #28
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	4805      	ldr	r0, [pc, #20]	@ (8000ebc <HAL_UART_MspInit+0xf0>)
 8000ea8:	f000 fdbe 	bl	8001a28 <HAL_GPIO_Init>
}
 8000eac:	bf00      	nop
 8000eae:	3730      	adds	r7, #48	@ 0x30
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}
 8000eb4:	40011000 	.word	0x40011000
 8000eb8:	40023800 	.word	0x40023800
 8000ebc:	40020000 	.word	0x40020000
 8000ec0:	40004400 	.word	0x40004400

08000ec4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ec8:	bf00      	nop
 8000eca:	e7fd      	b.n	8000ec8 <NMI_Handler+0x4>

08000ecc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ed0:	bf00      	nop
 8000ed2:	e7fd      	b.n	8000ed0 <HardFault_Handler+0x4>

08000ed4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ed8:	bf00      	nop
 8000eda:	e7fd      	b.n	8000ed8 <MemManage_Handler+0x4>

08000edc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ee0:	bf00      	nop
 8000ee2:	e7fd      	b.n	8000ee0 <BusFault_Handler+0x4>

08000ee4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ee8:	bf00      	nop
 8000eea:	e7fd      	b.n	8000ee8 <UsageFault_Handler+0x4>

08000eec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ef0:	bf00      	nop
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr

08000efa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000efa:	b480      	push	{r7}
 8000efc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000efe:	bf00      	nop
 8000f00:	46bd      	mov	sp, r7
 8000f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f06:	4770      	bx	lr

08000f08 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f0c:	bf00      	nop
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr

08000f16 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f16:	b580      	push	{r7, lr}
 8000f18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f1a:	f000 f8fd 	bl	8001118 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f1e:	bf00      	nop
 8000f20:	bd80      	pop	{r7, pc}
	...

08000f24 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b086      	sub	sp, #24
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f2c:	4a14      	ldr	r2, [pc, #80]	@ (8000f80 <_sbrk+0x5c>)
 8000f2e:	4b15      	ldr	r3, [pc, #84]	@ (8000f84 <_sbrk+0x60>)
 8000f30:	1ad3      	subs	r3, r2, r3
 8000f32:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f34:	697b      	ldr	r3, [r7, #20]
 8000f36:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f38:	4b13      	ldr	r3, [pc, #76]	@ (8000f88 <_sbrk+0x64>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d102      	bne.n	8000f46 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f40:	4b11      	ldr	r3, [pc, #68]	@ (8000f88 <_sbrk+0x64>)
 8000f42:	4a12      	ldr	r2, [pc, #72]	@ (8000f8c <_sbrk+0x68>)
 8000f44:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f46:	4b10      	ldr	r3, [pc, #64]	@ (8000f88 <_sbrk+0x64>)
 8000f48:	681a      	ldr	r2, [r3, #0]
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	4413      	add	r3, r2
 8000f4e:	693a      	ldr	r2, [r7, #16]
 8000f50:	429a      	cmp	r2, r3
 8000f52:	d207      	bcs.n	8000f64 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f54:	f002 f960 	bl	8003218 <__errno>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	220c      	movs	r2, #12
 8000f5c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f5e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f62:	e009      	b.n	8000f78 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f64:	4b08      	ldr	r3, [pc, #32]	@ (8000f88 <_sbrk+0x64>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f6a:	4b07      	ldr	r3, [pc, #28]	@ (8000f88 <_sbrk+0x64>)
 8000f6c:	681a      	ldr	r2, [r3, #0]
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	4413      	add	r3, r2
 8000f72:	4a05      	ldr	r2, [pc, #20]	@ (8000f88 <_sbrk+0x64>)
 8000f74:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f76:	68fb      	ldr	r3, [r7, #12]
}
 8000f78:	4618      	mov	r0, r3
 8000f7a:	3718      	adds	r7, #24
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	20018000 	.word	0x20018000
 8000f84:	00000400 	.word	0x00000400
 8000f88:	20003d10 	.word	0x20003d10
 8000f8c:	20003e80 	.word	0x20003e80

08000f90 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f94:	4b06      	ldr	r3, [pc, #24]	@ (8000fb0 <SystemInit+0x20>)
 8000f96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f9a:	4a05      	ldr	r2, [pc, #20]	@ (8000fb0 <SystemInit+0x20>)
 8000f9c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000fa0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fa4:	bf00      	nop
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fac:	4770      	bx	lr
 8000fae:	bf00      	nop
 8000fb0:	e000ed00 	.word	0xe000ed00

08000fb4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000fb4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000fec <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000fb8:	f7ff ffea 	bl	8000f90 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000fbc:	480c      	ldr	r0, [pc, #48]	@ (8000ff0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000fbe:	490d      	ldr	r1, [pc, #52]	@ (8000ff4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000fc0:	4a0d      	ldr	r2, [pc, #52]	@ (8000ff8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000fc2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fc4:	e002      	b.n	8000fcc <LoopCopyDataInit>

08000fc6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fc6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fc8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fca:	3304      	adds	r3, #4

08000fcc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fcc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fd0:	d3f9      	bcc.n	8000fc6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fd2:	4a0a      	ldr	r2, [pc, #40]	@ (8000ffc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000fd4:	4c0a      	ldr	r4, [pc, #40]	@ (8001000 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000fd6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fd8:	e001      	b.n	8000fde <LoopFillZerobss>

08000fda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fdc:	3204      	adds	r2, #4

08000fde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fde:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fe0:	d3fb      	bcc.n	8000fda <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8000fe2:	f002 f91f 	bl	8003224 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fe6:	f7ff fd37 	bl	8000a58 <main>
  bx  lr    
 8000fea:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000fec:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000ff0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ff4:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000ff8:	08003c8c 	.word	0x08003c8c
  ldr r2, =_sbss
 8000ffc:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001000:	20003e80 	.word	0x20003e80

08001004 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001004:	e7fe      	b.n	8001004 <ADC_IRQHandler>
	...

08001008 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800100c:	4b0e      	ldr	r3, [pc, #56]	@ (8001048 <HAL_Init+0x40>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4a0d      	ldr	r2, [pc, #52]	@ (8001048 <HAL_Init+0x40>)
 8001012:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001016:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001018:	4b0b      	ldr	r3, [pc, #44]	@ (8001048 <HAL_Init+0x40>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	4a0a      	ldr	r2, [pc, #40]	@ (8001048 <HAL_Init+0x40>)
 800101e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001022:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001024:	4b08      	ldr	r3, [pc, #32]	@ (8001048 <HAL_Init+0x40>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	4a07      	ldr	r2, [pc, #28]	@ (8001048 <HAL_Init+0x40>)
 800102a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800102e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001030:	2003      	movs	r0, #3
 8001032:	f000 f967 	bl	8001304 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001036:	2000      	movs	r0, #0
 8001038:	f000 f83e 	bl	80010b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800103c:	f7ff fe7c 	bl	8000d38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001040:	2300      	movs	r3, #0
}
 8001042:	4618      	mov	r0, r3
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	40023c00 	.word	0x40023c00

0800104c <HAL_DeInit>:
  * @brief  This function de-Initializes common part of the HAL and stops the systick.
  *         This function is optional.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 8001050:	4b11      	ldr	r3, [pc, #68]	@ (8001098 <HAL_DeInit+0x4c>)
 8001052:	4a12      	ldr	r2, [pc, #72]	@ (800109c <HAL_DeInit+0x50>)
 8001054:	621a      	str	r2, [r3, #32]
  __HAL_RCC_APB1_RELEASE_RESET();
 8001056:	4b10      	ldr	r3, [pc, #64]	@ (8001098 <HAL_DeInit+0x4c>)
 8001058:	2200      	movs	r2, #0
 800105a:	621a      	str	r2, [r3, #32]

  __HAL_RCC_APB2_FORCE_RESET();
 800105c:	4b0e      	ldr	r3, [pc, #56]	@ (8001098 <HAL_DeInit+0x4c>)
 800105e:	4a10      	ldr	r2, [pc, #64]	@ (80010a0 <HAL_DeInit+0x54>)
 8001060:	625a      	str	r2, [r3, #36]	@ 0x24
  __HAL_RCC_APB2_RELEASE_RESET();
 8001062:	4b0d      	ldr	r3, [pc, #52]	@ (8001098 <HAL_DeInit+0x4c>)
 8001064:	2200      	movs	r2, #0
 8001066:	625a      	str	r2, [r3, #36]	@ 0x24

  __HAL_RCC_AHB1_FORCE_RESET();
 8001068:	4b0b      	ldr	r3, [pc, #44]	@ (8001098 <HAL_DeInit+0x4c>)
 800106a:	4a0e      	ldr	r2, [pc, #56]	@ (80010a4 <HAL_DeInit+0x58>)
 800106c:	611a      	str	r2, [r3, #16]
  __HAL_RCC_AHB1_RELEASE_RESET();
 800106e:	4b0a      	ldr	r3, [pc, #40]	@ (8001098 <HAL_DeInit+0x4c>)
 8001070:	2200      	movs	r2, #0
 8001072:	611a      	str	r2, [r3, #16]

  __HAL_RCC_AHB2_FORCE_RESET();
 8001074:	4b08      	ldr	r3, [pc, #32]	@ (8001098 <HAL_DeInit+0x4c>)
 8001076:	2280      	movs	r2, #128	@ 0x80
 8001078:	615a      	str	r2, [r3, #20]
  __HAL_RCC_AHB2_RELEASE_RESET();
 800107a:	4b07      	ldr	r3, [pc, #28]	@ (8001098 <HAL_DeInit+0x4c>)
 800107c:	2200      	movs	r2, #0
 800107e:	615a      	str	r2, [r3, #20]

  __HAL_RCC_AHB3_FORCE_RESET();
 8001080:	4b05      	ldr	r3, [pc, #20]	@ (8001098 <HAL_DeInit+0x4c>)
 8001082:	f04f 32ff 	mov.w	r2, #4294967295
 8001086:	619a      	str	r2, [r3, #24]
  __HAL_RCC_AHB3_RELEASE_RESET();
 8001088:	4b03      	ldr	r3, [pc, #12]	@ (8001098 <HAL_DeInit+0x4c>)
 800108a:	2200      	movs	r2, #0
 800108c:	619a      	str	r2, [r3, #24]

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 800108e:	f000 f80b 	bl	80010a8 <HAL_MspDeInit>
    
  /* Return function status */
  return HAL_OK;
 8001092:	2300      	movs	r3, #0
}
 8001094:	4618      	mov	r0, r3
 8001096:	bd80      	pop	{r7, pc}
 8001098:	40023800 	.word	0x40023800
 800109c:	10e2c80f 	.word	0x10e2c80f
 80010a0:	00077931 	.word	0x00077931
 80010a4:	0060109f 	.word	0x0060109f

080010a8 <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */ 
}
 80010ac:	bf00      	nop
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr
	...

080010b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010c0:	4b12      	ldr	r3, [pc, #72]	@ (800110c <HAL_InitTick+0x54>)
 80010c2:	681a      	ldr	r2, [r3, #0]
 80010c4:	4b12      	ldr	r3, [pc, #72]	@ (8001110 <HAL_InitTick+0x58>)
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	4619      	mov	r1, r3
 80010ca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80010d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80010d6:	4618      	mov	r0, r3
 80010d8:	f000 f93b 	bl	8001352 <HAL_SYSTICK_Config>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d001      	beq.n	80010e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010e2:	2301      	movs	r3, #1
 80010e4:	e00e      	b.n	8001104 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	2b0f      	cmp	r3, #15
 80010ea:	d80a      	bhi.n	8001102 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010ec:	2200      	movs	r2, #0
 80010ee:	6879      	ldr	r1, [r7, #4]
 80010f0:	f04f 30ff 	mov.w	r0, #4294967295
 80010f4:	f000 f911 	bl	800131a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010f8:	4a06      	ldr	r2, [pc, #24]	@ (8001114 <HAL_InitTick+0x5c>)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010fe:	2300      	movs	r3, #0
 8001100:	e000      	b.n	8001104 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001102:	2301      	movs	r3, #1
}
 8001104:	4618      	mov	r0, r3
 8001106:	3708      	adds	r7, #8
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}
 800110c:	20000000 	.word	0x20000000
 8001110:	20000008 	.word	0x20000008
 8001114:	20000004 	.word	0x20000004

08001118 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001118:	b480      	push	{r7}
 800111a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800111c:	4b06      	ldr	r3, [pc, #24]	@ (8001138 <HAL_IncTick+0x20>)
 800111e:	781b      	ldrb	r3, [r3, #0]
 8001120:	461a      	mov	r2, r3
 8001122:	4b06      	ldr	r3, [pc, #24]	@ (800113c <HAL_IncTick+0x24>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	4413      	add	r3, r2
 8001128:	4a04      	ldr	r2, [pc, #16]	@ (800113c <HAL_IncTick+0x24>)
 800112a:	6013      	str	r3, [r2, #0]
}
 800112c:	bf00      	nop
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr
 8001136:	bf00      	nop
 8001138:	20000008 	.word	0x20000008
 800113c:	20003d14 	.word	0x20003d14

08001140 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0
  return uwTick;
 8001144:	4b03      	ldr	r3, [pc, #12]	@ (8001154 <HAL_GetTick+0x14>)
 8001146:	681b      	ldr	r3, [r3, #0]
}
 8001148:	4618      	mov	r0, r3
 800114a:	46bd      	mov	sp, r7
 800114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001150:	4770      	bx	lr
 8001152:	bf00      	nop
 8001154:	20003d14 	.word	0x20003d14

08001158 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b084      	sub	sp, #16
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001160:	f7ff ffee 	bl	8001140 <HAL_GetTick>
 8001164:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001170:	d005      	beq.n	800117e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001172:	4b0a      	ldr	r3, [pc, #40]	@ (800119c <HAL_Delay+0x44>)
 8001174:	781b      	ldrb	r3, [r3, #0]
 8001176:	461a      	mov	r2, r3
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	4413      	add	r3, r2
 800117c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800117e:	bf00      	nop
 8001180:	f7ff ffde 	bl	8001140 <HAL_GetTick>
 8001184:	4602      	mov	r2, r0
 8001186:	68bb      	ldr	r3, [r7, #8]
 8001188:	1ad3      	subs	r3, r2, r3
 800118a:	68fa      	ldr	r2, [r7, #12]
 800118c:	429a      	cmp	r2, r3
 800118e:	d8f7      	bhi.n	8001180 <HAL_Delay+0x28>
  {
  }
}
 8001190:	bf00      	nop
 8001192:	bf00      	nop
 8001194:	3710      	adds	r7, #16
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	20000008 	.word	0x20000008

080011a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b085      	sub	sp, #20
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	f003 0307 	and.w	r3, r3, #7
 80011ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011b0:	4b0c      	ldr	r3, [pc, #48]	@ (80011e4 <__NVIC_SetPriorityGrouping+0x44>)
 80011b2:	68db      	ldr	r3, [r3, #12]
 80011b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011b6:	68ba      	ldr	r2, [r7, #8]
 80011b8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80011bc:	4013      	ands	r3, r2
 80011be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011c4:	68bb      	ldr	r3, [r7, #8]
 80011c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011c8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80011cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80011d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011d2:	4a04      	ldr	r2, [pc, #16]	@ (80011e4 <__NVIC_SetPriorityGrouping+0x44>)
 80011d4:	68bb      	ldr	r3, [r7, #8]
 80011d6:	60d3      	str	r3, [r2, #12]
}
 80011d8:	bf00      	nop
 80011da:	3714      	adds	r7, #20
 80011dc:	46bd      	mov	sp, r7
 80011de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e2:	4770      	bx	lr
 80011e4:	e000ed00 	.word	0xe000ed00

080011e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011ec:	4b04      	ldr	r3, [pc, #16]	@ (8001200 <__NVIC_GetPriorityGrouping+0x18>)
 80011ee:	68db      	ldr	r3, [r3, #12]
 80011f0:	0a1b      	lsrs	r3, r3, #8
 80011f2:	f003 0307 	and.w	r3, r3, #7
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	46bd      	mov	sp, r7
 80011fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fe:	4770      	bx	lr
 8001200:	e000ed00 	.word	0xe000ed00

08001204 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001204:	b480      	push	{r7}
 8001206:	b083      	sub	sp, #12
 8001208:	af00      	add	r7, sp, #0
 800120a:	4603      	mov	r3, r0
 800120c:	6039      	str	r1, [r7, #0]
 800120e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001210:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001214:	2b00      	cmp	r3, #0
 8001216:	db0a      	blt.n	800122e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	b2da      	uxtb	r2, r3
 800121c:	490c      	ldr	r1, [pc, #48]	@ (8001250 <__NVIC_SetPriority+0x4c>)
 800121e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001222:	0112      	lsls	r2, r2, #4
 8001224:	b2d2      	uxtb	r2, r2
 8001226:	440b      	add	r3, r1
 8001228:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800122c:	e00a      	b.n	8001244 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	b2da      	uxtb	r2, r3
 8001232:	4908      	ldr	r1, [pc, #32]	@ (8001254 <__NVIC_SetPriority+0x50>)
 8001234:	79fb      	ldrb	r3, [r7, #7]
 8001236:	f003 030f 	and.w	r3, r3, #15
 800123a:	3b04      	subs	r3, #4
 800123c:	0112      	lsls	r2, r2, #4
 800123e:	b2d2      	uxtb	r2, r2
 8001240:	440b      	add	r3, r1
 8001242:	761a      	strb	r2, [r3, #24]
}
 8001244:	bf00      	nop
 8001246:	370c      	adds	r7, #12
 8001248:	46bd      	mov	sp, r7
 800124a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124e:	4770      	bx	lr
 8001250:	e000e100 	.word	0xe000e100
 8001254:	e000ed00 	.word	0xe000ed00

08001258 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001258:	b480      	push	{r7}
 800125a:	b089      	sub	sp, #36	@ 0x24
 800125c:	af00      	add	r7, sp, #0
 800125e:	60f8      	str	r0, [r7, #12]
 8001260:	60b9      	str	r1, [r7, #8]
 8001262:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	f003 0307 	and.w	r3, r3, #7
 800126a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800126c:	69fb      	ldr	r3, [r7, #28]
 800126e:	f1c3 0307 	rsb	r3, r3, #7
 8001272:	2b04      	cmp	r3, #4
 8001274:	bf28      	it	cs
 8001276:	2304      	movcs	r3, #4
 8001278:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800127a:	69fb      	ldr	r3, [r7, #28]
 800127c:	3304      	adds	r3, #4
 800127e:	2b06      	cmp	r3, #6
 8001280:	d902      	bls.n	8001288 <NVIC_EncodePriority+0x30>
 8001282:	69fb      	ldr	r3, [r7, #28]
 8001284:	3b03      	subs	r3, #3
 8001286:	e000      	b.n	800128a <NVIC_EncodePriority+0x32>
 8001288:	2300      	movs	r3, #0
 800128a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800128c:	f04f 32ff 	mov.w	r2, #4294967295
 8001290:	69bb      	ldr	r3, [r7, #24]
 8001292:	fa02 f303 	lsl.w	r3, r2, r3
 8001296:	43da      	mvns	r2, r3
 8001298:	68bb      	ldr	r3, [r7, #8]
 800129a:	401a      	ands	r2, r3
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012a0:	f04f 31ff 	mov.w	r1, #4294967295
 80012a4:	697b      	ldr	r3, [r7, #20]
 80012a6:	fa01 f303 	lsl.w	r3, r1, r3
 80012aa:	43d9      	mvns	r1, r3
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012b0:	4313      	orrs	r3, r2
         );
}
 80012b2:	4618      	mov	r0, r3
 80012b4:	3724      	adds	r7, #36	@ 0x24
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr
	...

080012c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b082      	sub	sp, #8
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	3b01      	subs	r3, #1
 80012cc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80012d0:	d301      	bcc.n	80012d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012d2:	2301      	movs	r3, #1
 80012d4:	e00f      	b.n	80012f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012d6:	4a0a      	ldr	r2, [pc, #40]	@ (8001300 <SysTick_Config+0x40>)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	3b01      	subs	r3, #1
 80012dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012de:	210f      	movs	r1, #15
 80012e0:	f04f 30ff 	mov.w	r0, #4294967295
 80012e4:	f7ff ff8e 	bl	8001204 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012e8:	4b05      	ldr	r3, [pc, #20]	@ (8001300 <SysTick_Config+0x40>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012ee:	4b04      	ldr	r3, [pc, #16]	@ (8001300 <SysTick_Config+0x40>)
 80012f0:	2207      	movs	r2, #7
 80012f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012f4:	2300      	movs	r3, #0
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	3708      	adds	r7, #8
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	e000e010 	.word	0xe000e010

08001304 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b082      	sub	sp, #8
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800130c:	6878      	ldr	r0, [r7, #4]
 800130e:	f7ff ff47 	bl	80011a0 <__NVIC_SetPriorityGrouping>
}
 8001312:	bf00      	nop
 8001314:	3708      	adds	r7, #8
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}

0800131a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800131a:	b580      	push	{r7, lr}
 800131c:	b086      	sub	sp, #24
 800131e:	af00      	add	r7, sp, #0
 8001320:	4603      	mov	r3, r0
 8001322:	60b9      	str	r1, [r7, #8]
 8001324:	607a      	str	r2, [r7, #4]
 8001326:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001328:	2300      	movs	r3, #0
 800132a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800132c:	f7ff ff5c 	bl	80011e8 <__NVIC_GetPriorityGrouping>
 8001330:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001332:	687a      	ldr	r2, [r7, #4]
 8001334:	68b9      	ldr	r1, [r7, #8]
 8001336:	6978      	ldr	r0, [r7, #20]
 8001338:	f7ff ff8e 	bl	8001258 <NVIC_EncodePriority>
 800133c:	4602      	mov	r2, r0
 800133e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001342:	4611      	mov	r1, r2
 8001344:	4618      	mov	r0, r3
 8001346:	f7ff ff5d 	bl	8001204 <__NVIC_SetPriority>
}
 800134a:	bf00      	nop
 800134c:	3718      	adds	r7, #24
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}

08001352 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001352:	b580      	push	{r7, lr}
 8001354:	b082      	sub	sp, #8
 8001356:	af00      	add	r7, sp, #0
 8001358:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800135a:	6878      	ldr	r0, [r7, #4]
 800135c:	f7ff ffb0 	bl	80012c0 <SysTick_Config>
 8001360:	4603      	mov	r3, r0
}
 8001362:	4618      	mov	r0, r3
 8001364:	3708      	adds	r7, #8
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}

0800136a <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800136a:	b580      	push	{r7, lr}
 800136c:	b082      	sub	sp, #8
 800136e:	af00      	add	r7, sp, #0
 8001370:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	2b00      	cmp	r3, #0
 8001376:	d101      	bne.n	800137c <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001378:	2301      	movs	r3, #1
 800137a:	e00e      	b.n	800139a <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	795b      	ldrb	r3, [r3, #5]
 8001380:	b2db      	uxtb	r3, r3
 8001382:	2b00      	cmp	r3, #0
 8001384:	d105      	bne.n	8001392 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	2200      	movs	r2, #0
 800138a:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800138c:	6878      	ldr	r0, [r7, #4]
 800138e:	f7ff fcfb 	bl	8000d88 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	2201      	movs	r2, #1
 8001396:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001398:	2300      	movs	r3, #0
}
 800139a:	4618      	mov	r0, r3
 800139c:	3708      	adds	r7, #8
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}

080013a2 <HAL_CRC_Accumulate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Accumulate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 80013a2:	b480      	push	{r7}
 80013a4:	b087      	sub	sp, #28
 80013a6:	af00      	add	r7, sp, #0
 80013a8:	60f8      	str	r0, [r7, #12]
 80013aa:	60b9      	str	r1, [r7, #8]
 80013ac:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 80013ae:	2300      	movs	r3, #0
 80013b0:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	2202      	movs	r2, #2
 80013b6:	715a      	strb	r2, [r3, #5]

  /* Enter Data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 80013b8:	2300      	movs	r3, #0
 80013ba:	617b      	str	r3, [r7, #20]
 80013bc:	e00a      	b.n	80013d4 <HAL_CRC_Accumulate+0x32>
  {
    hcrc->Instance->DR = pBuffer[index];
 80013be:	697b      	ldr	r3, [r7, #20]
 80013c0:	009b      	lsls	r3, r3, #2
 80013c2:	68ba      	ldr	r2, [r7, #8]
 80013c4:	441a      	add	r2, r3
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	6812      	ldr	r2, [r2, #0]
 80013cc:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < BufferLength; index++)
 80013ce:	697b      	ldr	r3, [r7, #20]
 80013d0:	3301      	adds	r3, #1
 80013d2:	617b      	str	r3, [r7, #20]
 80013d4:	697a      	ldr	r2, [r7, #20]
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	429a      	cmp	r2, r3
 80013da:	d3f0      	bcc.n	80013be <HAL_CRC_Accumulate+0x1c>
  }
  temp = hcrc->Instance->DR;
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	2201      	movs	r2, #1
 80013e8:	715a      	strb	r2, [r3, #5]

  /* Return the CRC computed value */
  return temp;
 80013ea:	693b      	ldr	r3, [r7, #16]
}
 80013ec:	4618      	mov	r0, r3
 80013ee:	371c      	adds	r7, #28
 80013f0:	46bd      	mov	sp, r7
 80013f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f6:	4770      	bx	lr

080013f8 <HAL_CRC_Calculate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b087      	sub	sp, #28
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	60f8      	str	r0, [r7, #12]
 8001400:	60b9      	str	r1, [r7, #8]
 8001402:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8001404:	2300      	movs	r3, #0
 8001406:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	2202      	movs	r2, #2
 800140c:	715a      	strb	r2, [r3, #5]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	689a      	ldr	r2, [r3, #8]
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f042 0201 	orr.w	r2, r2, #1
 800141c:	609a      	str	r2, [r3, #8]

  /* Enter 32-bit input data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 800141e:	2300      	movs	r3, #0
 8001420:	617b      	str	r3, [r7, #20]
 8001422:	e00a      	b.n	800143a <HAL_CRC_Calculate+0x42>
  {
    hcrc->Instance->DR = pBuffer[index];
 8001424:	697b      	ldr	r3, [r7, #20]
 8001426:	009b      	lsls	r3, r3, #2
 8001428:	68ba      	ldr	r2, [r7, #8]
 800142a:	441a      	add	r2, r3
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	6812      	ldr	r2, [r2, #0]
 8001432:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < BufferLength; index++)
 8001434:	697b      	ldr	r3, [r7, #20]
 8001436:	3301      	adds	r3, #1
 8001438:	617b      	str	r3, [r7, #20]
 800143a:	697a      	ldr	r2, [r7, #20]
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	429a      	cmp	r2, r3
 8001440:	d3f0      	bcc.n	8001424 <HAL_CRC_Calculate+0x2c>
  }
  temp = hcrc->Instance->DR;
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	2201      	movs	r2, #1
 800144e:	715a      	strb	r2, [r3, #5]

  /* Return the CRC computed value */
  return temp;
 8001450:	693b      	ldr	r3, [r7, #16]
}
 8001452:	4618      	mov	r0, r3
 8001454:	371c      	adds	r7, #28
 8001456:	46bd      	mov	sp, r7
 8001458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145c:	4770      	bx	lr
	...

08001460 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b086      	sub	sp, #24
 8001464:	af00      	add	r7, sp, #0
 8001466:	60f8      	str	r0, [r7, #12]
 8001468:	60b9      	str	r1, [r7, #8]
 800146a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800146e:	4b23      	ldr	r3, [pc, #140]	@ (80014fc <HAL_FLASH_Program+0x9c>)
 8001470:	7e1b      	ldrb	r3, [r3, #24]
 8001472:	2b01      	cmp	r3, #1
 8001474:	d101      	bne.n	800147a <HAL_FLASH_Program+0x1a>
 8001476:	2302      	movs	r3, #2
 8001478:	e03b      	b.n	80014f2 <HAL_FLASH_Program+0x92>
 800147a:	4b20      	ldr	r3, [pc, #128]	@ (80014fc <HAL_FLASH_Program+0x9c>)
 800147c:	2201      	movs	r2, #1
 800147e:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001480:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001484:	f000 f870 	bl	8001568 <FLASH_WaitForLastOperation>
 8001488:	4603      	mov	r3, r0
 800148a:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 800148c:	7dfb      	ldrb	r3, [r7, #23]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d12b      	bne.n	80014ea <HAL_FLASH_Program+0x8a>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d105      	bne.n	80014a4 <HAL_FLASH_Program+0x44>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8001498:	783b      	ldrb	r3, [r7, #0]
 800149a:	4619      	mov	r1, r3
 800149c:	68b8      	ldr	r0, [r7, #8]
 800149e:	f000 f91b 	bl	80016d8 <FLASH_Program_Byte>
 80014a2:	e016      	b.n	80014d2 <HAL_FLASH_Program+0x72>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	2b01      	cmp	r3, #1
 80014a8:	d105      	bne.n	80014b6 <HAL_FLASH_Program+0x56>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 80014aa:	883b      	ldrh	r3, [r7, #0]
 80014ac:	4619      	mov	r1, r3
 80014ae:	68b8      	ldr	r0, [r7, #8]
 80014b0:	f000 f8ee 	bl	8001690 <FLASH_Program_HalfWord>
 80014b4:	e00d      	b.n	80014d2 <HAL_FLASH_Program+0x72>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	2b02      	cmp	r3, #2
 80014ba:	d105      	bne.n	80014c8 <HAL_FLASH_Program+0x68>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	4619      	mov	r1, r3
 80014c0:	68b8      	ldr	r0, [r7, #8]
 80014c2:	f000 f8c3 	bl	800164c <FLASH_Program_Word>
 80014c6:	e004      	b.n	80014d2 <HAL_FLASH_Program+0x72>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 80014c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80014cc:	68b8      	ldr	r0, [r7, #8]
 80014ce:	f000 f88b 	bl	80015e8 <FLASH_Program_DoubleWord>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80014d2:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80014d6:	f000 f847 	bl	8001568 <FLASH_WaitForLastOperation>
 80014da:	4603      	mov	r3, r0
 80014dc:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 80014de:	4b08      	ldr	r3, [pc, #32]	@ (8001500 <HAL_FLASH_Program+0xa0>)
 80014e0:	691b      	ldr	r3, [r3, #16]
 80014e2:	4a07      	ldr	r2, [pc, #28]	@ (8001500 <HAL_FLASH_Program+0xa0>)
 80014e4:	f023 0301 	bic.w	r3, r3, #1
 80014e8:	6113      	str	r3, [r2, #16]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80014ea:	4b04      	ldr	r3, [pc, #16]	@ (80014fc <HAL_FLASH_Program+0x9c>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	761a      	strb	r2, [r3, #24]

  return status;
 80014f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80014f2:	4618      	mov	r0, r3
 80014f4:	3718      	adds	r7, #24
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	20003d18 	.word	0x20003d18
 8001500:	40023c00 	.word	0x40023c00

08001504 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001504:	b480      	push	{r7}
 8001506:	b083      	sub	sp, #12
 8001508:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800150a:	2300      	movs	r3, #0
 800150c:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800150e:	4b0b      	ldr	r3, [pc, #44]	@ (800153c <HAL_FLASH_Unlock+0x38>)
 8001510:	691b      	ldr	r3, [r3, #16]
 8001512:	2b00      	cmp	r3, #0
 8001514:	da0b      	bge.n	800152e <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001516:	4b09      	ldr	r3, [pc, #36]	@ (800153c <HAL_FLASH_Unlock+0x38>)
 8001518:	4a09      	ldr	r2, [pc, #36]	@ (8001540 <HAL_FLASH_Unlock+0x3c>)
 800151a:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800151c:	4b07      	ldr	r3, [pc, #28]	@ (800153c <HAL_FLASH_Unlock+0x38>)
 800151e:	4a09      	ldr	r2, [pc, #36]	@ (8001544 <HAL_FLASH_Unlock+0x40>)
 8001520:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001522:	4b06      	ldr	r3, [pc, #24]	@ (800153c <HAL_FLASH_Unlock+0x38>)
 8001524:	691b      	ldr	r3, [r3, #16]
 8001526:	2b00      	cmp	r3, #0
 8001528:	da01      	bge.n	800152e <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800152a:	2301      	movs	r3, #1
 800152c:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800152e:	79fb      	ldrb	r3, [r7, #7]
}
 8001530:	4618      	mov	r0, r3
 8001532:	370c      	adds	r7, #12
 8001534:	46bd      	mov	sp, r7
 8001536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153a:	4770      	bx	lr
 800153c:	40023c00 	.word	0x40023c00
 8001540:	45670123 	.word	0x45670123
 8001544:	cdef89ab 	.word	0xcdef89ab

08001548 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 800154c:	4b05      	ldr	r3, [pc, #20]	@ (8001564 <HAL_FLASH_Lock+0x1c>)
 800154e:	691b      	ldr	r3, [r3, #16]
 8001550:	4a04      	ldr	r2, [pc, #16]	@ (8001564 <HAL_FLASH_Lock+0x1c>)
 8001552:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001556:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 8001558:	2300      	movs	r3, #0
}
 800155a:	4618      	mov	r0, r3
 800155c:	46bd      	mov	sp, r7
 800155e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001562:	4770      	bx	lr
 8001564:	40023c00 	.word	0x40023c00

08001568 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b084      	sub	sp, #16
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001570:	2300      	movs	r3, #0
 8001572:	60fb      	str	r3, [r7, #12]

  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001574:	4b1a      	ldr	r3, [pc, #104]	@ (80015e0 <FLASH_WaitForLastOperation+0x78>)
 8001576:	2200      	movs	r2, #0
 8001578:	61da      	str	r2, [r3, #28]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 800157a:	f7ff fde1 	bl	8001140 <HAL_GetTick>
 800157e:	60f8      	str	r0, [r7, #12]

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 8001580:	e010      	b.n	80015a4 <FLASH_WaitForLastOperation+0x3c>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001588:	d00c      	beq.n	80015a4 <FLASH_WaitForLastOperation+0x3c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d007      	beq.n	80015a0 <FLASH_WaitForLastOperation+0x38>
 8001590:	f7ff fdd6 	bl	8001140 <HAL_GetTick>
 8001594:	4602      	mov	r2, r0
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	1ad3      	subs	r3, r2, r3
 800159a:	687a      	ldr	r2, [r7, #4]
 800159c:	429a      	cmp	r2, r3
 800159e:	d201      	bcs.n	80015a4 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 80015a0:	2303      	movs	r3, #3
 80015a2:	e019      	b.n	80015d8 <FLASH_WaitForLastOperation+0x70>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 80015a4:	4b0f      	ldr	r3, [pc, #60]	@ (80015e4 <FLASH_WaitForLastOperation+0x7c>)
 80015a6:	68db      	ldr	r3, [r3, #12]
 80015a8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d1e8      	bne.n	8001582 <FLASH_WaitForLastOperation+0x1a>
      }
    }
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 80015b0:	4b0c      	ldr	r3, [pc, #48]	@ (80015e4 <FLASH_WaitForLastOperation+0x7c>)
 80015b2:	68db      	ldr	r3, [r3, #12]
 80015b4:	f003 0301 	and.w	r3, r3, #1
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d002      	beq.n	80015c2 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80015bc:	4b09      	ldr	r3, [pc, #36]	@ (80015e4 <FLASH_WaitForLastOperation+0x7c>)
 80015be:	2201      	movs	r2, #1
 80015c0:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 80015c2:	4b08      	ldr	r3, [pc, #32]	@ (80015e4 <FLASH_WaitForLastOperation+0x7c>)
 80015c4:	68db      	ldr	r3, [r3, #12]
 80015c6:	f403 73f9 	and.w	r3, r3, #498	@ 0x1f2
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d003      	beq.n	80015d6 <FLASH_WaitForLastOperation+0x6e>
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                            FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80015ce:	f000 f8a5 	bl	800171c <FLASH_SetErrorCode>
    return HAL_ERROR;
 80015d2:	2301      	movs	r3, #1
 80015d4:	e000      	b.n	80015d8 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 80015d6:	2300      	movs	r3, #0

}
 80015d8:	4618      	mov	r0, r3
 80015da:	3710      	adds	r7, #16
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	20003d18 	.word	0x20003d18
 80015e4:	40023c00 	.word	0x40023c00

080015e8 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b085      	sub	sp, #20
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	60f8      	str	r0, [r7, #12]
 80015f0:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80015f4:	4b14      	ldr	r3, [pc, #80]	@ (8001648 <FLASH_Program_DoubleWord+0x60>)
 80015f6:	691b      	ldr	r3, [r3, #16]
 80015f8:	4a13      	ldr	r2, [pc, #76]	@ (8001648 <FLASH_Program_DoubleWord+0x60>)
 80015fa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80015fe:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8001600:	4b11      	ldr	r3, [pc, #68]	@ (8001648 <FLASH_Program_DoubleWord+0x60>)
 8001602:	691b      	ldr	r3, [r3, #16]
 8001604:	4a10      	ldr	r2, [pc, #64]	@ (8001648 <FLASH_Program_DoubleWord+0x60>)
 8001606:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800160a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800160c:	4b0e      	ldr	r3, [pc, #56]	@ (8001648 <FLASH_Program_DoubleWord+0x60>)
 800160e:	691b      	ldr	r3, [r3, #16]
 8001610:	4a0d      	ldr	r2, [pc, #52]	@ (8001648 <FLASH_Program_DoubleWord+0x60>)
 8001612:	f043 0301 	orr.w	r3, r3, #1
 8001616:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t *)Address = (uint32_t)Data;
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	683a      	ldr	r2, [r7, #0]
 800161c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 800161e:	f3bf 8f6f 	isb	sy
}
 8001622:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t *)(Address + 4) = (uint32_t)(Data >> 32);
 8001624:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001628:	f04f 0200 	mov.w	r2, #0
 800162c:	f04f 0300 	mov.w	r3, #0
 8001630:	000a      	movs	r2, r1
 8001632:	2300      	movs	r3, #0
 8001634:	68f9      	ldr	r1, [r7, #12]
 8001636:	3104      	adds	r1, #4
 8001638:	4613      	mov	r3, r2
 800163a:	600b      	str	r3, [r1, #0]
}
 800163c:	bf00      	nop
 800163e:	3714      	adds	r7, #20
 8001640:	46bd      	mov	sp, r7
 8001642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001646:	4770      	bx	lr
 8001648:	40023c00 	.word	0x40023c00

0800164c <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 800164c:	b480      	push	{r7}
 800164e:	b083      	sub	sp, #12
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
 8001654:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001656:	4b0d      	ldr	r3, [pc, #52]	@ (800168c <FLASH_Program_Word+0x40>)
 8001658:	691b      	ldr	r3, [r3, #16]
 800165a:	4a0c      	ldr	r2, [pc, #48]	@ (800168c <FLASH_Program_Word+0x40>)
 800165c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001660:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8001662:	4b0a      	ldr	r3, [pc, #40]	@ (800168c <FLASH_Program_Word+0x40>)
 8001664:	691b      	ldr	r3, [r3, #16]
 8001666:	4a09      	ldr	r2, [pc, #36]	@ (800168c <FLASH_Program_Word+0x40>)
 8001668:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800166c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800166e:	4b07      	ldr	r3, [pc, #28]	@ (800168c <FLASH_Program_Word+0x40>)
 8001670:	691b      	ldr	r3, [r3, #16]
 8001672:	4a06      	ldr	r2, [pc, #24]	@ (800168c <FLASH_Program_Word+0x40>)
 8001674:	f043 0301 	orr.w	r3, r3, #1
 8001678:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t *)Address = Data;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	683a      	ldr	r2, [r7, #0]
 800167e:	601a      	str	r2, [r3, #0]
}
 8001680:	bf00      	nop
 8001682:	370c      	adds	r7, #12
 8001684:	46bd      	mov	sp, r7
 8001686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168a:	4770      	bx	lr
 800168c:	40023c00 	.word	0x40023c00

08001690 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8001690:	b480      	push	{r7}
 8001692:	b083      	sub	sp, #12
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
 8001698:	460b      	mov	r3, r1
 800169a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800169c:	4b0d      	ldr	r3, [pc, #52]	@ (80016d4 <FLASH_Program_HalfWord+0x44>)
 800169e:	691b      	ldr	r3, [r3, #16]
 80016a0:	4a0c      	ldr	r2, [pc, #48]	@ (80016d4 <FLASH_Program_HalfWord+0x44>)
 80016a2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80016a6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 80016a8:	4b0a      	ldr	r3, [pc, #40]	@ (80016d4 <FLASH_Program_HalfWord+0x44>)
 80016aa:	691b      	ldr	r3, [r3, #16]
 80016ac:	4a09      	ldr	r2, [pc, #36]	@ (80016d4 <FLASH_Program_HalfWord+0x44>)
 80016ae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80016b2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80016b4:	4b07      	ldr	r3, [pc, #28]	@ (80016d4 <FLASH_Program_HalfWord+0x44>)
 80016b6:	691b      	ldr	r3, [r3, #16]
 80016b8:	4a06      	ldr	r2, [pc, #24]	@ (80016d4 <FLASH_Program_HalfWord+0x44>)
 80016ba:	f043 0301 	orr.w	r3, r3, #1
 80016be:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t *)Address = Data;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	887a      	ldrh	r2, [r7, #2]
 80016c4:	801a      	strh	r2, [r3, #0]
}
 80016c6:	bf00      	nop
 80016c8:	370c      	adds	r7, #12
 80016ca:	46bd      	mov	sp, r7
 80016cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d0:	4770      	bx	lr
 80016d2:	bf00      	nop
 80016d4:	40023c00 	.word	0x40023c00

080016d8 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 80016d8:	b480      	push	{r7}
 80016da:	b083      	sub	sp, #12
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
 80016e0:	460b      	mov	r3, r1
 80016e2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80016e4:	4b0c      	ldr	r3, [pc, #48]	@ (8001718 <FLASH_Program_Byte+0x40>)
 80016e6:	691b      	ldr	r3, [r3, #16]
 80016e8:	4a0b      	ldr	r2, [pc, #44]	@ (8001718 <FLASH_Program_Byte+0x40>)
 80016ea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80016ee:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 80016f0:	4b09      	ldr	r3, [pc, #36]	@ (8001718 <FLASH_Program_Byte+0x40>)
 80016f2:	4a09      	ldr	r2, [pc, #36]	@ (8001718 <FLASH_Program_Byte+0x40>)
 80016f4:	691b      	ldr	r3, [r3, #16]
 80016f6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80016f8:	4b07      	ldr	r3, [pc, #28]	@ (8001718 <FLASH_Program_Byte+0x40>)
 80016fa:	691b      	ldr	r3, [r3, #16]
 80016fc:	4a06      	ldr	r2, [pc, #24]	@ (8001718 <FLASH_Program_Byte+0x40>)
 80016fe:	f043 0301 	orr.w	r3, r3, #1
 8001702:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t *)Address = Data;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	78fa      	ldrb	r2, [r7, #3]
 8001708:	701a      	strb	r2, [r3, #0]
}
 800170a:	bf00      	nop
 800170c:	370c      	adds	r7, #12
 800170e:	46bd      	mov	sp, r7
 8001710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001714:	4770      	bx	lr
 8001716:	bf00      	nop
 8001718:	40023c00 	.word	0x40023c00

0800171c <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8001720:	4b2f      	ldr	r3, [pc, #188]	@ (80017e0 <FLASH_SetErrorCode+0xc4>)
 8001722:	68db      	ldr	r3, [r3, #12]
 8001724:	f003 0310 	and.w	r3, r3, #16
 8001728:	2b00      	cmp	r3, #0
 800172a:	d008      	beq.n	800173e <FLASH_SetErrorCode+0x22>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800172c:	4b2d      	ldr	r3, [pc, #180]	@ (80017e4 <FLASH_SetErrorCode+0xc8>)
 800172e:	69db      	ldr	r3, [r3, #28]
 8001730:	f043 0310 	orr.w	r3, r3, #16
 8001734:	4a2b      	ldr	r2, [pc, #172]	@ (80017e4 <FLASH_SetErrorCode+0xc8>)
 8001736:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH write protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8001738:	4b29      	ldr	r3, [pc, #164]	@ (80017e0 <FLASH_SetErrorCode+0xc4>)
 800173a:	2210      	movs	r2, #16
 800173c:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800173e:	4b28      	ldr	r3, [pc, #160]	@ (80017e0 <FLASH_SetErrorCode+0xc4>)
 8001740:	68db      	ldr	r3, [r3, #12]
 8001742:	f003 0320 	and.w	r3, r3, #32
 8001746:	2b00      	cmp	r3, #0
 8001748:	d008      	beq.n	800175c <FLASH_SetErrorCode+0x40>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800174a:	4b26      	ldr	r3, [pc, #152]	@ (80017e4 <FLASH_SetErrorCode+0xc8>)
 800174c:	69db      	ldr	r3, [r3, #28]
 800174e:	f043 0308 	orr.w	r3, r3, #8
 8001752:	4a24      	ldr	r2, [pc, #144]	@ (80017e4 <FLASH_SetErrorCode+0xc8>)
 8001754:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming alignment error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8001756:	4b22      	ldr	r3, [pc, #136]	@ (80017e0 <FLASH_SetErrorCode+0xc4>)
 8001758:	2220      	movs	r2, #32
 800175a:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 800175c:	4b20      	ldr	r3, [pc, #128]	@ (80017e0 <FLASH_SetErrorCode+0xc4>)
 800175e:	68db      	ldr	r3, [r3, #12]
 8001760:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001764:	2b00      	cmp	r3, #0
 8001766:	d008      	beq.n	800177a <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8001768:	4b1e      	ldr	r3, [pc, #120]	@ (80017e4 <FLASH_SetErrorCode+0xc8>)
 800176a:	69db      	ldr	r3, [r3, #28]
 800176c:	f043 0304 	orr.w	r3, r3, #4
 8001770:	4a1c      	ldr	r2, [pc, #112]	@ (80017e4 <FLASH_SetErrorCode+0xc8>)
 8001772:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8001774:	4b1a      	ldr	r3, [pc, #104]	@ (80017e0 <FLASH_SetErrorCode+0xc4>)
 8001776:	2240      	movs	r2, #64	@ 0x40
 8001778:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 800177a:	4b19      	ldr	r3, [pc, #100]	@ (80017e0 <FLASH_SetErrorCode+0xc4>)
 800177c:	68db      	ldr	r3, [r3, #12]
 800177e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001782:	2b00      	cmp	r3, #0
 8001784:	d008      	beq.n	8001798 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8001786:	4b17      	ldr	r3, [pc, #92]	@ (80017e4 <FLASH_SetErrorCode+0xc8>)
 8001788:	69db      	ldr	r3, [r3, #28]
 800178a:	f043 0302 	orr.w	r3, r3, #2
 800178e:	4a15      	ldr	r2, [pc, #84]	@ (80017e4 <FLASH_SetErrorCode+0xc8>)
 8001790:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8001792:	4b13      	ldr	r3, [pc, #76]	@ (80017e0 <FLASH_SetErrorCode+0xc4>)
 8001794:	2280      	movs	r2, #128	@ 0x80
 8001796:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8001798:	4b11      	ldr	r3, [pc, #68]	@ (80017e0 <FLASH_SetErrorCode+0xc4>)
 800179a:	68db      	ldr	r3, [r3, #12]
 800179c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d009      	beq.n	80017b8 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 80017a4:	4b0f      	ldr	r3, [pc, #60]	@ (80017e4 <FLASH_SetErrorCode+0xc8>)
 80017a6:	69db      	ldr	r3, [r3, #28]
 80017a8:	f043 0301 	orr.w	r3, r3, #1
 80017ac:	4a0d      	ldr	r2, [pc, #52]	@ (80017e4 <FLASH_SetErrorCode+0xc8>)
 80017ae:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 80017b0:	4b0b      	ldr	r3, [pc, #44]	@ (80017e0 <FLASH_SetErrorCode+0xc4>)
 80017b2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80017b6:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 80017b8:	4b09      	ldr	r3, [pc, #36]	@ (80017e0 <FLASH_SetErrorCode+0xc4>)
 80017ba:	68db      	ldr	r3, [r3, #12]
 80017bc:	f003 0302 	and.w	r3, r3, #2
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d008      	beq.n	80017d6 <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 80017c4:	4b07      	ldr	r3, [pc, #28]	@ (80017e4 <FLASH_SetErrorCode+0xc8>)
 80017c6:	69db      	ldr	r3, [r3, #28]
 80017c8:	f043 0320 	orr.w	r3, r3, #32
 80017cc:	4a05      	ldr	r2, [pc, #20]	@ (80017e4 <FLASH_SetErrorCode+0xc8>)
 80017ce:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 80017d0:	4b03      	ldr	r3, [pc, #12]	@ (80017e0 <FLASH_SetErrorCode+0xc4>)
 80017d2:	2202      	movs	r2, #2
 80017d4:	60da      	str	r2, [r3, #12]
  }
}
 80017d6:	bf00      	nop
 80017d8:	46bd      	mov	sp, r7
 80017da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017de:	4770      	bx	lr
 80017e0:	40023c00 	.word	0x40023c00
 80017e4:	20003d18 	.word	0x20003d18

080017e8 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b084      	sub	sp, #16
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
 80017f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t index = 0U;
 80017f2:	2300      	movs	r3, #0
 80017f4:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80017f6:	4b31      	ldr	r3, [pc, #196]	@ (80018bc <HAL_FLASHEx_Erase+0xd4>)
 80017f8:	7e1b      	ldrb	r3, [r3, #24]
 80017fa:	2b01      	cmp	r3, #1
 80017fc:	d101      	bne.n	8001802 <HAL_FLASHEx_Erase+0x1a>
 80017fe:	2302      	movs	r3, #2
 8001800:	e058      	b.n	80018b4 <HAL_FLASHEx_Erase+0xcc>
 8001802:	4b2e      	ldr	r3, [pc, #184]	@ (80018bc <HAL_FLASHEx_Erase+0xd4>)
 8001804:	2201      	movs	r2, #1
 8001806:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001808:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800180c:	f7ff feac 	bl	8001568 <FLASH_WaitForLastOperation>
 8001810:	4603      	mov	r3, r0
 8001812:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8001814:	7bfb      	ldrb	r3, [r7, #15]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d148      	bne.n	80018ac <HAL_FLASHEx_Erase+0xc4>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	f04f 32ff 	mov.w	r2, #4294967295
 8001820:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	2b01      	cmp	r3, #1
 8001828:	d115      	bne.n	8001856 <HAL_FLASHEx_Erase+0x6e>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	691b      	ldr	r3, [r3, #16]
 800182e:	b2da      	uxtb	r2, r3
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	4619      	mov	r1, r3
 8001836:	4610      	mov	r0, r2
 8001838:	f000 f844 	bl	80018c4 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800183c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001840:	f7ff fe92 	bl	8001568 <FLASH_WaitForLastOperation>
 8001844:	4603      	mov	r3, r0
 8001846:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8001848:	4b1d      	ldr	r3, [pc, #116]	@ (80018c0 <HAL_FLASHEx_Erase+0xd8>)
 800184a:	691b      	ldr	r3, [r3, #16]
 800184c:	4a1c      	ldr	r2, [pc, #112]	@ (80018c0 <HAL_FLASHEx_Erase+0xd8>)
 800184e:	f023 0304 	bic.w	r3, r3, #4
 8001852:	6113      	str	r3, [r2, #16]
 8001854:	e028      	b.n	80018a8 <HAL_FLASHEx_Erase+0xc0>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	689b      	ldr	r3, [r3, #8]
 800185a:	60bb      	str	r3, [r7, #8]
 800185c:	e01c      	b.n	8001898 <HAL_FLASHEx_Erase+0xb0>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	691b      	ldr	r3, [r3, #16]
 8001862:	b2db      	uxtb	r3, r3
 8001864:	4619      	mov	r1, r3
 8001866:	68b8      	ldr	r0, [r7, #8]
 8001868:	f000 f850 	bl	800190c <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800186c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001870:	f7ff fe7a 	bl	8001568 <FLASH_WaitForLastOperation>
 8001874:	4603      	mov	r3, r0
 8001876:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8001878:	4b11      	ldr	r3, [pc, #68]	@ (80018c0 <HAL_FLASHEx_Erase+0xd8>)
 800187a:	691b      	ldr	r3, [r3, #16]
 800187c:	4a10      	ldr	r2, [pc, #64]	@ (80018c0 <HAL_FLASHEx_Erase+0xd8>)
 800187e:	f023 03fa 	bic.w	r3, r3, #250	@ 0xfa
 8001882:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8001884:	7bfb      	ldrb	r3, [r7, #15]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d003      	beq.n	8001892 <HAL_FLASHEx_Erase+0xaa>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	68ba      	ldr	r2, [r7, #8]
 800188e:	601a      	str	r2, [r3, #0]
          break;
 8001890:	e00a      	b.n	80018a8 <HAL_FLASHEx_Erase+0xc0>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8001892:	68bb      	ldr	r3, [r7, #8]
 8001894:	3301      	adds	r3, #1
 8001896:	60bb      	str	r3, [r7, #8]
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	68da      	ldr	r2, [r3, #12]
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	689b      	ldr	r3, [r3, #8]
 80018a0:	4413      	add	r3, r2
 80018a2:	68ba      	ldr	r2, [r7, #8]
 80018a4:	429a      	cmp	r2, r3
 80018a6:	d3da      	bcc.n	800185e <HAL_FLASHEx_Erase+0x76>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 80018a8:	f000 f878 	bl	800199c <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80018ac:	4b03      	ldr	r3, [pc, #12]	@ (80018bc <HAL_FLASHEx_Erase+0xd4>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	761a      	strb	r2, [r3, #24]

  return status;
 80018b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80018b4:	4618      	mov	r0, r3
 80018b6:	3710      	adds	r7, #16
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	20003d18 	.word	0x20003d18
 80018c0:	40023c00 	.word	0x40023c00

080018c4 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b083      	sub	sp, #12
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	4603      	mov	r3, r0
 80018cc:	6039      	str	r1, [r7, #0]
 80018ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80018d0:	4b0d      	ldr	r3, [pc, #52]	@ (8001908 <FLASH_MassErase+0x44>)
 80018d2:	691b      	ldr	r3, [r3, #16]
 80018d4:	4a0c      	ldr	r2, [pc, #48]	@ (8001908 <FLASH_MassErase+0x44>)
 80018d6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80018da:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 80018dc:	4b0a      	ldr	r3, [pc, #40]	@ (8001908 <FLASH_MassErase+0x44>)
 80018de:	691b      	ldr	r3, [r3, #16]
 80018e0:	4a09      	ldr	r2, [pc, #36]	@ (8001908 <FLASH_MassErase+0x44>)
 80018e2:	f043 0304 	orr.w	r3, r3, #4
 80018e6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 80018e8:	4b07      	ldr	r3, [pc, #28]	@ (8001908 <FLASH_MassErase+0x44>)
 80018ea:	691a      	ldr	r2, [r3, #16]
 80018ec:	79fb      	ldrb	r3, [r7, #7]
 80018ee:	021b      	lsls	r3, r3, #8
 80018f0:	4313      	orrs	r3, r2
 80018f2:	4a05      	ldr	r2, [pc, #20]	@ (8001908 <FLASH_MassErase+0x44>)
 80018f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80018f8:	6113      	str	r3, [r2, #16]
}
 80018fa:	bf00      	nop
 80018fc:	370c      	adds	r7, #12
 80018fe:	46bd      	mov	sp, r7
 8001900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001904:	4770      	bx	lr
 8001906:	bf00      	nop
 8001908:	40023c00 	.word	0x40023c00

0800190c <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 800190c:	b480      	push	{r7}
 800190e:	b085      	sub	sp, #20
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
 8001914:	460b      	mov	r3, r1
 8001916:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8001918:	2300      	movs	r3, #0
 800191a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 800191c:	78fb      	ldrb	r3, [r7, #3]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d102      	bne.n	8001928 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8001922:	2300      	movs	r3, #0
 8001924:	60fb      	str	r3, [r7, #12]
 8001926:	e010      	b.n	800194a <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8001928:	78fb      	ldrb	r3, [r7, #3]
 800192a:	2b01      	cmp	r3, #1
 800192c:	d103      	bne.n	8001936 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800192e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001932:	60fb      	str	r3, [r7, #12]
 8001934:	e009      	b.n	800194a <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8001936:	78fb      	ldrb	r3, [r7, #3]
 8001938:	2b02      	cmp	r3, #2
 800193a:	d103      	bne.n	8001944 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 800193c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001940:	60fb      	str	r3, [r7, #12]
 8001942:	e002      	b.n	800194a <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8001944:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001948:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800194a:	4b13      	ldr	r3, [pc, #76]	@ (8001998 <FLASH_Erase_Sector+0x8c>)
 800194c:	691b      	ldr	r3, [r3, #16]
 800194e:	4a12      	ldr	r2, [pc, #72]	@ (8001998 <FLASH_Erase_Sector+0x8c>)
 8001950:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001954:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8001956:	4b10      	ldr	r3, [pc, #64]	@ (8001998 <FLASH_Erase_Sector+0x8c>)
 8001958:	691a      	ldr	r2, [r3, #16]
 800195a:	490f      	ldr	r1, [pc, #60]	@ (8001998 <FLASH_Erase_Sector+0x8c>)
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	4313      	orrs	r3, r2
 8001960:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8001962:	4b0d      	ldr	r3, [pc, #52]	@ (8001998 <FLASH_Erase_Sector+0x8c>)
 8001964:	691b      	ldr	r3, [r3, #16]
 8001966:	4a0c      	ldr	r2, [pc, #48]	@ (8001998 <FLASH_Erase_Sector+0x8c>)
 8001968:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800196c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800196e:	4b0a      	ldr	r3, [pc, #40]	@ (8001998 <FLASH_Erase_Sector+0x8c>)
 8001970:	691a      	ldr	r2, [r3, #16]
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	00db      	lsls	r3, r3, #3
 8001976:	4313      	orrs	r3, r2
 8001978:	4a07      	ldr	r2, [pc, #28]	@ (8001998 <FLASH_Erase_Sector+0x8c>)
 800197a:	f043 0302 	orr.w	r3, r3, #2
 800197e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8001980:	4b05      	ldr	r3, [pc, #20]	@ (8001998 <FLASH_Erase_Sector+0x8c>)
 8001982:	691b      	ldr	r3, [r3, #16]
 8001984:	4a04      	ldr	r2, [pc, #16]	@ (8001998 <FLASH_Erase_Sector+0x8c>)
 8001986:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800198a:	6113      	str	r3, [r2, #16]
}
 800198c:	bf00      	nop
 800198e:	3714      	adds	r7, #20
 8001990:	46bd      	mov	sp, r7
 8001992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001996:	4770      	bx	lr
 8001998:	40023c00 	.word	0x40023c00

0800199c <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 800199c:	b480      	push	{r7}
 800199e:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 80019a0:	4b20      	ldr	r3, [pc, #128]	@ (8001a24 <FLASH_FlushCaches+0x88>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d017      	beq.n	80019dc <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80019ac:	4b1d      	ldr	r3, [pc, #116]	@ (8001a24 <FLASH_FlushCaches+0x88>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a1c      	ldr	r2, [pc, #112]	@ (8001a24 <FLASH_FlushCaches+0x88>)
 80019b2:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80019b6:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80019b8:	4b1a      	ldr	r3, [pc, #104]	@ (8001a24 <FLASH_FlushCaches+0x88>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a19      	ldr	r2, [pc, #100]	@ (8001a24 <FLASH_FlushCaches+0x88>)
 80019be:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80019c2:	6013      	str	r3, [r2, #0]
 80019c4:	4b17      	ldr	r3, [pc, #92]	@ (8001a24 <FLASH_FlushCaches+0x88>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a16      	ldr	r2, [pc, #88]	@ (8001a24 <FLASH_FlushCaches+0x88>)
 80019ca:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80019ce:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80019d0:	4b14      	ldr	r3, [pc, #80]	@ (8001a24 <FLASH_FlushCaches+0x88>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a13      	ldr	r2, [pc, #76]	@ (8001a24 <FLASH_FlushCaches+0x88>)
 80019d6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80019da:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 80019dc:	4b11      	ldr	r3, [pc, #68]	@ (8001a24 <FLASH_FlushCaches+0x88>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d017      	beq.n	8001a18 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 80019e8:	4b0e      	ldr	r3, [pc, #56]	@ (8001a24 <FLASH_FlushCaches+0x88>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a0d      	ldr	r2, [pc, #52]	@ (8001a24 <FLASH_FlushCaches+0x88>)
 80019ee:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80019f2:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80019f4:	4b0b      	ldr	r3, [pc, #44]	@ (8001a24 <FLASH_FlushCaches+0x88>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4a0a      	ldr	r2, [pc, #40]	@ (8001a24 <FLASH_FlushCaches+0x88>)
 80019fa:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80019fe:	6013      	str	r3, [r2, #0]
 8001a00:	4b08      	ldr	r3, [pc, #32]	@ (8001a24 <FLASH_FlushCaches+0x88>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a07      	ldr	r2, [pc, #28]	@ (8001a24 <FLASH_FlushCaches+0x88>)
 8001a06:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001a0a:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a0c:	4b05      	ldr	r3, [pc, #20]	@ (8001a24 <FLASH_FlushCaches+0x88>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a04      	ldr	r2, [pc, #16]	@ (8001a24 <FLASH_FlushCaches+0x88>)
 8001a12:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001a16:	6013      	str	r3, [r2, #0]
  }
}
 8001a18:	bf00      	nop
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr
 8001a22:	bf00      	nop
 8001a24:	40023c00 	.word	0x40023c00

08001a28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b089      	sub	sp, #36	@ 0x24
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
 8001a30:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a32:	2300      	movs	r3, #0
 8001a34:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a36:	2300      	movs	r3, #0
 8001a38:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a3e:	2300      	movs	r3, #0
 8001a40:	61fb      	str	r3, [r7, #28]
 8001a42:	e159      	b.n	8001cf8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a44:	2201      	movs	r2, #1
 8001a46:	69fb      	ldr	r3, [r7, #28]
 8001a48:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	697a      	ldr	r2, [r7, #20]
 8001a54:	4013      	ands	r3, r2
 8001a56:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a58:	693a      	ldr	r2, [r7, #16]
 8001a5a:	697b      	ldr	r3, [r7, #20]
 8001a5c:	429a      	cmp	r2, r3
 8001a5e:	f040 8148 	bne.w	8001cf2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	f003 0303 	and.w	r3, r3, #3
 8001a6a:	2b01      	cmp	r3, #1
 8001a6c:	d005      	beq.n	8001a7a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a76:	2b02      	cmp	r3, #2
 8001a78:	d130      	bne.n	8001adc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	689b      	ldr	r3, [r3, #8]
 8001a7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a80:	69fb      	ldr	r3, [r7, #28]
 8001a82:	005b      	lsls	r3, r3, #1
 8001a84:	2203      	movs	r2, #3
 8001a86:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8a:	43db      	mvns	r3, r3
 8001a8c:	69ba      	ldr	r2, [r7, #24]
 8001a8e:	4013      	ands	r3, r2
 8001a90:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	68da      	ldr	r2, [r3, #12]
 8001a96:	69fb      	ldr	r3, [r7, #28]
 8001a98:	005b      	lsls	r3, r3, #1
 8001a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9e:	69ba      	ldr	r2, [r7, #24]
 8001aa0:	4313      	orrs	r3, r2
 8001aa2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	69ba      	ldr	r2, [r7, #24]
 8001aa8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	69fb      	ldr	r3, [r7, #28]
 8001ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab8:	43db      	mvns	r3, r3
 8001aba:	69ba      	ldr	r2, [r7, #24]
 8001abc:	4013      	ands	r3, r2
 8001abe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	091b      	lsrs	r3, r3, #4
 8001ac6:	f003 0201 	and.w	r2, r3, #1
 8001aca:	69fb      	ldr	r3, [r7, #28]
 8001acc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad0:	69ba      	ldr	r2, [r7, #24]
 8001ad2:	4313      	orrs	r3, r2
 8001ad4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	69ba      	ldr	r2, [r7, #24]
 8001ada:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	f003 0303 	and.w	r3, r3, #3
 8001ae4:	2b03      	cmp	r3, #3
 8001ae6:	d017      	beq.n	8001b18 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	68db      	ldr	r3, [r3, #12]
 8001aec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001aee:	69fb      	ldr	r3, [r7, #28]
 8001af0:	005b      	lsls	r3, r3, #1
 8001af2:	2203      	movs	r2, #3
 8001af4:	fa02 f303 	lsl.w	r3, r2, r3
 8001af8:	43db      	mvns	r3, r3
 8001afa:	69ba      	ldr	r2, [r7, #24]
 8001afc:	4013      	ands	r3, r2
 8001afe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	689a      	ldr	r2, [r3, #8]
 8001b04:	69fb      	ldr	r3, [r7, #28]
 8001b06:	005b      	lsls	r3, r3, #1
 8001b08:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0c:	69ba      	ldr	r2, [r7, #24]
 8001b0e:	4313      	orrs	r3, r2
 8001b10:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	69ba      	ldr	r2, [r7, #24]
 8001b16:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	f003 0303 	and.w	r3, r3, #3
 8001b20:	2b02      	cmp	r3, #2
 8001b22:	d123      	bne.n	8001b6c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b24:	69fb      	ldr	r3, [r7, #28]
 8001b26:	08da      	lsrs	r2, r3, #3
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	3208      	adds	r2, #8
 8001b2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b30:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b32:	69fb      	ldr	r3, [r7, #28]
 8001b34:	f003 0307 	and.w	r3, r3, #7
 8001b38:	009b      	lsls	r3, r3, #2
 8001b3a:	220f      	movs	r2, #15
 8001b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b40:	43db      	mvns	r3, r3
 8001b42:	69ba      	ldr	r2, [r7, #24]
 8001b44:	4013      	ands	r3, r2
 8001b46:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	691a      	ldr	r2, [r3, #16]
 8001b4c:	69fb      	ldr	r3, [r7, #28]
 8001b4e:	f003 0307 	and.w	r3, r3, #7
 8001b52:	009b      	lsls	r3, r3, #2
 8001b54:	fa02 f303 	lsl.w	r3, r2, r3
 8001b58:	69ba      	ldr	r2, [r7, #24]
 8001b5a:	4313      	orrs	r3, r2
 8001b5c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b5e:	69fb      	ldr	r3, [r7, #28]
 8001b60:	08da      	lsrs	r2, r3, #3
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	3208      	adds	r2, #8
 8001b66:	69b9      	ldr	r1, [r7, #24]
 8001b68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b72:	69fb      	ldr	r3, [r7, #28]
 8001b74:	005b      	lsls	r3, r3, #1
 8001b76:	2203      	movs	r2, #3
 8001b78:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7c:	43db      	mvns	r3, r3
 8001b7e:	69ba      	ldr	r2, [r7, #24]
 8001b80:	4013      	ands	r3, r2
 8001b82:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	f003 0203 	and.w	r2, r3, #3
 8001b8c:	69fb      	ldr	r3, [r7, #28]
 8001b8e:	005b      	lsls	r3, r3, #1
 8001b90:	fa02 f303 	lsl.w	r3, r2, r3
 8001b94:	69ba      	ldr	r2, [r7, #24]
 8001b96:	4313      	orrs	r3, r2
 8001b98:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	69ba      	ldr	r2, [r7, #24]
 8001b9e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	f000 80a2 	beq.w	8001cf2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bae:	2300      	movs	r3, #0
 8001bb0:	60fb      	str	r3, [r7, #12]
 8001bb2:	4b57      	ldr	r3, [pc, #348]	@ (8001d10 <HAL_GPIO_Init+0x2e8>)
 8001bb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bb6:	4a56      	ldr	r2, [pc, #344]	@ (8001d10 <HAL_GPIO_Init+0x2e8>)
 8001bb8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001bbc:	6453      	str	r3, [r2, #68]	@ 0x44
 8001bbe:	4b54      	ldr	r3, [pc, #336]	@ (8001d10 <HAL_GPIO_Init+0x2e8>)
 8001bc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bc2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001bc6:	60fb      	str	r3, [r7, #12]
 8001bc8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001bca:	4a52      	ldr	r2, [pc, #328]	@ (8001d14 <HAL_GPIO_Init+0x2ec>)
 8001bcc:	69fb      	ldr	r3, [r7, #28]
 8001bce:	089b      	lsrs	r3, r3, #2
 8001bd0:	3302      	adds	r3, #2
 8001bd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001bd8:	69fb      	ldr	r3, [r7, #28]
 8001bda:	f003 0303 	and.w	r3, r3, #3
 8001bde:	009b      	lsls	r3, r3, #2
 8001be0:	220f      	movs	r2, #15
 8001be2:	fa02 f303 	lsl.w	r3, r2, r3
 8001be6:	43db      	mvns	r3, r3
 8001be8:	69ba      	ldr	r2, [r7, #24]
 8001bea:	4013      	ands	r3, r2
 8001bec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	4a49      	ldr	r2, [pc, #292]	@ (8001d18 <HAL_GPIO_Init+0x2f0>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d019      	beq.n	8001c2a <HAL_GPIO_Init+0x202>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	4a48      	ldr	r2, [pc, #288]	@ (8001d1c <HAL_GPIO_Init+0x2f4>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d013      	beq.n	8001c26 <HAL_GPIO_Init+0x1fe>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	4a47      	ldr	r2, [pc, #284]	@ (8001d20 <HAL_GPIO_Init+0x2f8>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d00d      	beq.n	8001c22 <HAL_GPIO_Init+0x1fa>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	4a46      	ldr	r2, [pc, #280]	@ (8001d24 <HAL_GPIO_Init+0x2fc>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d007      	beq.n	8001c1e <HAL_GPIO_Init+0x1f6>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	4a45      	ldr	r2, [pc, #276]	@ (8001d28 <HAL_GPIO_Init+0x300>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d101      	bne.n	8001c1a <HAL_GPIO_Init+0x1f2>
 8001c16:	2304      	movs	r3, #4
 8001c18:	e008      	b.n	8001c2c <HAL_GPIO_Init+0x204>
 8001c1a:	2307      	movs	r3, #7
 8001c1c:	e006      	b.n	8001c2c <HAL_GPIO_Init+0x204>
 8001c1e:	2303      	movs	r3, #3
 8001c20:	e004      	b.n	8001c2c <HAL_GPIO_Init+0x204>
 8001c22:	2302      	movs	r3, #2
 8001c24:	e002      	b.n	8001c2c <HAL_GPIO_Init+0x204>
 8001c26:	2301      	movs	r3, #1
 8001c28:	e000      	b.n	8001c2c <HAL_GPIO_Init+0x204>
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	69fa      	ldr	r2, [r7, #28]
 8001c2e:	f002 0203 	and.w	r2, r2, #3
 8001c32:	0092      	lsls	r2, r2, #2
 8001c34:	4093      	lsls	r3, r2
 8001c36:	69ba      	ldr	r2, [r7, #24]
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c3c:	4935      	ldr	r1, [pc, #212]	@ (8001d14 <HAL_GPIO_Init+0x2ec>)
 8001c3e:	69fb      	ldr	r3, [r7, #28]
 8001c40:	089b      	lsrs	r3, r3, #2
 8001c42:	3302      	adds	r3, #2
 8001c44:	69ba      	ldr	r2, [r7, #24]
 8001c46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c4a:	4b38      	ldr	r3, [pc, #224]	@ (8001d2c <HAL_GPIO_Init+0x304>)
 8001c4c:	689b      	ldr	r3, [r3, #8]
 8001c4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c50:	693b      	ldr	r3, [r7, #16]
 8001c52:	43db      	mvns	r3, r3
 8001c54:	69ba      	ldr	r2, [r7, #24]
 8001c56:	4013      	ands	r3, r2
 8001c58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d003      	beq.n	8001c6e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001c66:	69ba      	ldr	r2, [r7, #24]
 8001c68:	693b      	ldr	r3, [r7, #16]
 8001c6a:	4313      	orrs	r3, r2
 8001c6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c6e:	4a2f      	ldr	r2, [pc, #188]	@ (8001d2c <HAL_GPIO_Init+0x304>)
 8001c70:	69bb      	ldr	r3, [r7, #24]
 8001c72:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c74:	4b2d      	ldr	r3, [pc, #180]	@ (8001d2c <HAL_GPIO_Init+0x304>)
 8001c76:	68db      	ldr	r3, [r3, #12]
 8001c78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c7a:	693b      	ldr	r3, [r7, #16]
 8001c7c:	43db      	mvns	r3, r3
 8001c7e:	69ba      	ldr	r2, [r7, #24]
 8001c80:	4013      	ands	r3, r2
 8001c82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d003      	beq.n	8001c98 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001c90:	69ba      	ldr	r2, [r7, #24]
 8001c92:	693b      	ldr	r3, [r7, #16]
 8001c94:	4313      	orrs	r3, r2
 8001c96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c98:	4a24      	ldr	r2, [pc, #144]	@ (8001d2c <HAL_GPIO_Init+0x304>)
 8001c9a:	69bb      	ldr	r3, [r7, #24]
 8001c9c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001c9e:	4b23      	ldr	r3, [pc, #140]	@ (8001d2c <HAL_GPIO_Init+0x304>)
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ca4:	693b      	ldr	r3, [r7, #16]
 8001ca6:	43db      	mvns	r3, r3
 8001ca8:	69ba      	ldr	r2, [r7, #24]
 8001caa:	4013      	ands	r3, r2
 8001cac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d003      	beq.n	8001cc2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001cba:	69ba      	ldr	r2, [r7, #24]
 8001cbc:	693b      	ldr	r3, [r7, #16]
 8001cbe:	4313      	orrs	r3, r2
 8001cc0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001cc2:	4a1a      	ldr	r2, [pc, #104]	@ (8001d2c <HAL_GPIO_Init+0x304>)
 8001cc4:	69bb      	ldr	r3, [r7, #24]
 8001cc6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001cc8:	4b18      	ldr	r3, [pc, #96]	@ (8001d2c <HAL_GPIO_Init+0x304>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cce:	693b      	ldr	r3, [r7, #16]
 8001cd0:	43db      	mvns	r3, r3
 8001cd2:	69ba      	ldr	r2, [r7, #24]
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d003      	beq.n	8001cec <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001ce4:	69ba      	ldr	r2, [r7, #24]
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	4313      	orrs	r3, r2
 8001cea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001cec:	4a0f      	ldr	r2, [pc, #60]	@ (8001d2c <HAL_GPIO_Init+0x304>)
 8001cee:	69bb      	ldr	r3, [r7, #24]
 8001cf0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001cf2:	69fb      	ldr	r3, [r7, #28]
 8001cf4:	3301      	adds	r3, #1
 8001cf6:	61fb      	str	r3, [r7, #28]
 8001cf8:	69fb      	ldr	r3, [r7, #28]
 8001cfa:	2b0f      	cmp	r3, #15
 8001cfc:	f67f aea2 	bls.w	8001a44 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d00:	bf00      	nop
 8001d02:	bf00      	nop
 8001d04:	3724      	adds	r7, #36	@ 0x24
 8001d06:	46bd      	mov	sp, r7
 8001d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0c:	4770      	bx	lr
 8001d0e:	bf00      	nop
 8001d10:	40023800 	.word	0x40023800
 8001d14:	40013800 	.word	0x40013800
 8001d18:	40020000 	.word	0x40020000
 8001d1c:	40020400 	.word	0x40020400
 8001d20:	40020800 	.word	0x40020800
 8001d24:	40020c00 	.word	0x40020c00
 8001d28:	40021000 	.word	0x40021000
 8001d2c:	40013c00 	.word	0x40013c00

08001d30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b083      	sub	sp, #12
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
 8001d38:	460b      	mov	r3, r1
 8001d3a:	807b      	strh	r3, [r7, #2]
 8001d3c:	4613      	mov	r3, r2
 8001d3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d40:	787b      	ldrb	r3, [r7, #1]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d003      	beq.n	8001d4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d46:	887a      	ldrh	r2, [r7, #2]
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001d4c:	e003      	b.n	8001d56 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001d4e:	887b      	ldrh	r3, [r7, #2]
 8001d50:	041a      	lsls	r2, r3, #16
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	619a      	str	r2, [r3, #24]
}
 8001d56:	bf00      	nop
 8001d58:	370c      	adds	r7, #12
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d60:	4770      	bx	lr
	...

08001d64 <HAL_PWR_EnableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b083      	sub	sp, #12
 8001d68:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8001d6a:	4b06      	ldr	r3, [pc, #24]	@ (8001d84 <HAL_PWR_EnableBkUpAccess+0x20>)
 8001d6c:	2201      	movs	r2, #1
 8001d6e:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8001d70:	4b05      	ldr	r3, [pc, #20]	@ (8001d88 <HAL_PWR_EnableBkUpAccess+0x24>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 8001d76:	687b      	ldr	r3, [r7, #4]
}
 8001d78:	bf00      	nop
 8001d7a:	370c      	adds	r7, #12
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d82:	4770      	bx	lr
 8001d84:	420e0020 	.word	0x420e0020
 8001d88:	40007000 	.word	0x40007000

08001d8c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b086      	sub	sp, #24
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d101      	bne.n	8001d9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	e267      	b.n	800226e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f003 0301 	and.w	r3, r3, #1
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d075      	beq.n	8001e96 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001daa:	4b88      	ldr	r3, [pc, #544]	@ (8001fcc <HAL_RCC_OscConfig+0x240>)
 8001dac:	689b      	ldr	r3, [r3, #8]
 8001dae:	f003 030c 	and.w	r3, r3, #12
 8001db2:	2b04      	cmp	r3, #4
 8001db4:	d00c      	beq.n	8001dd0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001db6:	4b85      	ldr	r3, [pc, #532]	@ (8001fcc <HAL_RCC_OscConfig+0x240>)
 8001db8:	689b      	ldr	r3, [r3, #8]
 8001dba:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001dbe:	2b08      	cmp	r3, #8
 8001dc0:	d112      	bne.n	8001de8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001dc2:	4b82      	ldr	r3, [pc, #520]	@ (8001fcc <HAL_RCC_OscConfig+0x240>)
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001dca:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001dce:	d10b      	bne.n	8001de8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dd0:	4b7e      	ldr	r3, [pc, #504]	@ (8001fcc <HAL_RCC_OscConfig+0x240>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d05b      	beq.n	8001e94 <HAL_RCC_OscConfig+0x108>
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d157      	bne.n	8001e94 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001de4:	2301      	movs	r3, #1
 8001de6:	e242      	b.n	800226e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001df0:	d106      	bne.n	8001e00 <HAL_RCC_OscConfig+0x74>
 8001df2:	4b76      	ldr	r3, [pc, #472]	@ (8001fcc <HAL_RCC_OscConfig+0x240>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4a75      	ldr	r2, [pc, #468]	@ (8001fcc <HAL_RCC_OscConfig+0x240>)
 8001df8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001dfc:	6013      	str	r3, [r2, #0]
 8001dfe:	e01d      	b.n	8001e3c <HAL_RCC_OscConfig+0xb0>
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001e08:	d10c      	bne.n	8001e24 <HAL_RCC_OscConfig+0x98>
 8001e0a:	4b70      	ldr	r3, [pc, #448]	@ (8001fcc <HAL_RCC_OscConfig+0x240>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4a6f      	ldr	r2, [pc, #444]	@ (8001fcc <HAL_RCC_OscConfig+0x240>)
 8001e10:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001e14:	6013      	str	r3, [r2, #0]
 8001e16:	4b6d      	ldr	r3, [pc, #436]	@ (8001fcc <HAL_RCC_OscConfig+0x240>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4a6c      	ldr	r2, [pc, #432]	@ (8001fcc <HAL_RCC_OscConfig+0x240>)
 8001e1c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e20:	6013      	str	r3, [r2, #0]
 8001e22:	e00b      	b.n	8001e3c <HAL_RCC_OscConfig+0xb0>
 8001e24:	4b69      	ldr	r3, [pc, #420]	@ (8001fcc <HAL_RCC_OscConfig+0x240>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a68      	ldr	r2, [pc, #416]	@ (8001fcc <HAL_RCC_OscConfig+0x240>)
 8001e2a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e2e:	6013      	str	r3, [r2, #0]
 8001e30:	4b66      	ldr	r3, [pc, #408]	@ (8001fcc <HAL_RCC_OscConfig+0x240>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a65      	ldr	r2, [pc, #404]	@ (8001fcc <HAL_RCC_OscConfig+0x240>)
 8001e36:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001e3a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d013      	beq.n	8001e6c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e44:	f7ff f97c 	bl	8001140 <HAL_GetTick>
 8001e48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e4a:	e008      	b.n	8001e5e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e4c:	f7ff f978 	bl	8001140 <HAL_GetTick>
 8001e50:	4602      	mov	r2, r0
 8001e52:	693b      	ldr	r3, [r7, #16]
 8001e54:	1ad3      	subs	r3, r2, r3
 8001e56:	2b64      	cmp	r3, #100	@ 0x64
 8001e58:	d901      	bls.n	8001e5e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001e5a:	2303      	movs	r3, #3
 8001e5c:	e207      	b.n	800226e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e5e:	4b5b      	ldr	r3, [pc, #364]	@ (8001fcc <HAL_RCC_OscConfig+0x240>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d0f0      	beq.n	8001e4c <HAL_RCC_OscConfig+0xc0>
 8001e6a:	e014      	b.n	8001e96 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e6c:	f7ff f968 	bl	8001140 <HAL_GetTick>
 8001e70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e72:	e008      	b.n	8001e86 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e74:	f7ff f964 	bl	8001140 <HAL_GetTick>
 8001e78:	4602      	mov	r2, r0
 8001e7a:	693b      	ldr	r3, [r7, #16]
 8001e7c:	1ad3      	subs	r3, r2, r3
 8001e7e:	2b64      	cmp	r3, #100	@ 0x64
 8001e80:	d901      	bls.n	8001e86 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001e82:	2303      	movs	r3, #3
 8001e84:	e1f3      	b.n	800226e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e86:	4b51      	ldr	r3, [pc, #324]	@ (8001fcc <HAL_RCC_OscConfig+0x240>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d1f0      	bne.n	8001e74 <HAL_RCC_OscConfig+0xe8>
 8001e92:	e000      	b.n	8001e96 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f003 0302 	and.w	r3, r3, #2
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d063      	beq.n	8001f6a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001ea2:	4b4a      	ldr	r3, [pc, #296]	@ (8001fcc <HAL_RCC_OscConfig+0x240>)
 8001ea4:	689b      	ldr	r3, [r3, #8]
 8001ea6:	f003 030c 	and.w	r3, r3, #12
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d00b      	beq.n	8001ec6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001eae:	4b47      	ldr	r3, [pc, #284]	@ (8001fcc <HAL_RCC_OscConfig+0x240>)
 8001eb0:	689b      	ldr	r3, [r3, #8]
 8001eb2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001eb6:	2b08      	cmp	r3, #8
 8001eb8:	d11c      	bne.n	8001ef4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001eba:	4b44      	ldr	r3, [pc, #272]	@ (8001fcc <HAL_RCC_OscConfig+0x240>)
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d116      	bne.n	8001ef4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ec6:	4b41      	ldr	r3, [pc, #260]	@ (8001fcc <HAL_RCC_OscConfig+0x240>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f003 0302 	and.w	r3, r3, #2
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d005      	beq.n	8001ede <HAL_RCC_OscConfig+0x152>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	68db      	ldr	r3, [r3, #12]
 8001ed6:	2b01      	cmp	r3, #1
 8001ed8:	d001      	beq.n	8001ede <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001eda:	2301      	movs	r3, #1
 8001edc:	e1c7      	b.n	800226e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ede:	4b3b      	ldr	r3, [pc, #236]	@ (8001fcc <HAL_RCC_OscConfig+0x240>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	691b      	ldr	r3, [r3, #16]
 8001eea:	00db      	lsls	r3, r3, #3
 8001eec:	4937      	ldr	r1, [pc, #220]	@ (8001fcc <HAL_RCC_OscConfig+0x240>)
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ef2:	e03a      	b.n	8001f6a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	68db      	ldr	r3, [r3, #12]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d020      	beq.n	8001f3e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001efc:	4b34      	ldr	r3, [pc, #208]	@ (8001fd0 <HAL_RCC_OscConfig+0x244>)
 8001efe:	2201      	movs	r2, #1
 8001f00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f02:	f7ff f91d 	bl	8001140 <HAL_GetTick>
 8001f06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f08:	e008      	b.n	8001f1c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f0a:	f7ff f919 	bl	8001140 <HAL_GetTick>
 8001f0e:	4602      	mov	r2, r0
 8001f10:	693b      	ldr	r3, [r7, #16]
 8001f12:	1ad3      	subs	r3, r2, r3
 8001f14:	2b02      	cmp	r3, #2
 8001f16:	d901      	bls.n	8001f1c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001f18:	2303      	movs	r3, #3
 8001f1a:	e1a8      	b.n	800226e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f1c:	4b2b      	ldr	r3, [pc, #172]	@ (8001fcc <HAL_RCC_OscConfig+0x240>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f003 0302 	and.w	r3, r3, #2
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d0f0      	beq.n	8001f0a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f28:	4b28      	ldr	r3, [pc, #160]	@ (8001fcc <HAL_RCC_OscConfig+0x240>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	691b      	ldr	r3, [r3, #16]
 8001f34:	00db      	lsls	r3, r3, #3
 8001f36:	4925      	ldr	r1, [pc, #148]	@ (8001fcc <HAL_RCC_OscConfig+0x240>)
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	600b      	str	r3, [r1, #0]
 8001f3c:	e015      	b.n	8001f6a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f3e:	4b24      	ldr	r3, [pc, #144]	@ (8001fd0 <HAL_RCC_OscConfig+0x244>)
 8001f40:	2200      	movs	r2, #0
 8001f42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f44:	f7ff f8fc 	bl	8001140 <HAL_GetTick>
 8001f48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f4a:	e008      	b.n	8001f5e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f4c:	f7ff f8f8 	bl	8001140 <HAL_GetTick>
 8001f50:	4602      	mov	r2, r0
 8001f52:	693b      	ldr	r3, [r7, #16]
 8001f54:	1ad3      	subs	r3, r2, r3
 8001f56:	2b02      	cmp	r3, #2
 8001f58:	d901      	bls.n	8001f5e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001f5a:	2303      	movs	r3, #3
 8001f5c:	e187      	b.n	800226e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f5e:	4b1b      	ldr	r3, [pc, #108]	@ (8001fcc <HAL_RCC_OscConfig+0x240>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f003 0302 	and.w	r3, r3, #2
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d1f0      	bne.n	8001f4c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f003 0308 	and.w	r3, r3, #8
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d036      	beq.n	8001fe4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	695b      	ldr	r3, [r3, #20]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d016      	beq.n	8001fac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f7e:	4b15      	ldr	r3, [pc, #84]	@ (8001fd4 <HAL_RCC_OscConfig+0x248>)
 8001f80:	2201      	movs	r2, #1
 8001f82:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f84:	f7ff f8dc 	bl	8001140 <HAL_GetTick>
 8001f88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f8a:	e008      	b.n	8001f9e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f8c:	f7ff f8d8 	bl	8001140 <HAL_GetTick>
 8001f90:	4602      	mov	r2, r0
 8001f92:	693b      	ldr	r3, [r7, #16]
 8001f94:	1ad3      	subs	r3, r2, r3
 8001f96:	2b02      	cmp	r3, #2
 8001f98:	d901      	bls.n	8001f9e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001f9a:	2303      	movs	r3, #3
 8001f9c:	e167      	b.n	800226e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f9e:	4b0b      	ldr	r3, [pc, #44]	@ (8001fcc <HAL_RCC_OscConfig+0x240>)
 8001fa0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001fa2:	f003 0302 	and.w	r3, r3, #2
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d0f0      	beq.n	8001f8c <HAL_RCC_OscConfig+0x200>
 8001faa:	e01b      	b.n	8001fe4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fac:	4b09      	ldr	r3, [pc, #36]	@ (8001fd4 <HAL_RCC_OscConfig+0x248>)
 8001fae:	2200      	movs	r2, #0
 8001fb0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fb2:	f7ff f8c5 	bl	8001140 <HAL_GetTick>
 8001fb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fb8:	e00e      	b.n	8001fd8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fba:	f7ff f8c1 	bl	8001140 <HAL_GetTick>
 8001fbe:	4602      	mov	r2, r0
 8001fc0:	693b      	ldr	r3, [r7, #16]
 8001fc2:	1ad3      	subs	r3, r2, r3
 8001fc4:	2b02      	cmp	r3, #2
 8001fc6:	d907      	bls.n	8001fd8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001fc8:	2303      	movs	r3, #3
 8001fca:	e150      	b.n	800226e <HAL_RCC_OscConfig+0x4e2>
 8001fcc:	40023800 	.word	0x40023800
 8001fd0:	42470000 	.word	0x42470000
 8001fd4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fd8:	4b88      	ldr	r3, [pc, #544]	@ (80021fc <HAL_RCC_OscConfig+0x470>)
 8001fda:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001fdc:	f003 0302 	and.w	r3, r3, #2
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d1ea      	bne.n	8001fba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f003 0304 	and.w	r3, r3, #4
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	f000 8097 	beq.w	8002120 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ff6:	4b81      	ldr	r3, [pc, #516]	@ (80021fc <HAL_RCC_OscConfig+0x470>)
 8001ff8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ffa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d10f      	bne.n	8002022 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002002:	2300      	movs	r3, #0
 8002004:	60bb      	str	r3, [r7, #8]
 8002006:	4b7d      	ldr	r3, [pc, #500]	@ (80021fc <HAL_RCC_OscConfig+0x470>)
 8002008:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800200a:	4a7c      	ldr	r2, [pc, #496]	@ (80021fc <HAL_RCC_OscConfig+0x470>)
 800200c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002010:	6413      	str	r3, [r2, #64]	@ 0x40
 8002012:	4b7a      	ldr	r3, [pc, #488]	@ (80021fc <HAL_RCC_OscConfig+0x470>)
 8002014:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002016:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800201a:	60bb      	str	r3, [r7, #8]
 800201c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800201e:	2301      	movs	r3, #1
 8002020:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002022:	4b77      	ldr	r3, [pc, #476]	@ (8002200 <HAL_RCC_OscConfig+0x474>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800202a:	2b00      	cmp	r3, #0
 800202c:	d118      	bne.n	8002060 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800202e:	4b74      	ldr	r3, [pc, #464]	@ (8002200 <HAL_RCC_OscConfig+0x474>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4a73      	ldr	r2, [pc, #460]	@ (8002200 <HAL_RCC_OscConfig+0x474>)
 8002034:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002038:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800203a:	f7ff f881 	bl	8001140 <HAL_GetTick>
 800203e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002040:	e008      	b.n	8002054 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002042:	f7ff f87d 	bl	8001140 <HAL_GetTick>
 8002046:	4602      	mov	r2, r0
 8002048:	693b      	ldr	r3, [r7, #16]
 800204a:	1ad3      	subs	r3, r2, r3
 800204c:	2b02      	cmp	r3, #2
 800204e:	d901      	bls.n	8002054 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002050:	2303      	movs	r3, #3
 8002052:	e10c      	b.n	800226e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002054:	4b6a      	ldr	r3, [pc, #424]	@ (8002200 <HAL_RCC_OscConfig+0x474>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800205c:	2b00      	cmp	r3, #0
 800205e:	d0f0      	beq.n	8002042 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	689b      	ldr	r3, [r3, #8]
 8002064:	2b01      	cmp	r3, #1
 8002066:	d106      	bne.n	8002076 <HAL_RCC_OscConfig+0x2ea>
 8002068:	4b64      	ldr	r3, [pc, #400]	@ (80021fc <HAL_RCC_OscConfig+0x470>)
 800206a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800206c:	4a63      	ldr	r2, [pc, #396]	@ (80021fc <HAL_RCC_OscConfig+0x470>)
 800206e:	f043 0301 	orr.w	r3, r3, #1
 8002072:	6713      	str	r3, [r2, #112]	@ 0x70
 8002074:	e01c      	b.n	80020b0 <HAL_RCC_OscConfig+0x324>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	689b      	ldr	r3, [r3, #8]
 800207a:	2b05      	cmp	r3, #5
 800207c:	d10c      	bne.n	8002098 <HAL_RCC_OscConfig+0x30c>
 800207e:	4b5f      	ldr	r3, [pc, #380]	@ (80021fc <HAL_RCC_OscConfig+0x470>)
 8002080:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002082:	4a5e      	ldr	r2, [pc, #376]	@ (80021fc <HAL_RCC_OscConfig+0x470>)
 8002084:	f043 0304 	orr.w	r3, r3, #4
 8002088:	6713      	str	r3, [r2, #112]	@ 0x70
 800208a:	4b5c      	ldr	r3, [pc, #368]	@ (80021fc <HAL_RCC_OscConfig+0x470>)
 800208c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800208e:	4a5b      	ldr	r2, [pc, #364]	@ (80021fc <HAL_RCC_OscConfig+0x470>)
 8002090:	f043 0301 	orr.w	r3, r3, #1
 8002094:	6713      	str	r3, [r2, #112]	@ 0x70
 8002096:	e00b      	b.n	80020b0 <HAL_RCC_OscConfig+0x324>
 8002098:	4b58      	ldr	r3, [pc, #352]	@ (80021fc <HAL_RCC_OscConfig+0x470>)
 800209a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800209c:	4a57      	ldr	r2, [pc, #348]	@ (80021fc <HAL_RCC_OscConfig+0x470>)
 800209e:	f023 0301 	bic.w	r3, r3, #1
 80020a2:	6713      	str	r3, [r2, #112]	@ 0x70
 80020a4:	4b55      	ldr	r3, [pc, #340]	@ (80021fc <HAL_RCC_OscConfig+0x470>)
 80020a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020a8:	4a54      	ldr	r2, [pc, #336]	@ (80021fc <HAL_RCC_OscConfig+0x470>)
 80020aa:	f023 0304 	bic.w	r3, r3, #4
 80020ae:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	689b      	ldr	r3, [r3, #8]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d015      	beq.n	80020e4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020b8:	f7ff f842 	bl	8001140 <HAL_GetTick>
 80020bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020be:	e00a      	b.n	80020d6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020c0:	f7ff f83e 	bl	8001140 <HAL_GetTick>
 80020c4:	4602      	mov	r2, r0
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	1ad3      	subs	r3, r2, r3
 80020ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d901      	bls.n	80020d6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80020d2:	2303      	movs	r3, #3
 80020d4:	e0cb      	b.n	800226e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020d6:	4b49      	ldr	r3, [pc, #292]	@ (80021fc <HAL_RCC_OscConfig+0x470>)
 80020d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020da:	f003 0302 	and.w	r3, r3, #2
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d0ee      	beq.n	80020c0 <HAL_RCC_OscConfig+0x334>
 80020e2:	e014      	b.n	800210e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020e4:	f7ff f82c 	bl	8001140 <HAL_GetTick>
 80020e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020ea:	e00a      	b.n	8002102 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020ec:	f7ff f828 	bl	8001140 <HAL_GetTick>
 80020f0:	4602      	mov	r2, r0
 80020f2:	693b      	ldr	r3, [r7, #16]
 80020f4:	1ad3      	subs	r3, r2, r3
 80020f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d901      	bls.n	8002102 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80020fe:	2303      	movs	r3, #3
 8002100:	e0b5      	b.n	800226e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002102:	4b3e      	ldr	r3, [pc, #248]	@ (80021fc <HAL_RCC_OscConfig+0x470>)
 8002104:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002106:	f003 0302 	and.w	r3, r3, #2
 800210a:	2b00      	cmp	r3, #0
 800210c:	d1ee      	bne.n	80020ec <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800210e:	7dfb      	ldrb	r3, [r7, #23]
 8002110:	2b01      	cmp	r3, #1
 8002112:	d105      	bne.n	8002120 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002114:	4b39      	ldr	r3, [pc, #228]	@ (80021fc <HAL_RCC_OscConfig+0x470>)
 8002116:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002118:	4a38      	ldr	r2, [pc, #224]	@ (80021fc <HAL_RCC_OscConfig+0x470>)
 800211a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800211e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	699b      	ldr	r3, [r3, #24]
 8002124:	2b00      	cmp	r3, #0
 8002126:	f000 80a1 	beq.w	800226c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800212a:	4b34      	ldr	r3, [pc, #208]	@ (80021fc <HAL_RCC_OscConfig+0x470>)
 800212c:	689b      	ldr	r3, [r3, #8]
 800212e:	f003 030c 	and.w	r3, r3, #12
 8002132:	2b08      	cmp	r3, #8
 8002134:	d05c      	beq.n	80021f0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	699b      	ldr	r3, [r3, #24]
 800213a:	2b02      	cmp	r3, #2
 800213c:	d141      	bne.n	80021c2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800213e:	4b31      	ldr	r3, [pc, #196]	@ (8002204 <HAL_RCC_OscConfig+0x478>)
 8002140:	2200      	movs	r2, #0
 8002142:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002144:	f7fe fffc 	bl	8001140 <HAL_GetTick>
 8002148:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800214a:	e008      	b.n	800215e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800214c:	f7fe fff8 	bl	8001140 <HAL_GetTick>
 8002150:	4602      	mov	r2, r0
 8002152:	693b      	ldr	r3, [r7, #16]
 8002154:	1ad3      	subs	r3, r2, r3
 8002156:	2b02      	cmp	r3, #2
 8002158:	d901      	bls.n	800215e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800215a:	2303      	movs	r3, #3
 800215c:	e087      	b.n	800226e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800215e:	4b27      	ldr	r3, [pc, #156]	@ (80021fc <HAL_RCC_OscConfig+0x470>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002166:	2b00      	cmp	r3, #0
 8002168:	d1f0      	bne.n	800214c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	69da      	ldr	r2, [r3, #28]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6a1b      	ldr	r3, [r3, #32]
 8002172:	431a      	orrs	r2, r3
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002178:	019b      	lsls	r3, r3, #6
 800217a:	431a      	orrs	r2, r3
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002180:	085b      	lsrs	r3, r3, #1
 8002182:	3b01      	subs	r3, #1
 8002184:	041b      	lsls	r3, r3, #16
 8002186:	431a      	orrs	r2, r3
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800218c:	061b      	lsls	r3, r3, #24
 800218e:	491b      	ldr	r1, [pc, #108]	@ (80021fc <HAL_RCC_OscConfig+0x470>)
 8002190:	4313      	orrs	r3, r2
 8002192:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002194:	4b1b      	ldr	r3, [pc, #108]	@ (8002204 <HAL_RCC_OscConfig+0x478>)
 8002196:	2201      	movs	r2, #1
 8002198:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800219a:	f7fe ffd1 	bl	8001140 <HAL_GetTick>
 800219e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021a0:	e008      	b.n	80021b4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021a2:	f7fe ffcd 	bl	8001140 <HAL_GetTick>
 80021a6:	4602      	mov	r2, r0
 80021a8:	693b      	ldr	r3, [r7, #16]
 80021aa:	1ad3      	subs	r3, r2, r3
 80021ac:	2b02      	cmp	r3, #2
 80021ae:	d901      	bls.n	80021b4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80021b0:	2303      	movs	r3, #3
 80021b2:	e05c      	b.n	800226e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021b4:	4b11      	ldr	r3, [pc, #68]	@ (80021fc <HAL_RCC_OscConfig+0x470>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d0f0      	beq.n	80021a2 <HAL_RCC_OscConfig+0x416>
 80021c0:	e054      	b.n	800226c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021c2:	4b10      	ldr	r3, [pc, #64]	@ (8002204 <HAL_RCC_OscConfig+0x478>)
 80021c4:	2200      	movs	r2, #0
 80021c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021c8:	f7fe ffba 	bl	8001140 <HAL_GetTick>
 80021cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021ce:	e008      	b.n	80021e2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021d0:	f7fe ffb6 	bl	8001140 <HAL_GetTick>
 80021d4:	4602      	mov	r2, r0
 80021d6:	693b      	ldr	r3, [r7, #16]
 80021d8:	1ad3      	subs	r3, r2, r3
 80021da:	2b02      	cmp	r3, #2
 80021dc:	d901      	bls.n	80021e2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80021de:	2303      	movs	r3, #3
 80021e0:	e045      	b.n	800226e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021e2:	4b06      	ldr	r3, [pc, #24]	@ (80021fc <HAL_RCC_OscConfig+0x470>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d1f0      	bne.n	80021d0 <HAL_RCC_OscConfig+0x444>
 80021ee:	e03d      	b.n	800226c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	699b      	ldr	r3, [r3, #24]
 80021f4:	2b01      	cmp	r3, #1
 80021f6:	d107      	bne.n	8002208 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80021f8:	2301      	movs	r3, #1
 80021fa:	e038      	b.n	800226e <HAL_RCC_OscConfig+0x4e2>
 80021fc:	40023800 	.word	0x40023800
 8002200:	40007000 	.word	0x40007000
 8002204:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002208:	4b1b      	ldr	r3, [pc, #108]	@ (8002278 <HAL_RCC_OscConfig+0x4ec>)
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	699b      	ldr	r3, [r3, #24]
 8002212:	2b01      	cmp	r3, #1
 8002214:	d028      	beq.n	8002268 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002220:	429a      	cmp	r2, r3
 8002222:	d121      	bne.n	8002268 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800222e:	429a      	cmp	r2, r3
 8002230:	d11a      	bne.n	8002268 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002232:	68fa      	ldr	r2, [r7, #12]
 8002234:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002238:	4013      	ands	r3, r2
 800223a:	687a      	ldr	r2, [r7, #4]
 800223c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800223e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002240:	4293      	cmp	r3, r2
 8002242:	d111      	bne.n	8002268 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800224e:	085b      	lsrs	r3, r3, #1
 8002250:	3b01      	subs	r3, #1
 8002252:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002254:	429a      	cmp	r2, r3
 8002256:	d107      	bne.n	8002268 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002262:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002264:	429a      	cmp	r2, r3
 8002266:	d001      	beq.n	800226c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002268:	2301      	movs	r3, #1
 800226a:	e000      	b.n	800226e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800226c:	2300      	movs	r3, #0
}
 800226e:	4618      	mov	r0, r3
 8002270:	3718      	adds	r7, #24
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}
 8002276:	bf00      	nop
 8002278:	40023800 	.word	0x40023800

0800227c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b084      	sub	sp, #16
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
 8002284:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2b00      	cmp	r3, #0
 800228a:	d101      	bne.n	8002290 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800228c:	2301      	movs	r3, #1
 800228e:	e0cc      	b.n	800242a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002290:	4b68      	ldr	r3, [pc, #416]	@ (8002434 <HAL_RCC_ClockConfig+0x1b8>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f003 0307 	and.w	r3, r3, #7
 8002298:	683a      	ldr	r2, [r7, #0]
 800229a:	429a      	cmp	r2, r3
 800229c:	d90c      	bls.n	80022b8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800229e:	4b65      	ldr	r3, [pc, #404]	@ (8002434 <HAL_RCC_ClockConfig+0x1b8>)
 80022a0:	683a      	ldr	r2, [r7, #0]
 80022a2:	b2d2      	uxtb	r2, r2
 80022a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022a6:	4b63      	ldr	r3, [pc, #396]	@ (8002434 <HAL_RCC_ClockConfig+0x1b8>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f003 0307 	and.w	r3, r3, #7
 80022ae:	683a      	ldr	r2, [r7, #0]
 80022b0:	429a      	cmp	r2, r3
 80022b2:	d001      	beq.n	80022b8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80022b4:	2301      	movs	r3, #1
 80022b6:	e0b8      	b.n	800242a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f003 0302 	and.w	r3, r3, #2
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d020      	beq.n	8002306 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f003 0304 	and.w	r3, r3, #4
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d005      	beq.n	80022dc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80022d0:	4b59      	ldr	r3, [pc, #356]	@ (8002438 <HAL_RCC_ClockConfig+0x1bc>)
 80022d2:	689b      	ldr	r3, [r3, #8]
 80022d4:	4a58      	ldr	r2, [pc, #352]	@ (8002438 <HAL_RCC_ClockConfig+0x1bc>)
 80022d6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80022da:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f003 0308 	and.w	r3, r3, #8
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d005      	beq.n	80022f4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80022e8:	4b53      	ldr	r3, [pc, #332]	@ (8002438 <HAL_RCC_ClockConfig+0x1bc>)
 80022ea:	689b      	ldr	r3, [r3, #8]
 80022ec:	4a52      	ldr	r2, [pc, #328]	@ (8002438 <HAL_RCC_ClockConfig+0x1bc>)
 80022ee:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80022f2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022f4:	4b50      	ldr	r3, [pc, #320]	@ (8002438 <HAL_RCC_ClockConfig+0x1bc>)
 80022f6:	689b      	ldr	r3, [r3, #8]
 80022f8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	689b      	ldr	r3, [r3, #8]
 8002300:	494d      	ldr	r1, [pc, #308]	@ (8002438 <HAL_RCC_ClockConfig+0x1bc>)
 8002302:	4313      	orrs	r3, r2
 8002304:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f003 0301 	and.w	r3, r3, #1
 800230e:	2b00      	cmp	r3, #0
 8002310:	d044      	beq.n	800239c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	2b01      	cmp	r3, #1
 8002318:	d107      	bne.n	800232a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800231a:	4b47      	ldr	r3, [pc, #284]	@ (8002438 <HAL_RCC_ClockConfig+0x1bc>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002322:	2b00      	cmp	r3, #0
 8002324:	d119      	bne.n	800235a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002326:	2301      	movs	r3, #1
 8002328:	e07f      	b.n	800242a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	2b02      	cmp	r3, #2
 8002330:	d003      	beq.n	800233a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002336:	2b03      	cmp	r3, #3
 8002338:	d107      	bne.n	800234a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800233a:	4b3f      	ldr	r3, [pc, #252]	@ (8002438 <HAL_RCC_ClockConfig+0x1bc>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002342:	2b00      	cmp	r3, #0
 8002344:	d109      	bne.n	800235a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002346:	2301      	movs	r3, #1
 8002348:	e06f      	b.n	800242a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800234a:	4b3b      	ldr	r3, [pc, #236]	@ (8002438 <HAL_RCC_ClockConfig+0x1bc>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f003 0302 	and.w	r3, r3, #2
 8002352:	2b00      	cmp	r3, #0
 8002354:	d101      	bne.n	800235a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002356:	2301      	movs	r3, #1
 8002358:	e067      	b.n	800242a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800235a:	4b37      	ldr	r3, [pc, #220]	@ (8002438 <HAL_RCC_ClockConfig+0x1bc>)
 800235c:	689b      	ldr	r3, [r3, #8]
 800235e:	f023 0203 	bic.w	r2, r3, #3
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	4934      	ldr	r1, [pc, #208]	@ (8002438 <HAL_RCC_ClockConfig+0x1bc>)
 8002368:	4313      	orrs	r3, r2
 800236a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800236c:	f7fe fee8 	bl	8001140 <HAL_GetTick>
 8002370:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002372:	e00a      	b.n	800238a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002374:	f7fe fee4 	bl	8001140 <HAL_GetTick>
 8002378:	4602      	mov	r2, r0
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	1ad3      	subs	r3, r2, r3
 800237e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002382:	4293      	cmp	r3, r2
 8002384:	d901      	bls.n	800238a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002386:	2303      	movs	r3, #3
 8002388:	e04f      	b.n	800242a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800238a:	4b2b      	ldr	r3, [pc, #172]	@ (8002438 <HAL_RCC_ClockConfig+0x1bc>)
 800238c:	689b      	ldr	r3, [r3, #8]
 800238e:	f003 020c 	and.w	r2, r3, #12
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	009b      	lsls	r3, r3, #2
 8002398:	429a      	cmp	r2, r3
 800239a:	d1eb      	bne.n	8002374 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800239c:	4b25      	ldr	r3, [pc, #148]	@ (8002434 <HAL_RCC_ClockConfig+0x1b8>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f003 0307 	and.w	r3, r3, #7
 80023a4:	683a      	ldr	r2, [r7, #0]
 80023a6:	429a      	cmp	r2, r3
 80023a8:	d20c      	bcs.n	80023c4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023aa:	4b22      	ldr	r3, [pc, #136]	@ (8002434 <HAL_RCC_ClockConfig+0x1b8>)
 80023ac:	683a      	ldr	r2, [r7, #0]
 80023ae:	b2d2      	uxtb	r2, r2
 80023b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023b2:	4b20      	ldr	r3, [pc, #128]	@ (8002434 <HAL_RCC_ClockConfig+0x1b8>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f003 0307 	and.w	r3, r3, #7
 80023ba:	683a      	ldr	r2, [r7, #0]
 80023bc:	429a      	cmp	r2, r3
 80023be:	d001      	beq.n	80023c4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80023c0:	2301      	movs	r3, #1
 80023c2:	e032      	b.n	800242a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f003 0304 	and.w	r3, r3, #4
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d008      	beq.n	80023e2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023d0:	4b19      	ldr	r3, [pc, #100]	@ (8002438 <HAL_RCC_ClockConfig+0x1bc>)
 80023d2:	689b      	ldr	r3, [r3, #8]
 80023d4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	68db      	ldr	r3, [r3, #12]
 80023dc:	4916      	ldr	r1, [pc, #88]	@ (8002438 <HAL_RCC_ClockConfig+0x1bc>)
 80023de:	4313      	orrs	r3, r2
 80023e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f003 0308 	and.w	r3, r3, #8
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d009      	beq.n	8002402 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80023ee:	4b12      	ldr	r3, [pc, #72]	@ (8002438 <HAL_RCC_ClockConfig+0x1bc>)
 80023f0:	689b      	ldr	r3, [r3, #8]
 80023f2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	691b      	ldr	r3, [r3, #16]
 80023fa:	00db      	lsls	r3, r3, #3
 80023fc:	490e      	ldr	r1, [pc, #56]	@ (8002438 <HAL_RCC_ClockConfig+0x1bc>)
 80023fe:	4313      	orrs	r3, r2
 8002400:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002402:	f000 f821 	bl	8002448 <HAL_RCC_GetSysClockFreq>
 8002406:	4602      	mov	r2, r0
 8002408:	4b0b      	ldr	r3, [pc, #44]	@ (8002438 <HAL_RCC_ClockConfig+0x1bc>)
 800240a:	689b      	ldr	r3, [r3, #8]
 800240c:	091b      	lsrs	r3, r3, #4
 800240e:	f003 030f 	and.w	r3, r3, #15
 8002412:	490a      	ldr	r1, [pc, #40]	@ (800243c <HAL_RCC_ClockConfig+0x1c0>)
 8002414:	5ccb      	ldrb	r3, [r1, r3]
 8002416:	fa22 f303 	lsr.w	r3, r2, r3
 800241a:	4a09      	ldr	r2, [pc, #36]	@ (8002440 <HAL_RCC_ClockConfig+0x1c4>)
 800241c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800241e:	4b09      	ldr	r3, [pc, #36]	@ (8002444 <HAL_RCC_ClockConfig+0x1c8>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4618      	mov	r0, r3
 8002424:	f7fe fe48 	bl	80010b8 <HAL_InitTick>

  return HAL_OK;
 8002428:	2300      	movs	r3, #0
}
 800242a:	4618      	mov	r0, r3
 800242c:	3710      	adds	r7, #16
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}
 8002432:	bf00      	nop
 8002434:	40023c00 	.word	0x40023c00
 8002438:	40023800 	.word	0x40023800
 800243c:	08003c30 	.word	0x08003c30
 8002440:	20000000 	.word	0x20000000
 8002444:	20000004 	.word	0x20000004

08002448 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002448:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800244c:	b094      	sub	sp, #80	@ 0x50
 800244e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002450:	2300      	movs	r3, #0
 8002452:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002454:	2300      	movs	r3, #0
 8002456:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002458:	2300      	movs	r3, #0
 800245a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800245c:	2300      	movs	r3, #0
 800245e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002460:	4b79      	ldr	r3, [pc, #484]	@ (8002648 <HAL_RCC_GetSysClockFreq+0x200>)
 8002462:	689b      	ldr	r3, [r3, #8]
 8002464:	f003 030c 	and.w	r3, r3, #12
 8002468:	2b08      	cmp	r3, #8
 800246a:	d00d      	beq.n	8002488 <HAL_RCC_GetSysClockFreq+0x40>
 800246c:	2b08      	cmp	r3, #8
 800246e:	f200 80e1 	bhi.w	8002634 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002472:	2b00      	cmp	r3, #0
 8002474:	d002      	beq.n	800247c <HAL_RCC_GetSysClockFreq+0x34>
 8002476:	2b04      	cmp	r3, #4
 8002478:	d003      	beq.n	8002482 <HAL_RCC_GetSysClockFreq+0x3a>
 800247a:	e0db      	b.n	8002634 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800247c:	4b73      	ldr	r3, [pc, #460]	@ (800264c <HAL_RCC_GetSysClockFreq+0x204>)
 800247e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002480:	e0db      	b.n	800263a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002482:	4b73      	ldr	r3, [pc, #460]	@ (8002650 <HAL_RCC_GetSysClockFreq+0x208>)
 8002484:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002486:	e0d8      	b.n	800263a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002488:	4b6f      	ldr	r3, [pc, #444]	@ (8002648 <HAL_RCC_GetSysClockFreq+0x200>)
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002490:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002492:	4b6d      	ldr	r3, [pc, #436]	@ (8002648 <HAL_RCC_GetSysClockFreq+0x200>)
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800249a:	2b00      	cmp	r3, #0
 800249c:	d063      	beq.n	8002566 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800249e:	4b6a      	ldr	r3, [pc, #424]	@ (8002648 <HAL_RCC_GetSysClockFreq+0x200>)
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	099b      	lsrs	r3, r3, #6
 80024a4:	2200      	movs	r2, #0
 80024a6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80024a8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80024aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80024ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80024b0:	633b      	str	r3, [r7, #48]	@ 0x30
 80024b2:	2300      	movs	r3, #0
 80024b4:	637b      	str	r3, [r7, #52]	@ 0x34
 80024b6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80024ba:	4622      	mov	r2, r4
 80024bc:	462b      	mov	r3, r5
 80024be:	f04f 0000 	mov.w	r0, #0
 80024c2:	f04f 0100 	mov.w	r1, #0
 80024c6:	0159      	lsls	r1, r3, #5
 80024c8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80024cc:	0150      	lsls	r0, r2, #5
 80024ce:	4602      	mov	r2, r0
 80024d0:	460b      	mov	r3, r1
 80024d2:	4621      	mov	r1, r4
 80024d4:	1a51      	subs	r1, r2, r1
 80024d6:	6139      	str	r1, [r7, #16]
 80024d8:	4629      	mov	r1, r5
 80024da:	eb63 0301 	sbc.w	r3, r3, r1
 80024de:	617b      	str	r3, [r7, #20]
 80024e0:	f04f 0200 	mov.w	r2, #0
 80024e4:	f04f 0300 	mov.w	r3, #0
 80024e8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80024ec:	4659      	mov	r1, fp
 80024ee:	018b      	lsls	r3, r1, #6
 80024f0:	4651      	mov	r1, sl
 80024f2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80024f6:	4651      	mov	r1, sl
 80024f8:	018a      	lsls	r2, r1, #6
 80024fa:	4651      	mov	r1, sl
 80024fc:	ebb2 0801 	subs.w	r8, r2, r1
 8002500:	4659      	mov	r1, fp
 8002502:	eb63 0901 	sbc.w	r9, r3, r1
 8002506:	f04f 0200 	mov.w	r2, #0
 800250a:	f04f 0300 	mov.w	r3, #0
 800250e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002512:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002516:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800251a:	4690      	mov	r8, r2
 800251c:	4699      	mov	r9, r3
 800251e:	4623      	mov	r3, r4
 8002520:	eb18 0303 	adds.w	r3, r8, r3
 8002524:	60bb      	str	r3, [r7, #8]
 8002526:	462b      	mov	r3, r5
 8002528:	eb49 0303 	adc.w	r3, r9, r3
 800252c:	60fb      	str	r3, [r7, #12]
 800252e:	f04f 0200 	mov.w	r2, #0
 8002532:	f04f 0300 	mov.w	r3, #0
 8002536:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800253a:	4629      	mov	r1, r5
 800253c:	024b      	lsls	r3, r1, #9
 800253e:	4621      	mov	r1, r4
 8002540:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002544:	4621      	mov	r1, r4
 8002546:	024a      	lsls	r2, r1, #9
 8002548:	4610      	mov	r0, r2
 800254a:	4619      	mov	r1, r3
 800254c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800254e:	2200      	movs	r2, #0
 8002550:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002552:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002554:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002558:	f7fd fe9a 	bl	8000290 <__aeabi_uldivmod>
 800255c:	4602      	mov	r2, r0
 800255e:	460b      	mov	r3, r1
 8002560:	4613      	mov	r3, r2
 8002562:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002564:	e058      	b.n	8002618 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002566:	4b38      	ldr	r3, [pc, #224]	@ (8002648 <HAL_RCC_GetSysClockFreq+0x200>)
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	099b      	lsrs	r3, r3, #6
 800256c:	2200      	movs	r2, #0
 800256e:	4618      	mov	r0, r3
 8002570:	4611      	mov	r1, r2
 8002572:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002576:	623b      	str	r3, [r7, #32]
 8002578:	2300      	movs	r3, #0
 800257a:	627b      	str	r3, [r7, #36]	@ 0x24
 800257c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002580:	4642      	mov	r2, r8
 8002582:	464b      	mov	r3, r9
 8002584:	f04f 0000 	mov.w	r0, #0
 8002588:	f04f 0100 	mov.w	r1, #0
 800258c:	0159      	lsls	r1, r3, #5
 800258e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002592:	0150      	lsls	r0, r2, #5
 8002594:	4602      	mov	r2, r0
 8002596:	460b      	mov	r3, r1
 8002598:	4641      	mov	r1, r8
 800259a:	ebb2 0a01 	subs.w	sl, r2, r1
 800259e:	4649      	mov	r1, r9
 80025a0:	eb63 0b01 	sbc.w	fp, r3, r1
 80025a4:	f04f 0200 	mov.w	r2, #0
 80025a8:	f04f 0300 	mov.w	r3, #0
 80025ac:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80025b0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80025b4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80025b8:	ebb2 040a 	subs.w	r4, r2, sl
 80025bc:	eb63 050b 	sbc.w	r5, r3, fp
 80025c0:	f04f 0200 	mov.w	r2, #0
 80025c4:	f04f 0300 	mov.w	r3, #0
 80025c8:	00eb      	lsls	r3, r5, #3
 80025ca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80025ce:	00e2      	lsls	r2, r4, #3
 80025d0:	4614      	mov	r4, r2
 80025d2:	461d      	mov	r5, r3
 80025d4:	4643      	mov	r3, r8
 80025d6:	18e3      	adds	r3, r4, r3
 80025d8:	603b      	str	r3, [r7, #0]
 80025da:	464b      	mov	r3, r9
 80025dc:	eb45 0303 	adc.w	r3, r5, r3
 80025e0:	607b      	str	r3, [r7, #4]
 80025e2:	f04f 0200 	mov.w	r2, #0
 80025e6:	f04f 0300 	mov.w	r3, #0
 80025ea:	e9d7 4500 	ldrd	r4, r5, [r7]
 80025ee:	4629      	mov	r1, r5
 80025f0:	028b      	lsls	r3, r1, #10
 80025f2:	4621      	mov	r1, r4
 80025f4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80025f8:	4621      	mov	r1, r4
 80025fa:	028a      	lsls	r2, r1, #10
 80025fc:	4610      	mov	r0, r2
 80025fe:	4619      	mov	r1, r3
 8002600:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002602:	2200      	movs	r2, #0
 8002604:	61bb      	str	r3, [r7, #24]
 8002606:	61fa      	str	r2, [r7, #28]
 8002608:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800260c:	f7fd fe40 	bl	8000290 <__aeabi_uldivmod>
 8002610:	4602      	mov	r2, r0
 8002612:	460b      	mov	r3, r1
 8002614:	4613      	mov	r3, r2
 8002616:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002618:	4b0b      	ldr	r3, [pc, #44]	@ (8002648 <HAL_RCC_GetSysClockFreq+0x200>)
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	0c1b      	lsrs	r3, r3, #16
 800261e:	f003 0303 	and.w	r3, r3, #3
 8002622:	3301      	adds	r3, #1
 8002624:	005b      	lsls	r3, r3, #1
 8002626:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002628:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800262a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800262c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002630:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002632:	e002      	b.n	800263a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002634:	4b05      	ldr	r3, [pc, #20]	@ (800264c <HAL_RCC_GetSysClockFreq+0x204>)
 8002636:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002638:	bf00      	nop
    }
  }
  return sysclockfreq;
 800263a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800263c:	4618      	mov	r0, r3
 800263e:	3750      	adds	r7, #80	@ 0x50
 8002640:	46bd      	mov	sp, r7
 8002642:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002646:	bf00      	nop
 8002648:	40023800 	.word	0x40023800
 800264c:	00f42400 	.word	0x00f42400
 8002650:	007a1200 	.word	0x007a1200

08002654 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002654:	b480      	push	{r7}
 8002656:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002658:	4b03      	ldr	r3, [pc, #12]	@ (8002668 <HAL_RCC_GetHCLKFreq+0x14>)
 800265a:	681b      	ldr	r3, [r3, #0]
}
 800265c:	4618      	mov	r0, r3
 800265e:	46bd      	mov	sp, r7
 8002660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002664:	4770      	bx	lr
 8002666:	bf00      	nop
 8002668:	20000000 	.word	0x20000000

0800266c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002670:	f7ff fff0 	bl	8002654 <HAL_RCC_GetHCLKFreq>
 8002674:	4602      	mov	r2, r0
 8002676:	4b05      	ldr	r3, [pc, #20]	@ (800268c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002678:	689b      	ldr	r3, [r3, #8]
 800267a:	0a9b      	lsrs	r3, r3, #10
 800267c:	f003 0307 	and.w	r3, r3, #7
 8002680:	4903      	ldr	r1, [pc, #12]	@ (8002690 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002682:	5ccb      	ldrb	r3, [r1, r3]
 8002684:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002688:	4618      	mov	r0, r3
 800268a:	bd80      	pop	{r7, pc}
 800268c:	40023800 	.word	0x40023800
 8002690:	08003c40 	.word	0x08003c40

08002694 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002698:	f7ff ffdc 	bl	8002654 <HAL_RCC_GetHCLKFreq>
 800269c:	4602      	mov	r2, r0
 800269e:	4b05      	ldr	r3, [pc, #20]	@ (80026b4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80026a0:	689b      	ldr	r3, [r3, #8]
 80026a2:	0b5b      	lsrs	r3, r3, #13
 80026a4:	f003 0307 	and.w	r3, r3, #7
 80026a8:	4903      	ldr	r1, [pc, #12]	@ (80026b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80026aa:	5ccb      	ldrb	r3, [r1, r3]
 80026ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	bd80      	pop	{r7, pc}
 80026b4:	40023800 	.word	0x40023800
 80026b8:	08003c40 	.word	0x08003c40

080026bc <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b082      	sub	sp, #8
 80026c0:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80026c2:	f7fe fd3d 	bl	8001140 <HAL_GetTick>
 80026c6:	6078      	str	r0, [r7, #4]

  /* Set HSION bit to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80026c8:	4b5d      	ldr	r3, [pc, #372]	@ (8002840 <HAL_RCC_DeInit+0x184>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a5c      	ldr	r2, [pc, #368]	@ (8002840 <HAL_RCC_DeInit+0x184>)
 80026ce:	f043 0301 	orr.w	r3, r3, #1
 80026d2:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 80026d4:	e008      	b.n	80026e8 <HAL_RCC_DeInit+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026d6:	f7fe fd33 	bl	8001140 <HAL_GetTick>
 80026da:	4602      	mov	r2, r0
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	1ad3      	subs	r3, r2, r3
 80026e0:	2b02      	cmp	r3, #2
 80026e2:	d901      	bls.n	80026e8 <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
 80026e4:	2303      	movs	r3, #3
 80026e6:	e0a7      	b.n	8002838 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 80026e8:	4b55      	ldr	r3, [pc, #340]	@ (8002840 <HAL_RCC_DeInit+0x184>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f003 0302 	and.w	r3, r3, #2
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d0f0      	beq.n	80026d6 <HAL_RCC_DeInit+0x1a>
    }
  }

  /* Set HSITRIM[4:0] bits to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSITRIM_4);
 80026f4:	4b52      	ldr	r3, [pc, #328]	@ (8002840 <HAL_RCC_DeInit+0x184>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a51      	ldr	r2, [pc, #324]	@ (8002840 <HAL_RCC_DeInit+0x184>)
 80026fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80026fe:	6013      	str	r3, [r2, #0]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8002700:	f7fe fd1e 	bl	8001140 <HAL_GetTick>
 8002704:	6078      	str	r0, [r7, #4]

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 8002706:	4b4e      	ldr	r3, [pc, #312]	@ (8002840 <HAL_RCC_DeInit+0x184>)
 8002708:	2200      	movs	r2, #0
 800270a:	609a      	str	r2, [r3, #8]

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 800270c:	e00a      	b.n	8002724 <HAL_RCC_DeInit+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800270e:	f7fe fd17 	bl	8001140 <HAL_GetTick>
 8002712:	4602      	mov	r2, r0
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	1ad3      	subs	r3, r2, r3
 8002718:	f241 3288 	movw	r2, #5000	@ 0x1388
 800271c:	4293      	cmp	r3, r2
 800271e:	d901      	bls.n	8002724 <HAL_RCC_DeInit+0x68>
    {
      return HAL_TIMEOUT;
 8002720:	2303      	movs	r3, #3
 8002722:	e089      	b.n	8002838 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8002724:	4b46      	ldr	r3, [pc, #280]	@ (8002840 <HAL_RCC_DeInit+0x184>)
 8002726:	689b      	ldr	r3, [r3, #8]
 8002728:	f003 030c 	and.w	r3, r3, #12
 800272c:	2b00      	cmp	r3, #0
 800272e:	d1ee      	bne.n	800270e <HAL_RCC_DeInit+0x52>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8002730:	f7fe fd06 	bl	8001140 <HAL_GetTick>
 8002734:	6078      	str	r0, [r7, #4]

  /* Clear HSEON, HSEBYP and CSSON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSEBYP | RCC_CR_CSSON);
 8002736:	4b42      	ldr	r3, [pc, #264]	@ (8002840 <HAL_RCC_DeInit+0x184>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4a41      	ldr	r2, [pc, #260]	@ (8002840 <HAL_RCC_DeInit+0x184>)
 800273c:	f423 2350 	bic.w	r3, r3, #851968	@ 0xd0000
 8002740:	6013      	str	r3, [r2, #0]

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8002742:	e008      	b.n	8002756 <HAL_RCC_DeInit+0x9a>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002744:	f7fe fcfc 	bl	8001140 <HAL_GetTick>
 8002748:	4602      	mov	r2, r0
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	1ad3      	subs	r3, r2, r3
 800274e:	2b64      	cmp	r3, #100	@ 0x64
 8002750:	d901      	bls.n	8002756 <HAL_RCC_DeInit+0x9a>
    {
      return HAL_TIMEOUT;
 8002752:	2303      	movs	r3, #3
 8002754:	e070      	b.n	8002838 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8002756:	4b3a      	ldr	r3, [pc, #232]	@ (8002840 <HAL_RCC_DeInit+0x184>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800275e:	2b00      	cmp	r3, #0
 8002760:	d1f0      	bne.n	8002744 <HAL_RCC_DeInit+0x88>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8002762:	f7fe fced 	bl	8001140 <HAL_GetTick>
 8002766:	6078      	str	r0, [r7, #4]

  /* Clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8002768:	4b35      	ldr	r3, [pc, #212]	@ (8002840 <HAL_RCC_DeInit+0x184>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a34      	ldr	r2, [pc, #208]	@ (8002840 <HAL_RCC_DeInit+0x184>)
 800276e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002772:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8002774:	e008      	b.n	8002788 <HAL_RCC_DeInit+0xcc>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002776:	f7fe fce3 	bl	8001140 <HAL_GetTick>
 800277a:	4602      	mov	r2, r0
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	1ad3      	subs	r3, r2, r3
 8002780:	2b02      	cmp	r3, #2
 8002782:	d901      	bls.n	8002788 <HAL_RCC_DeInit+0xcc>
    {
      return HAL_TIMEOUT;
 8002784:	2303      	movs	r3, #3
 8002786:	e057      	b.n	8002838 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8002788:	4b2d      	ldr	r3, [pc, #180]	@ (8002840 <HAL_RCC_DeInit+0x184>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002790:	2b00      	cmp	r3, #0
 8002792:	d1f0      	bne.n	8002776 <HAL_RCC_DeInit+0xba>
    }
  }

#if defined(RCC_PLLI2S_SUPPORT)
  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8002794:	f7fe fcd4 	bl	8001140 <HAL_GetTick>
 8002798:	6078      	str	r0, [r7, #4]

  /* Reset PLLI2SON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLI2SON);
 800279a:	4b29      	ldr	r3, [pc, #164]	@ (8002840 <HAL_RCC_DeInit+0x184>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4a28      	ldr	r2, [pc, #160]	@ (8002840 <HAL_RCC_DeInit+0x184>)
 80027a0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80027a4:	6013      	str	r3, [r2, #0]

  /* Wait till PLLI2S is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 80027a6:	e008      	b.n	80027ba <HAL_RCC_DeInit+0xfe>
  {
    if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80027a8:	f7fe fcca 	bl	8001140 <HAL_GetTick>
 80027ac:	4602      	mov	r2, r0
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	1ad3      	subs	r3, r2, r3
 80027b2:	2b02      	cmp	r3, #2
 80027b4:	d901      	bls.n	80027ba <HAL_RCC_DeInit+0xfe>
    {
      return HAL_TIMEOUT;
 80027b6:	2303      	movs	r3, #3
 80027b8:	e03e      	b.n	8002838 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 80027ba:	4b21      	ldr	r3, [pc, #132]	@ (8002840 <HAL_RCC_DeInit+0x184>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d1f0      	bne.n	80027a8 <HAL_RCC_DeInit+0xec>
    defined(STM32F423xx) || defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLR_1;
#elif defined(STM32F410Tx) || defined(STM32F410Cx) || defined(STM32F410Rx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLR_0 | RCC_PLLCFGR_PLLR_1 | RCC_PLLCFGR_PLLR_2 | RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_0 | RCC_PLLCFGR_PLLQ_1 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLQ_3;
#else
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2;
 80027c6:	4b1e      	ldr	r3, [pc, #120]	@ (8002840 <HAL_RCC_DeInit+0x184>)
 80027c8:	4a1e      	ldr	r2, [pc, #120]	@ (8002844 <HAL_RCC_DeInit+0x188>)
 80027ca:	605a      	str	r2, [r3, #4]
  /* Reset PLLI2SCFGR register to default value */
#if defined(STM32F412Cx) || defined(STM32F412Rx) || defined(STM32F412Vx) || defined(STM32F412Zx) || defined(STM32F413xx) || \
    defined(STM32F423xx) || defined(STM32F446xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SM_4 | RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SQ_2 | RCC_PLLI2SCFGR_PLLI2SR_1;
#elif defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SR_1;
 80027cc:	4b1c      	ldr	r3, [pc, #112]	@ (8002840 <HAL_RCC_DeInit+0x184>)
 80027ce:	4a1e      	ldr	r2, [pc, #120]	@ (8002848 <HAL_RCC_DeInit+0x18c>)
 80027d0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#elif defined(STM32F446xx)
  RCC->PLLSAICFGR = RCC_PLLSAICFGR_PLLSAIM_4 | RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7 | RCC_PLLSAICFGR_PLLSAIQ_2;
#endif /* STM32F427xx || STM32F429xx || STM32F437xx || STM32F439xx || STM32F469xx || STM32F479xx */

  /* Disable all interrupts */
  CLEAR_BIT(RCC->CIR, RCC_CIR_LSIRDYIE | RCC_CIR_LSERDYIE | RCC_CIR_HSIRDYIE | RCC_CIR_HSERDYIE | RCC_CIR_PLLRDYIE);
 80027d4:	4b1a      	ldr	r3, [pc, #104]	@ (8002840 <HAL_RCC_DeInit+0x184>)
 80027d6:	68db      	ldr	r3, [r3, #12]
 80027d8:	4a19      	ldr	r2, [pc, #100]	@ (8002840 <HAL_RCC_DeInit+0x184>)
 80027da:	f423 53f8 	bic.w	r3, r3, #7936	@ 0x1f00
 80027de:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYIE);
 80027e0:	4b17      	ldr	r3, [pc, #92]	@ (8002840 <HAL_RCC_DeInit+0x184>)
 80027e2:	68db      	ldr	r3, [r3, #12]
 80027e4:	4a16      	ldr	r2, [pc, #88]	@ (8002840 <HAL_RCC_DeInit+0x184>)
 80027e6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80027ea:	60d3      	str	r3, [r2, #12]
#if defined(RCC_CIR_PLLSAIRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYIE);
#endif /* RCC_CIR_PLLSAIRDYIE */

  /* Clear all interrupt flags */
  SET_BIT(RCC->CIR, RCC_CIR_LSIRDYC | RCC_CIR_LSERDYC | RCC_CIR_HSIRDYC | RCC_CIR_HSERDYC | RCC_CIR_PLLRDYC |
 80027ec:	4b14      	ldr	r3, [pc, #80]	@ (8002840 <HAL_RCC_DeInit+0x184>)
 80027ee:	68db      	ldr	r3, [r3, #12]
 80027f0:	4a13      	ldr	r2, [pc, #76]	@ (8002840 <HAL_RCC_DeInit+0x184>)
 80027f2:	f443 031f 	orr.w	r3, r3, #10420224	@ 0x9f0000
 80027f6:	60d3      	str	r3, [r2, #12]
          RCC_CIR_CSSC);

#if defined(RCC_CIR_PLLI2SRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYC);
 80027f8:	4b11      	ldr	r3, [pc, #68]	@ (8002840 <HAL_RCC_DeInit+0x184>)
 80027fa:	68db      	ldr	r3, [r3, #12]
 80027fc:	4a10      	ldr	r2, [pc, #64]	@ (8002840 <HAL_RCC_DeInit+0x184>)
 80027fe:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002802:	60d3      	str	r3, [r2, #12]
#if defined(RCC_CIR_PLLSAIRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYC);
#endif /* RCC_CIR_PLLSAIRDYC */

  /* Clear LSION bit */
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8002804:	4b0e      	ldr	r3, [pc, #56]	@ (8002840 <HAL_RCC_DeInit+0x184>)
 8002806:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002808:	4a0d      	ldr	r2, [pc, #52]	@ (8002840 <HAL_RCC_DeInit+0x184>)
 800280a:	f023 0301 	bic.w	r3, r3, #1
 800280e:	6753      	str	r3, [r2, #116]	@ 0x74

  /* Reset all CSR flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 8002810:	4b0b      	ldr	r3, [pc, #44]	@ (8002840 <HAL_RCC_DeInit+0x184>)
 8002812:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002814:	4a0a      	ldr	r2, [pc, #40]	@ (8002840 <HAL_RCC_DeInit+0x184>)
 8002816:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800281a:	6753      	str	r3, [r2, #116]	@ 0x74

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 800281c:	4b0b      	ldr	r3, [pc, #44]	@ (800284c <HAL_RCC_DeInit+0x190>)
 800281e:	4a0c      	ldr	r2, [pc, #48]	@ (8002850 <HAL_RCC_DeInit+0x194>)
 8002820:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002822:	4b0c      	ldr	r3, [pc, #48]	@ (8002854 <HAL_RCC_DeInit+0x198>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4618      	mov	r0, r3
 8002828:	f7fe fc46 	bl	80010b8 <HAL_InitTick>
 800282c:	4603      	mov	r3, r0
 800282e:	2b00      	cmp	r3, #0
 8002830:	d001      	beq.n	8002836 <HAL_RCC_DeInit+0x17a>
  {
    return HAL_ERROR;
 8002832:	2301      	movs	r3, #1
 8002834:	e000      	b.n	8002838 <HAL_RCC_DeInit+0x17c>
  }
  else
  {
    return HAL_OK;
 8002836:	2300      	movs	r3, #0
  }
}
 8002838:	4618      	mov	r0, r3
 800283a:	3708      	adds	r7, #8
 800283c:	46bd      	mov	sp, r7
 800283e:	bd80      	pop	{r7, pc}
 8002840:	40023800 	.word	0x40023800
 8002844:	04003010 	.word	0x04003010
 8002848:	20003000 	.word	0x20003000
 800284c:	20000000 	.word	0x20000000
 8002850:	00f42400 	.word	0x00f42400
 8002854:	20000004 	.word	0x20000004

08002858 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b082      	sub	sp, #8
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d101      	bne.n	800286a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002866:	2301      	movs	r3, #1
 8002868:	e042      	b.n	80028f0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002870:	b2db      	uxtb	r3, r3
 8002872:	2b00      	cmp	r3, #0
 8002874:	d106      	bne.n	8002884 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2200      	movs	r2, #0
 800287a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800287e:	6878      	ldr	r0, [r7, #4]
 8002880:	f7fe faa4 	bl	8000dcc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2224      	movs	r2, #36	@ 0x24
 8002888:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	68da      	ldr	r2, [r3, #12]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800289a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800289c:	6878      	ldr	r0, [r7, #4]
 800289e:	f000 fa09 	bl	8002cb4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	691a      	ldr	r2, [r3, #16]
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80028b0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	695a      	ldr	r2, [r3, #20]
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80028c0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	68da      	ldr	r2, [r3, #12]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80028d0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2200      	movs	r2, #0
 80028d6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2220      	movs	r2, #32
 80028dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2220      	movs	r2, #32
 80028e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2200      	movs	r2, #0
 80028ec:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80028ee:	2300      	movs	r3, #0
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	3708      	adds	r7, #8
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}

080028f8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b08a      	sub	sp, #40	@ 0x28
 80028fc:	af02      	add	r7, sp, #8
 80028fe:	60f8      	str	r0, [r7, #12]
 8002900:	60b9      	str	r1, [r7, #8]
 8002902:	603b      	str	r3, [r7, #0]
 8002904:	4613      	mov	r3, r2
 8002906:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002908:	2300      	movs	r3, #0
 800290a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002912:	b2db      	uxtb	r3, r3
 8002914:	2b20      	cmp	r3, #32
 8002916:	d175      	bne.n	8002a04 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002918:	68bb      	ldr	r3, [r7, #8]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d002      	beq.n	8002924 <HAL_UART_Transmit+0x2c>
 800291e:	88fb      	ldrh	r3, [r7, #6]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d101      	bne.n	8002928 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002924:	2301      	movs	r3, #1
 8002926:	e06e      	b.n	8002a06 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	2200      	movs	r2, #0
 800292c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	2221      	movs	r2, #33	@ 0x21
 8002932:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002936:	f7fe fc03 	bl	8001140 <HAL_GetTick>
 800293a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	88fa      	ldrh	r2, [r7, #6]
 8002940:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	88fa      	ldrh	r2, [r7, #6]
 8002946:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	689b      	ldr	r3, [r3, #8]
 800294c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002950:	d108      	bne.n	8002964 <HAL_UART_Transmit+0x6c>
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	691b      	ldr	r3, [r3, #16]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d104      	bne.n	8002964 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800295a:	2300      	movs	r3, #0
 800295c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800295e:	68bb      	ldr	r3, [r7, #8]
 8002960:	61bb      	str	r3, [r7, #24]
 8002962:	e003      	b.n	800296c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002964:	68bb      	ldr	r3, [r7, #8]
 8002966:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002968:	2300      	movs	r3, #0
 800296a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800296c:	e02e      	b.n	80029cc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	9300      	str	r3, [sp, #0]
 8002972:	697b      	ldr	r3, [r7, #20]
 8002974:	2200      	movs	r2, #0
 8002976:	2180      	movs	r1, #128	@ 0x80
 8002978:	68f8      	ldr	r0, [r7, #12]
 800297a:	f000 f8df 	bl	8002b3c <UART_WaitOnFlagUntilTimeout>
 800297e:	4603      	mov	r3, r0
 8002980:	2b00      	cmp	r3, #0
 8002982:	d005      	beq.n	8002990 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	2220      	movs	r2, #32
 8002988:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800298c:	2303      	movs	r3, #3
 800298e:	e03a      	b.n	8002a06 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002990:	69fb      	ldr	r3, [r7, #28]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d10b      	bne.n	80029ae <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002996:	69bb      	ldr	r3, [r7, #24]
 8002998:	881b      	ldrh	r3, [r3, #0]
 800299a:	461a      	mov	r2, r3
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80029a4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80029a6:	69bb      	ldr	r3, [r7, #24]
 80029a8:	3302      	adds	r3, #2
 80029aa:	61bb      	str	r3, [r7, #24]
 80029ac:	e007      	b.n	80029be <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80029ae:	69fb      	ldr	r3, [r7, #28]
 80029b0:	781a      	ldrb	r2, [r3, #0]
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80029b8:	69fb      	ldr	r3, [r7, #28]
 80029ba:	3301      	adds	r3, #1
 80029bc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80029c2:	b29b      	uxth	r3, r3
 80029c4:	3b01      	subs	r3, #1
 80029c6:	b29a      	uxth	r2, r3
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80029d0:	b29b      	uxth	r3, r3
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d1cb      	bne.n	800296e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	9300      	str	r3, [sp, #0]
 80029da:	697b      	ldr	r3, [r7, #20]
 80029dc:	2200      	movs	r2, #0
 80029de:	2140      	movs	r1, #64	@ 0x40
 80029e0:	68f8      	ldr	r0, [r7, #12]
 80029e2:	f000 f8ab 	bl	8002b3c <UART_WaitOnFlagUntilTimeout>
 80029e6:	4603      	mov	r3, r0
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d005      	beq.n	80029f8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	2220      	movs	r2, #32
 80029f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80029f4:	2303      	movs	r3, #3
 80029f6:	e006      	b.n	8002a06 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	2220      	movs	r2, #32
 80029fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002a00:	2300      	movs	r3, #0
 8002a02:	e000      	b.n	8002a06 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002a04:	2302      	movs	r3, #2
  }
}
 8002a06:	4618      	mov	r0, r3
 8002a08:	3720      	adds	r7, #32
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}

08002a0e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a0e:	b580      	push	{r7, lr}
 8002a10:	b08a      	sub	sp, #40	@ 0x28
 8002a12:	af02      	add	r7, sp, #8
 8002a14:	60f8      	str	r0, [r7, #12]
 8002a16:	60b9      	str	r1, [r7, #8]
 8002a18:	603b      	str	r3, [r7, #0]
 8002a1a:	4613      	mov	r3, r2
 8002a1c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002a28:	b2db      	uxtb	r3, r3
 8002a2a:	2b20      	cmp	r3, #32
 8002a2c:	f040 8081 	bne.w	8002b32 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a30:	68bb      	ldr	r3, [r7, #8]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d002      	beq.n	8002a3c <HAL_UART_Receive+0x2e>
 8002a36:	88fb      	ldrh	r3, [r7, #6]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d101      	bne.n	8002a40 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	e079      	b.n	8002b34 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	2200      	movs	r2, #0
 8002a44:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	2222      	movs	r2, #34	@ 0x22
 8002a4a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	2200      	movs	r2, #0
 8002a52:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002a54:	f7fe fb74 	bl	8001140 <HAL_GetTick>
 8002a58:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	88fa      	ldrh	r2, [r7, #6]
 8002a5e:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	88fa      	ldrh	r2, [r7, #6]
 8002a64:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	689b      	ldr	r3, [r3, #8]
 8002a6a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002a6e:	d108      	bne.n	8002a82 <HAL_UART_Receive+0x74>
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	691b      	ldr	r3, [r3, #16]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d104      	bne.n	8002a82 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8002a78:	2300      	movs	r3, #0
 8002a7a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	61bb      	str	r3, [r7, #24]
 8002a80:	e003      	b.n	8002a8a <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8002a82:	68bb      	ldr	r3, [r7, #8]
 8002a84:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002a86:	2300      	movs	r3, #0
 8002a88:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002a8a:	e047      	b.n	8002b1c <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	9300      	str	r3, [sp, #0]
 8002a90:	697b      	ldr	r3, [r7, #20]
 8002a92:	2200      	movs	r2, #0
 8002a94:	2120      	movs	r1, #32
 8002a96:	68f8      	ldr	r0, [r7, #12]
 8002a98:	f000 f850 	bl	8002b3c <UART_WaitOnFlagUntilTimeout>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d005      	beq.n	8002aae <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	2220      	movs	r2, #32
 8002aa6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8002aaa:	2303      	movs	r3, #3
 8002aac:	e042      	b.n	8002b34 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8002aae:	69fb      	ldr	r3, [r7, #28]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d10c      	bne.n	8002ace <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	b29b      	uxth	r3, r3
 8002abc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ac0:	b29a      	uxth	r2, r3
 8002ac2:	69bb      	ldr	r3, [r7, #24]
 8002ac4:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002ac6:	69bb      	ldr	r3, [r7, #24]
 8002ac8:	3302      	adds	r3, #2
 8002aca:	61bb      	str	r3, [r7, #24]
 8002acc:	e01f      	b.n	8002b0e <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	689b      	ldr	r3, [r3, #8]
 8002ad2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002ad6:	d007      	beq.n	8002ae8 <HAL_UART_Receive+0xda>
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	689b      	ldr	r3, [r3, #8]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d10a      	bne.n	8002af6 <HAL_UART_Receive+0xe8>
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	691b      	ldr	r3, [r3, #16]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d106      	bne.n	8002af6 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	b2da      	uxtb	r2, r3
 8002af0:	69fb      	ldr	r3, [r7, #28]
 8002af2:	701a      	strb	r2, [r3, #0]
 8002af4:	e008      	b.n	8002b08 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	b2db      	uxtb	r3, r3
 8002afe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002b02:	b2da      	uxtb	r2, r3
 8002b04:	69fb      	ldr	r3, [r7, #28]
 8002b06:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8002b08:	69fb      	ldr	r3, [r7, #28]
 8002b0a:	3301      	adds	r3, #1
 8002b0c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002b12:	b29b      	uxth	r3, r3
 8002b14:	3b01      	subs	r3, #1
 8002b16:	b29a      	uxth	r2, r3
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002b20:	b29b      	uxth	r3, r3
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d1b2      	bne.n	8002a8c <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	2220      	movs	r2, #32
 8002b2a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	e000      	b.n	8002b34 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8002b32:	2302      	movs	r3, #2
  }
}
 8002b34:	4618      	mov	r0, r3
 8002b36:	3720      	adds	r7, #32
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bd80      	pop	{r7, pc}

08002b3c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b086      	sub	sp, #24
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	60f8      	str	r0, [r7, #12]
 8002b44:	60b9      	str	r1, [r7, #8]
 8002b46:	603b      	str	r3, [r7, #0]
 8002b48:	4613      	mov	r3, r2
 8002b4a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b4c:	e03b      	b.n	8002bc6 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b4e:	6a3b      	ldr	r3, [r7, #32]
 8002b50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b54:	d037      	beq.n	8002bc6 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b56:	f7fe faf3 	bl	8001140 <HAL_GetTick>
 8002b5a:	4602      	mov	r2, r0
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	1ad3      	subs	r3, r2, r3
 8002b60:	6a3a      	ldr	r2, [r7, #32]
 8002b62:	429a      	cmp	r2, r3
 8002b64:	d302      	bcc.n	8002b6c <UART_WaitOnFlagUntilTimeout+0x30>
 8002b66:	6a3b      	ldr	r3, [r7, #32]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d101      	bne.n	8002b70 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002b6c:	2303      	movs	r3, #3
 8002b6e:	e03a      	b.n	8002be6 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	68db      	ldr	r3, [r3, #12]
 8002b76:	f003 0304 	and.w	r3, r3, #4
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d023      	beq.n	8002bc6 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002b7e:	68bb      	ldr	r3, [r7, #8]
 8002b80:	2b80      	cmp	r3, #128	@ 0x80
 8002b82:	d020      	beq.n	8002bc6 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002b84:	68bb      	ldr	r3, [r7, #8]
 8002b86:	2b40      	cmp	r3, #64	@ 0x40
 8002b88:	d01d      	beq.n	8002bc6 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f003 0308 	and.w	r3, r3, #8
 8002b94:	2b08      	cmp	r3, #8
 8002b96:	d116      	bne.n	8002bc6 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002b98:	2300      	movs	r3, #0
 8002b9a:	617b      	str	r3, [r7, #20]
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	617b      	str	r3, [r7, #20]
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	617b      	str	r3, [r7, #20]
 8002bac:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002bae:	68f8      	ldr	r0, [r7, #12]
 8002bb0:	f000 f81d 	bl	8002bee <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	2208      	movs	r2, #8
 8002bb8:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	e00f      	b.n	8002be6 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	681a      	ldr	r2, [r3, #0]
 8002bcc:	68bb      	ldr	r3, [r7, #8]
 8002bce:	4013      	ands	r3, r2
 8002bd0:	68ba      	ldr	r2, [r7, #8]
 8002bd2:	429a      	cmp	r2, r3
 8002bd4:	bf0c      	ite	eq
 8002bd6:	2301      	moveq	r3, #1
 8002bd8:	2300      	movne	r3, #0
 8002bda:	b2db      	uxtb	r3, r3
 8002bdc:	461a      	mov	r2, r3
 8002bde:	79fb      	ldrb	r3, [r7, #7]
 8002be0:	429a      	cmp	r2, r3
 8002be2:	d0b4      	beq.n	8002b4e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002be4:	2300      	movs	r3, #0
}
 8002be6:	4618      	mov	r0, r3
 8002be8:	3718      	adds	r7, #24
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd80      	pop	{r7, pc}

08002bee <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002bee:	b480      	push	{r7}
 8002bf0:	b095      	sub	sp, #84	@ 0x54
 8002bf2:	af00      	add	r7, sp, #0
 8002bf4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	330c      	adds	r3, #12
 8002bfc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bfe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c00:	e853 3f00 	ldrex	r3, [r3]
 8002c04:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002c06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c08:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002c0c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	330c      	adds	r3, #12
 8002c14:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002c16:	643a      	str	r2, [r7, #64]	@ 0x40
 8002c18:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c1a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002c1c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002c1e:	e841 2300 	strex	r3, r2, [r1]
 8002c22:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002c24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d1e5      	bne.n	8002bf6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	3314      	adds	r3, #20
 8002c30:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c32:	6a3b      	ldr	r3, [r7, #32]
 8002c34:	e853 3f00 	ldrex	r3, [r3]
 8002c38:	61fb      	str	r3, [r7, #28]
   return(result);
 8002c3a:	69fb      	ldr	r3, [r7, #28]
 8002c3c:	f023 0301 	bic.w	r3, r3, #1
 8002c40:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	3314      	adds	r3, #20
 8002c48:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002c4a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002c4c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c4e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002c50:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002c52:	e841 2300 	strex	r3, r2, [r1]
 8002c56:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002c58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d1e5      	bne.n	8002c2a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c62:	2b01      	cmp	r3, #1
 8002c64:	d119      	bne.n	8002c9a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	330c      	adds	r3, #12
 8002c6c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	e853 3f00 	ldrex	r3, [r3]
 8002c74:	60bb      	str	r3, [r7, #8]
   return(result);
 8002c76:	68bb      	ldr	r3, [r7, #8]
 8002c78:	f023 0310 	bic.w	r3, r3, #16
 8002c7c:	647b      	str	r3, [r7, #68]	@ 0x44
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	330c      	adds	r3, #12
 8002c84:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002c86:	61ba      	str	r2, [r7, #24]
 8002c88:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c8a:	6979      	ldr	r1, [r7, #20]
 8002c8c:	69ba      	ldr	r2, [r7, #24]
 8002c8e:	e841 2300 	strex	r3, r2, [r1]
 8002c92:	613b      	str	r3, [r7, #16]
   return(result);
 8002c94:	693b      	ldr	r3, [r7, #16]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d1e5      	bne.n	8002c66 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2220      	movs	r2, #32
 8002c9e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002ca8:	bf00      	nop
 8002caa:	3754      	adds	r7, #84	@ 0x54
 8002cac:	46bd      	mov	sp, r7
 8002cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb2:	4770      	bx	lr

08002cb4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002cb4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002cb8:	b0c0      	sub	sp, #256	@ 0x100
 8002cba:	af00      	add	r7, sp, #0
 8002cbc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002cc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	691b      	ldr	r3, [r3, #16]
 8002cc8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002ccc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cd0:	68d9      	ldr	r1, [r3, #12]
 8002cd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cd6:	681a      	ldr	r2, [r3, #0]
 8002cd8:	ea40 0301 	orr.w	r3, r0, r1
 8002cdc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002cde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ce2:	689a      	ldr	r2, [r3, #8]
 8002ce4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ce8:	691b      	ldr	r3, [r3, #16]
 8002cea:	431a      	orrs	r2, r3
 8002cec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cf0:	695b      	ldr	r3, [r3, #20]
 8002cf2:	431a      	orrs	r2, r3
 8002cf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cf8:	69db      	ldr	r3, [r3, #28]
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002d00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	68db      	ldr	r3, [r3, #12]
 8002d08:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002d0c:	f021 010c 	bic.w	r1, r1, #12
 8002d10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d14:	681a      	ldr	r2, [r3, #0]
 8002d16:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002d1a:	430b      	orrs	r3, r1
 8002d1c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002d1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	695b      	ldr	r3, [r3, #20]
 8002d26:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002d2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d2e:	6999      	ldr	r1, [r3, #24]
 8002d30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d34:	681a      	ldr	r2, [r3, #0]
 8002d36:	ea40 0301 	orr.w	r3, r0, r1
 8002d3a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002d3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d40:	681a      	ldr	r2, [r3, #0]
 8002d42:	4b8f      	ldr	r3, [pc, #572]	@ (8002f80 <UART_SetConfig+0x2cc>)
 8002d44:	429a      	cmp	r2, r3
 8002d46:	d005      	beq.n	8002d54 <UART_SetConfig+0xa0>
 8002d48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d4c:	681a      	ldr	r2, [r3, #0]
 8002d4e:	4b8d      	ldr	r3, [pc, #564]	@ (8002f84 <UART_SetConfig+0x2d0>)
 8002d50:	429a      	cmp	r2, r3
 8002d52:	d104      	bne.n	8002d5e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002d54:	f7ff fc9e 	bl	8002694 <HAL_RCC_GetPCLK2Freq>
 8002d58:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002d5c:	e003      	b.n	8002d66 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002d5e:	f7ff fc85 	bl	800266c <HAL_RCC_GetPCLK1Freq>
 8002d62:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002d66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d6a:	69db      	ldr	r3, [r3, #28]
 8002d6c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002d70:	f040 810c 	bne.w	8002f8c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002d74:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002d78:	2200      	movs	r2, #0
 8002d7a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002d7e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002d82:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002d86:	4622      	mov	r2, r4
 8002d88:	462b      	mov	r3, r5
 8002d8a:	1891      	adds	r1, r2, r2
 8002d8c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002d8e:	415b      	adcs	r3, r3
 8002d90:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002d92:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002d96:	4621      	mov	r1, r4
 8002d98:	eb12 0801 	adds.w	r8, r2, r1
 8002d9c:	4629      	mov	r1, r5
 8002d9e:	eb43 0901 	adc.w	r9, r3, r1
 8002da2:	f04f 0200 	mov.w	r2, #0
 8002da6:	f04f 0300 	mov.w	r3, #0
 8002daa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002dae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002db2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002db6:	4690      	mov	r8, r2
 8002db8:	4699      	mov	r9, r3
 8002dba:	4623      	mov	r3, r4
 8002dbc:	eb18 0303 	adds.w	r3, r8, r3
 8002dc0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002dc4:	462b      	mov	r3, r5
 8002dc6:	eb49 0303 	adc.w	r3, r9, r3
 8002dca:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002dce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002dda:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002dde:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002de2:	460b      	mov	r3, r1
 8002de4:	18db      	adds	r3, r3, r3
 8002de6:	653b      	str	r3, [r7, #80]	@ 0x50
 8002de8:	4613      	mov	r3, r2
 8002dea:	eb42 0303 	adc.w	r3, r2, r3
 8002dee:	657b      	str	r3, [r7, #84]	@ 0x54
 8002df0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002df4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002df8:	f7fd fa4a 	bl	8000290 <__aeabi_uldivmod>
 8002dfc:	4602      	mov	r2, r0
 8002dfe:	460b      	mov	r3, r1
 8002e00:	4b61      	ldr	r3, [pc, #388]	@ (8002f88 <UART_SetConfig+0x2d4>)
 8002e02:	fba3 2302 	umull	r2, r3, r3, r2
 8002e06:	095b      	lsrs	r3, r3, #5
 8002e08:	011c      	lsls	r4, r3, #4
 8002e0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002e0e:	2200      	movs	r2, #0
 8002e10:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002e14:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002e18:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002e1c:	4642      	mov	r2, r8
 8002e1e:	464b      	mov	r3, r9
 8002e20:	1891      	adds	r1, r2, r2
 8002e22:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002e24:	415b      	adcs	r3, r3
 8002e26:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002e28:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002e2c:	4641      	mov	r1, r8
 8002e2e:	eb12 0a01 	adds.w	sl, r2, r1
 8002e32:	4649      	mov	r1, r9
 8002e34:	eb43 0b01 	adc.w	fp, r3, r1
 8002e38:	f04f 0200 	mov.w	r2, #0
 8002e3c:	f04f 0300 	mov.w	r3, #0
 8002e40:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002e44:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002e48:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002e4c:	4692      	mov	sl, r2
 8002e4e:	469b      	mov	fp, r3
 8002e50:	4643      	mov	r3, r8
 8002e52:	eb1a 0303 	adds.w	r3, sl, r3
 8002e56:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002e5a:	464b      	mov	r3, r9
 8002e5c:	eb4b 0303 	adc.w	r3, fp, r3
 8002e60:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002e64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002e70:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002e74:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002e78:	460b      	mov	r3, r1
 8002e7a:	18db      	adds	r3, r3, r3
 8002e7c:	643b      	str	r3, [r7, #64]	@ 0x40
 8002e7e:	4613      	mov	r3, r2
 8002e80:	eb42 0303 	adc.w	r3, r2, r3
 8002e84:	647b      	str	r3, [r7, #68]	@ 0x44
 8002e86:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002e8a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002e8e:	f7fd f9ff 	bl	8000290 <__aeabi_uldivmod>
 8002e92:	4602      	mov	r2, r0
 8002e94:	460b      	mov	r3, r1
 8002e96:	4611      	mov	r1, r2
 8002e98:	4b3b      	ldr	r3, [pc, #236]	@ (8002f88 <UART_SetConfig+0x2d4>)
 8002e9a:	fba3 2301 	umull	r2, r3, r3, r1
 8002e9e:	095b      	lsrs	r3, r3, #5
 8002ea0:	2264      	movs	r2, #100	@ 0x64
 8002ea2:	fb02 f303 	mul.w	r3, r2, r3
 8002ea6:	1acb      	subs	r3, r1, r3
 8002ea8:	00db      	lsls	r3, r3, #3
 8002eaa:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002eae:	4b36      	ldr	r3, [pc, #216]	@ (8002f88 <UART_SetConfig+0x2d4>)
 8002eb0:	fba3 2302 	umull	r2, r3, r3, r2
 8002eb4:	095b      	lsrs	r3, r3, #5
 8002eb6:	005b      	lsls	r3, r3, #1
 8002eb8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002ebc:	441c      	add	r4, r3
 8002ebe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002ec8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002ecc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002ed0:	4642      	mov	r2, r8
 8002ed2:	464b      	mov	r3, r9
 8002ed4:	1891      	adds	r1, r2, r2
 8002ed6:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002ed8:	415b      	adcs	r3, r3
 8002eda:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002edc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002ee0:	4641      	mov	r1, r8
 8002ee2:	1851      	adds	r1, r2, r1
 8002ee4:	6339      	str	r1, [r7, #48]	@ 0x30
 8002ee6:	4649      	mov	r1, r9
 8002ee8:	414b      	adcs	r3, r1
 8002eea:	637b      	str	r3, [r7, #52]	@ 0x34
 8002eec:	f04f 0200 	mov.w	r2, #0
 8002ef0:	f04f 0300 	mov.w	r3, #0
 8002ef4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002ef8:	4659      	mov	r1, fp
 8002efa:	00cb      	lsls	r3, r1, #3
 8002efc:	4651      	mov	r1, sl
 8002efe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002f02:	4651      	mov	r1, sl
 8002f04:	00ca      	lsls	r2, r1, #3
 8002f06:	4610      	mov	r0, r2
 8002f08:	4619      	mov	r1, r3
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	4642      	mov	r2, r8
 8002f0e:	189b      	adds	r3, r3, r2
 8002f10:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002f14:	464b      	mov	r3, r9
 8002f16:	460a      	mov	r2, r1
 8002f18:	eb42 0303 	adc.w	r3, r2, r3
 8002f1c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002f20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	2200      	movs	r2, #0
 8002f28:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002f2c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002f30:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002f34:	460b      	mov	r3, r1
 8002f36:	18db      	adds	r3, r3, r3
 8002f38:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002f3a:	4613      	mov	r3, r2
 8002f3c:	eb42 0303 	adc.w	r3, r2, r3
 8002f40:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002f42:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002f46:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002f4a:	f7fd f9a1 	bl	8000290 <__aeabi_uldivmod>
 8002f4e:	4602      	mov	r2, r0
 8002f50:	460b      	mov	r3, r1
 8002f52:	4b0d      	ldr	r3, [pc, #52]	@ (8002f88 <UART_SetConfig+0x2d4>)
 8002f54:	fba3 1302 	umull	r1, r3, r3, r2
 8002f58:	095b      	lsrs	r3, r3, #5
 8002f5a:	2164      	movs	r1, #100	@ 0x64
 8002f5c:	fb01 f303 	mul.w	r3, r1, r3
 8002f60:	1ad3      	subs	r3, r2, r3
 8002f62:	00db      	lsls	r3, r3, #3
 8002f64:	3332      	adds	r3, #50	@ 0x32
 8002f66:	4a08      	ldr	r2, [pc, #32]	@ (8002f88 <UART_SetConfig+0x2d4>)
 8002f68:	fba2 2303 	umull	r2, r3, r2, r3
 8002f6c:	095b      	lsrs	r3, r3, #5
 8002f6e:	f003 0207 	and.w	r2, r3, #7
 8002f72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4422      	add	r2, r4
 8002f7a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002f7c:	e106      	b.n	800318c <UART_SetConfig+0x4d8>
 8002f7e:	bf00      	nop
 8002f80:	40011000 	.word	0x40011000
 8002f84:	40011400 	.word	0x40011400
 8002f88:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002f8c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002f90:	2200      	movs	r2, #0
 8002f92:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002f96:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002f9a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002f9e:	4642      	mov	r2, r8
 8002fa0:	464b      	mov	r3, r9
 8002fa2:	1891      	adds	r1, r2, r2
 8002fa4:	6239      	str	r1, [r7, #32]
 8002fa6:	415b      	adcs	r3, r3
 8002fa8:	627b      	str	r3, [r7, #36]	@ 0x24
 8002faa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002fae:	4641      	mov	r1, r8
 8002fb0:	1854      	adds	r4, r2, r1
 8002fb2:	4649      	mov	r1, r9
 8002fb4:	eb43 0501 	adc.w	r5, r3, r1
 8002fb8:	f04f 0200 	mov.w	r2, #0
 8002fbc:	f04f 0300 	mov.w	r3, #0
 8002fc0:	00eb      	lsls	r3, r5, #3
 8002fc2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002fc6:	00e2      	lsls	r2, r4, #3
 8002fc8:	4614      	mov	r4, r2
 8002fca:	461d      	mov	r5, r3
 8002fcc:	4643      	mov	r3, r8
 8002fce:	18e3      	adds	r3, r4, r3
 8002fd0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002fd4:	464b      	mov	r3, r9
 8002fd6:	eb45 0303 	adc.w	r3, r5, r3
 8002fda:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002fde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002fea:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002fee:	f04f 0200 	mov.w	r2, #0
 8002ff2:	f04f 0300 	mov.w	r3, #0
 8002ff6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002ffa:	4629      	mov	r1, r5
 8002ffc:	008b      	lsls	r3, r1, #2
 8002ffe:	4621      	mov	r1, r4
 8003000:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003004:	4621      	mov	r1, r4
 8003006:	008a      	lsls	r2, r1, #2
 8003008:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800300c:	f7fd f940 	bl	8000290 <__aeabi_uldivmod>
 8003010:	4602      	mov	r2, r0
 8003012:	460b      	mov	r3, r1
 8003014:	4b60      	ldr	r3, [pc, #384]	@ (8003198 <UART_SetConfig+0x4e4>)
 8003016:	fba3 2302 	umull	r2, r3, r3, r2
 800301a:	095b      	lsrs	r3, r3, #5
 800301c:	011c      	lsls	r4, r3, #4
 800301e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003022:	2200      	movs	r2, #0
 8003024:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003028:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800302c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003030:	4642      	mov	r2, r8
 8003032:	464b      	mov	r3, r9
 8003034:	1891      	adds	r1, r2, r2
 8003036:	61b9      	str	r1, [r7, #24]
 8003038:	415b      	adcs	r3, r3
 800303a:	61fb      	str	r3, [r7, #28]
 800303c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003040:	4641      	mov	r1, r8
 8003042:	1851      	adds	r1, r2, r1
 8003044:	6139      	str	r1, [r7, #16]
 8003046:	4649      	mov	r1, r9
 8003048:	414b      	adcs	r3, r1
 800304a:	617b      	str	r3, [r7, #20]
 800304c:	f04f 0200 	mov.w	r2, #0
 8003050:	f04f 0300 	mov.w	r3, #0
 8003054:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003058:	4659      	mov	r1, fp
 800305a:	00cb      	lsls	r3, r1, #3
 800305c:	4651      	mov	r1, sl
 800305e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003062:	4651      	mov	r1, sl
 8003064:	00ca      	lsls	r2, r1, #3
 8003066:	4610      	mov	r0, r2
 8003068:	4619      	mov	r1, r3
 800306a:	4603      	mov	r3, r0
 800306c:	4642      	mov	r2, r8
 800306e:	189b      	adds	r3, r3, r2
 8003070:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003074:	464b      	mov	r3, r9
 8003076:	460a      	mov	r2, r1
 8003078:	eb42 0303 	adc.w	r3, r2, r3
 800307c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003080:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	2200      	movs	r2, #0
 8003088:	67bb      	str	r3, [r7, #120]	@ 0x78
 800308a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800308c:	f04f 0200 	mov.w	r2, #0
 8003090:	f04f 0300 	mov.w	r3, #0
 8003094:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003098:	4649      	mov	r1, r9
 800309a:	008b      	lsls	r3, r1, #2
 800309c:	4641      	mov	r1, r8
 800309e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80030a2:	4641      	mov	r1, r8
 80030a4:	008a      	lsls	r2, r1, #2
 80030a6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80030aa:	f7fd f8f1 	bl	8000290 <__aeabi_uldivmod>
 80030ae:	4602      	mov	r2, r0
 80030b0:	460b      	mov	r3, r1
 80030b2:	4611      	mov	r1, r2
 80030b4:	4b38      	ldr	r3, [pc, #224]	@ (8003198 <UART_SetConfig+0x4e4>)
 80030b6:	fba3 2301 	umull	r2, r3, r3, r1
 80030ba:	095b      	lsrs	r3, r3, #5
 80030bc:	2264      	movs	r2, #100	@ 0x64
 80030be:	fb02 f303 	mul.w	r3, r2, r3
 80030c2:	1acb      	subs	r3, r1, r3
 80030c4:	011b      	lsls	r3, r3, #4
 80030c6:	3332      	adds	r3, #50	@ 0x32
 80030c8:	4a33      	ldr	r2, [pc, #204]	@ (8003198 <UART_SetConfig+0x4e4>)
 80030ca:	fba2 2303 	umull	r2, r3, r2, r3
 80030ce:	095b      	lsrs	r3, r3, #5
 80030d0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80030d4:	441c      	add	r4, r3
 80030d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80030da:	2200      	movs	r2, #0
 80030dc:	673b      	str	r3, [r7, #112]	@ 0x70
 80030de:	677a      	str	r2, [r7, #116]	@ 0x74
 80030e0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80030e4:	4642      	mov	r2, r8
 80030e6:	464b      	mov	r3, r9
 80030e8:	1891      	adds	r1, r2, r2
 80030ea:	60b9      	str	r1, [r7, #8]
 80030ec:	415b      	adcs	r3, r3
 80030ee:	60fb      	str	r3, [r7, #12]
 80030f0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80030f4:	4641      	mov	r1, r8
 80030f6:	1851      	adds	r1, r2, r1
 80030f8:	6039      	str	r1, [r7, #0]
 80030fa:	4649      	mov	r1, r9
 80030fc:	414b      	adcs	r3, r1
 80030fe:	607b      	str	r3, [r7, #4]
 8003100:	f04f 0200 	mov.w	r2, #0
 8003104:	f04f 0300 	mov.w	r3, #0
 8003108:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800310c:	4659      	mov	r1, fp
 800310e:	00cb      	lsls	r3, r1, #3
 8003110:	4651      	mov	r1, sl
 8003112:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003116:	4651      	mov	r1, sl
 8003118:	00ca      	lsls	r2, r1, #3
 800311a:	4610      	mov	r0, r2
 800311c:	4619      	mov	r1, r3
 800311e:	4603      	mov	r3, r0
 8003120:	4642      	mov	r2, r8
 8003122:	189b      	adds	r3, r3, r2
 8003124:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003126:	464b      	mov	r3, r9
 8003128:	460a      	mov	r2, r1
 800312a:	eb42 0303 	adc.w	r3, r2, r3
 800312e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003130:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	2200      	movs	r2, #0
 8003138:	663b      	str	r3, [r7, #96]	@ 0x60
 800313a:	667a      	str	r2, [r7, #100]	@ 0x64
 800313c:	f04f 0200 	mov.w	r2, #0
 8003140:	f04f 0300 	mov.w	r3, #0
 8003144:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003148:	4649      	mov	r1, r9
 800314a:	008b      	lsls	r3, r1, #2
 800314c:	4641      	mov	r1, r8
 800314e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003152:	4641      	mov	r1, r8
 8003154:	008a      	lsls	r2, r1, #2
 8003156:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800315a:	f7fd f899 	bl	8000290 <__aeabi_uldivmod>
 800315e:	4602      	mov	r2, r0
 8003160:	460b      	mov	r3, r1
 8003162:	4b0d      	ldr	r3, [pc, #52]	@ (8003198 <UART_SetConfig+0x4e4>)
 8003164:	fba3 1302 	umull	r1, r3, r3, r2
 8003168:	095b      	lsrs	r3, r3, #5
 800316a:	2164      	movs	r1, #100	@ 0x64
 800316c:	fb01 f303 	mul.w	r3, r1, r3
 8003170:	1ad3      	subs	r3, r2, r3
 8003172:	011b      	lsls	r3, r3, #4
 8003174:	3332      	adds	r3, #50	@ 0x32
 8003176:	4a08      	ldr	r2, [pc, #32]	@ (8003198 <UART_SetConfig+0x4e4>)
 8003178:	fba2 2303 	umull	r2, r3, r2, r3
 800317c:	095b      	lsrs	r3, r3, #5
 800317e:	f003 020f 	and.w	r2, r3, #15
 8003182:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4422      	add	r2, r4
 800318a:	609a      	str	r2, [r3, #8]
}
 800318c:	bf00      	nop
 800318e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003192:	46bd      	mov	sp, r7
 8003194:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003198:	51eb851f 	.word	0x51eb851f

0800319c <sniprintf>:
 800319c:	b40c      	push	{r2, r3}
 800319e:	b530      	push	{r4, r5, lr}
 80031a0:	4b18      	ldr	r3, [pc, #96]	@ (8003204 <sniprintf+0x68>)
 80031a2:	1e0c      	subs	r4, r1, #0
 80031a4:	681d      	ldr	r5, [r3, #0]
 80031a6:	b09d      	sub	sp, #116	@ 0x74
 80031a8:	da08      	bge.n	80031bc <sniprintf+0x20>
 80031aa:	238b      	movs	r3, #139	@ 0x8b
 80031ac:	602b      	str	r3, [r5, #0]
 80031ae:	f04f 30ff 	mov.w	r0, #4294967295
 80031b2:	b01d      	add	sp, #116	@ 0x74
 80031b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80031b8:	b002      	add	sp, #8
 80031ba:	4770      	bx	lr
 80031bc:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80031c0:	f8ad 3014 	strh.w	r3, [sp, #20]
 80031c4:	f04f 0300 	mov.w	r3, #0
 80031c8:	931b      	str	r3, [sp, #108]	@ 0x6c
 80031ca:	bf14      	ite	ne
 80031cc:	f104 33ff 	addne.w	r3, r4, #4294967295
 80031d0:	4623      	moveq	r3, r4
 80031d2:	9304      	str	r3, [sp, #16]
 80031d4:	9307      	str	r3, [sp, #28]
 80031d6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80031da:	9002      	str	r0, [sp, #8]
 80031dc:	9006      	str	r0, [sp, #24]
 80031de:	f8ad 3016 	strh.w	r3, [sp, #22]
 80031e2:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80031e4:	ab21      	add	r3, sp, #132	@ 0x84
 80031e6:	a902      	add	r1, sp, #8
 80031e8:	4628      	mov	r0, r5
 80031ea:	9301      	str	r3, [sp, #4]
 80031ec:	f000 f9a2 	bl	8003534 <_svfiprintf_r>
 80031f0:	1c43      	adds	r3, r0, #1
 80031f2:	bfbc      	itt	lt
 80031f4:	238b      	movlt	r3, #139	@ 0x8b
 80031f6:	602b      	strlt	r3, [r5, #0]
 80031f8:	2c00      	cmp	r4, #0
 80031fa:	d0da      	beq.n	80031b2 <sniprintf+0x16>
 80031fc:	9b02      	ldr	r3, [sp, #8]
 80031fe:	2200      	movs	r2, #0
 8003200:	701a      	strb	r2, [r3, #0]
 8003202:	e7d6      	b.n	80031b2 <sniprintf+0x16>
 8003204:	2000000c 	.word	0x2000000c

08003208 <memset>:
 8003208:	4402      	add	r2, r0
 800320a:	4603      	mov	r3, r0
 800320c:	4293      	cmp	r3, r2
 800320e:	d100      	bne.n	8003212 <memset+0xa>
 8003210:	4770      	bx	lr
 8003212:	f803 1b01 	strb.w	r1, [r3], #1
 8003216:	e7f9      	b.n	800320c <memset+0x4>

08003218 <__errno>:
 8003218:	4b01      	ldr	r3, [pc, #4]	@ (8003220 <__errno+0x8>)
 800321a:	6818      	ldr	r0, [r3, #0]
 800321c:	4770      	bx	lr
 800321e:	bf00      	nop
 8003220:	2000000c 	.word	0x2000000c

08003224 <__libc_init_array>:
 8003224:	b570      	push	{r4, r5, r6, lr}
 8003226:	4d0d      	ldr	r5, [pc, #52]	@ (800325c <__libc_init_array+0x38>)
 8003228:	4c0d      	ldr	r4, [pc, #52]	@ (8003260 <__libc_init_array+0x3c>)
 800322a:	1b64      	subs	r4, r4, r5
 800322c:	10a4      	asrs	r4, r4, #2
 800322e:	2600      	movs	r6, #0
 8003230:	42a6      	cmp	r6, r4
 8003232:	d109      	bne.n	8003248 <__libc_init_array+0x24>
 8003234:	4d0b      	ldr	r5, [pc, #44]	@ (8003264 <__libc_init_array+0x40>)
 8003236:	4c0c      	ldr	r4, [pc, #48]	@ (8003268 <__libc_init_array+0x44>)
 8003238:	f000 fc64 	bl	8003b04 <_init>
 800323c:	1b64      	subs	r4, r4, r5
 800323e:	10a4      	asrs	r4, r4, #2
 8003240:	2600      	movs	r6, #0
 8003242:	42a6      	cmp	r6, r4
 8003244:	d105      	bne.n	8003252 <__libc_init_array+0x2e>
 8003246:	bd70      	pop	{r4, r5, r6, pc}
 8003248:	f855 3b04 	ldr.w	r3, [r5], #4
 800324c:	4798      	blx	r3
 800324e:	3601      	adds	r6, #1
 8003250:	e7ee      	b.n	8003230 <__libc_init_array+0xc>
 8003252:	f855 3b04 	ldr.w	r3, [r5], #4
 8003256:	4798      	blx	r3
 8003258:	3601      	adds	r6, #1
 800325a:	e7f2      	b.n	8003242 <__libc_init_array+0x1e>
 800325c:	08003c84 	.word	0x08003c84
 8003260:	08003c84 	.word	0x08003c84
 8003264:	08003c84 	.word	0x08003c84
 8003268:	08003c88 	.word	0x08003c88

0800326c <__retarget_lock_acquire_recursive>:
 800326c:	4770      	bx	lr

0800326e <__retarget_lock_release_recursive>:
 800326e:	4770      	bx	lr

08003270 <memcpy>:
 8003270:	440a      	add	r2, r1
 8003272:	4291      	cmp	r1, r2
 8003274:	f100 33ff 	add.w	r3, r0, #4294967295
 8003278:	d100      	bne.n	800327c <memcpy+0xc>
 800327a:	4770      	bx	lr
 800327c:	b510      	push	{r4, lr}
 800327e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003282:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003286:	4291      	cmp	r1, r2
 8003288:	d1f9      	bne.n	800327e <memcpy+0xe>
 800328a:	bd10      	pop	{r4, pc}

0800328c <_free_r>:
 800328c:	b538      	push	{r3, r4, r5, lr}
 800328e:	4605      	mov	r5, r0
 8003290:	2900      	cmp	r1, #0
 8003292:	d041      	beq.n	8003318 <_free_r+0x8c>
 8003294:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003298:	1f0c      	subs	r4, r1, #4
 800329a:	2b00      	cmp	r3, #0
 800329c:	bfb8      	it	lt
 800329e:	18e4      	addlt	r4, r4, r3
 80032a0:	f000 f8e0 	bl	8003464 <__malloc_lock>
 80032a4:	4a1d      	ldr	r2, [pc, #116]	@ (800331c <_free_r+0x90>)
 80032a6:	6813      	ldr	r3, [r2, #0]
 80032a8:	b933      	cbnz	r3, 80032b8 <_free_r+0x2c>
 80032aa:	6063      	str	r3, [r4, #4]
 80032ac:	6014      	str	r4, [r2, #0]
 80032ae:	4628      	mov	r0, r5
 80032b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80032b4:	f000 b8dc 	b.w	8003470 <__malloc_unlock>
 80032b8:	42a3      	cmp	r3, r4
 80032ba:	d908      	bls.n	80032ce <_free_r+0x42>
 80032bc:	6820      	ldr	r0, [r4, #0]
 80032be:	1821      	adds	r1, r4, r0
 80032c0:	428b      	cmp	r3, r1
 80032c2:	bf01      	itttt	eq
 80032c4:	6819      	ldreq	r1, [r3, #0]
 80032c6:	685b      	ldreq	r3, [r3, #4]
 80032c8:	1809      	addeq	r1, r1, r0
 80032ca:	6021      	streq	r1, [r4, #0]
 80032cc:	e7ed      	b.n	80032aa <_free_r+0x1e>
 80032ce:	461a      	mov	r2, r3
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	b10b      	cbz	r3, 80032d8 <_free_r+0x4c>
 80032d4:	42a3      	cmp	r3, r4
 80032d6:	d9fa      	bls.n	80032ce <_free_r+0x42>
 80032d8:	6811      	ldr	r1, [r2, #0]
 80032da:	1850      	adds	r0, r2, r1
 80032dc:	42a0      	cmp	r0, r4
 80032de:	d10b      	bne.n	80032f8 <_free_r+0x6c>
 80032e0:	6820      	ldr	r0, [r4, #0]
 80032e2:	4401      	add	r1, r0
 80032e4:	1850      	adds	r0, r2, r1
 80032e6:	4283      	cmp	r3, r0
 80032e8:	6011      	str	r1, [r2, #0]
 80032ea:	d1e0      	bne.n	80032ae <_free_r+0x22>
 80032ec:	6818      	ldr	r0, [r3, #0]
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	6053      	str	r3, [r2, #4]
 80032f2:	4408      	add	r0, r1
 80032f4:	6010      	str	r0, [r2, #0]
 80032f6:	e7da      	b.n	80032ae <_free_r+0x22>
 80032f8:	d902      	bls.n	8003300 <_free_r+0x74>
 80032fa:	230c      	movs	r3, #12
 80032fc:	602b      	str	r3, [r5, #0]
 80032fe:	e7d6      	b.n	80032ae <_free_r+0x22>
 8003300:	6820      	ldr	r0, [r4, #0]
 8003302:	1821      	adds	r1, r4, r0
 8003304:	428b      	cmp	r3, r1
 8003306:	bf04      	itt	eq
 8003308:	6819      	ldreq	r1, [r3, #0]
 800330a:	685b      	ldreq	r3, [r3, #4]
 800330c:	6063      	str	r3, [r4, #4]
 800330e:	bf04      	itt	eq
 8003310:	1809      	addeq	r1, r1, r0
 8003312:	6021      	streq	r1, [r4, #0]
 8003314:	6054      	str	r4, [r2, #4]
 8003316:	e7ca      	b.n	80032ae <_free_r+0x22>
 8003318:	bd38      	pop	{r3, r4, r5, pc}
 800331a:	bf00      	nop
 800331c:	20003e7c 	.word	0x20003e7c

08003320 <sbrk_aligned>:
 8003320:	b570      	push	{r4, r5, r6, lr}
 8003322:	4e0f      	ldr	r6, [pc, #60]	@ (8003360 <sbrk_aligned+0x40>)
 8003324:	460c      	mov	r4, r1
 8003326:	6831      	ldr	r1, [r6, #0]
 8003328:	4605      	mov	r5, r0
 800332a:	b911      	cbnz	r1, 8003332 <sbrk_aligned+0x12>
 800332c:	f000 fba4 	bl	8003a78 <_sbrk_r>
 8003330:	6030      	str	r0, [r6, #0]
 8003332:	4621      	mov	r1, r4
 8003334:	4628      	mov	r0, r5
 8003336:	f000 fb9f 	bl	8003a78 <_sbrk_r>
 800333a:	1c43      	adds	r3, r0, #1
 800333c:	d103      	bne.n	8003346 <sbrk_aligned+0x26>
 800333e:	f04f 34ff 	mov.w	r4, #4294967295
 8003342:	4620      	mov	r0, r4
 8003344:	bd70      	pop	{r4, r5, r6, pc}
 8003346:	1cc4      	adds	r4, r0, #3
 8003348:	f024 0403 	bic.w	r4, r4, #3
 800334c:	42a0      	cmp	r0, r4
 800334e:	d0f8      	beq.n	8003342 <sbrk_aligned+0x22>
 8003350:	1a21      	subs	r1, r4, r0
 8003352:	4628      	mov	r0, r5
 8003354:	f000 fb90 	bl	8003a78 <_sbrk_r>
 8003358:	3001      	adds	r0, #1
 800335a:	d1f2      	bne.n	8003342 <sbrk_aligned+0x22>
 800335c:	e7ef      	b.n	800333e <sbrk_aligned+0x1e>
 800335e:	bf00      	nop
 8003360:	20003e78 	.word	0x20003e78

08003364 <_malloc_r>:
 8003364:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003368:	1ccd      	adds	r5, r1, #3
 800336a:	f025 0503 	bic.w	r5, r5, #3
 800336e:	3508      	adds	r5, #8
 8003370:	2d0c      	cmp	r5, #12
 8003372:	bf38      	it	cc
 8003374:	250c      	movcc	r5, #12
 8003376:	2d00      	cmp	r5, #0
 8003378:	4606      	mov	r6, r0
 800337a:	db01      	blt.n	8003380 <_malloc_r+0x1c>
 800337c:	42a9      	cmp	r1, r5
 800337e:	d904      	bls.n	800338a <_malloc_r+0x26>
 8003380:	230c      	movs	r3, #12
 8003382:	6033      	str	r3, [r6, #0]
 8003384:	2000      	movs	r0, #0
 8003386:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800338a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003460 <_malloc_r+0xfc>
 800338e:	f000 f869 	bl	8003464 <__malloc_lock>
 8003392:	f8d8 3000 	ldr.w	r3, [r8]
 8003396:	461c      	mov	r4, r3
 8003398:	bb44      	cbnz	r4, 80033ec <_malloc_r+0x88>
 800339a:	4629      	mov	r1, r5
 800339c:	4630      	mov	r0, r6
 800339e:	f7ff ffbf 	bl	8003320 <sbrk_aligned>
 80033a2:	1c43      	adds	r3, r0, #1
 80033a4:	4604      	mov	r4, r0
 80033a6:	d158      	bne.n	800345a <_malloc_r+0xf6>
 80033a8:	f8d8 4000 	ldr.w	r4, [r8]
 80033ac:	4627      	mov	r7, r4
 80033ae:	2f00      	cmp	r7, #0
 80033b0:	d143      	bne.n	800343a <_malloc_r+0xd6>
 80033b2:	2c00      	cmp	r4, #0
 80033b4:	d04b      	beq.n	800344e <_malloc_r+0xea>
 80033b6:	6823      	ldr	r3, [r4, #0]
 80033b8:	4639      	mov	r1, r7
 80033ba:	4630      	mov	r0, r6
 80033bc:	eb04 0903 	add.w	r9, r4, r3
 80033c0:	f000 fb5a 	bl	8003a78 <_sbrk_r>
 80033c4:	4581      	cmp	r9, r0
 80033c6:	d142      	bne.n	800344e <_malloc_r+0xea>
 80033c8:	6821      	ldr	r1, [r4, #0]
 80033ca:	1a6d      	subs	r5, r5, r1
 80033cc:	4629      	mov	r1, r5
 80033ce:	4630      	mov	r0, r6
 80033d0:	f7ff ffa6 	bl	8003320 <sbrk_aligned>
 80033d4:	3001      	adds	r0, #1
 80033d6:	d03a      	beq.n	800344e <_malloc_r+0xea>
 80033d8:	6823      	ldr	r3, [r4, #0]
 80033da:	442b      	add	r3, r5
 80033dc:	6023      	str	r3, [r4, #0]
 80033de:	f8d8 3000 	ldr.w	r3, [r8]
 80033e2:	685a      	ldr	r2, [r3, #4]
 80033e4:	bb62      	cbnz	r2, 8003440 <_malloc_r+0xdc>
 80033e6:	f8c8 7000 	str.w	r7, [r8]
 80033ea:	e00f      	b.n	800340c <_malloc_r+0xa8>
 80033ec:	6822      	ldr	r2, [r4, #0]
 80033ee:	1b52      	subs	r2, r2, r5
 80033f0:	d420      	bmi.n	8003434 <_malloc_r+0xd0>
 80033f2:	2a0b      	cmp	r2, #11
 80033f4:	d917      	bls.n	8003426 <_malloc_r+0xc2>
 80033f6:	1961      	adds	r1, r4, r5
 80033f8:	42a3      	cmp	r3, r4
 80033fa:	6025      	str	r5, [r4, #0]
 80033fc:	bf18      	it	ne
 80033fe:	6059      	strne	r1, [r3, #4]
 8003400:	6863      	ldr	r3, [r4, #4]
 8003402:	bf08      	it	eq
 8003404:	f8c8 1000 	streq.w	r1, [r8]
 8003408:	5162      	str	r2, [r4, r5]
 800340a:	604b      	str	r3, [r1, #4]
 800340c:	4630      	mov	r0, r6
 800340e:	f000 f82f 	bl	8003470 <__malloc_unlock>
 8003412:	f104 000b 	add.w	r0, r4, #11
 8003416:	1d23      	adds	r3, r4, #4
 8003418:	f020 0007 	bic.w	r0, r0, #7
 800341c:	1ac2      	subs	r2, r0, r3
 800341e:	bf1c      	itt	ne
 8003420:	1a1b      	subne	r3, r3, r0
 8003422:	50a3      	strne	r3, [r4, r2]
 8003424:	e7af      	b.n	8003386 <_malloc_r+0x22>
 8003426:	6862      	ldr	r2, [r4, #4]
 8003428:	42a3      	cmp	r3, r4
 800342a:	bf0c      	ite	eq
 800342c:	f8c8 2000 	streq.w	r2, [r8]
 8003430:	605a      	strne	r2, [r3, #4]
 8003432:	e7eb      	b.n	800340c <_malloc_r+0xa8>
 8003434:	4623      	mov	r3, r4
 8003436:	6864      	ldr	r4, [r4, #4]
 8003438:	e7ae      	b.n	8003398 <_malloc_r+0x34>
 800343a:	463c      	mov	r4, r7
 800343c:	687f      	ldr	r7, [r7, #4]
 800343e:	e7b6      	b.n	80033ae <_malloc_r+0x4a>
 8003440:	461a      	mov	r2, r3
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	42a3      	cmp	r3, r4
 8003446:	d1fb      	bne.n	8003440 <_malloc_r+0xdc>
 8003448:	2300      	movs	r3, #0
 800344a:	6053      	str	r3, [r2, #4]
 800344c:	e7de      	b.n	800340c <_malloc_r+0xa8>
 800344e:	230c      	movs	r3, #12
 8003450:	6033      	str	r3, [r6, #0]
 8003452:	4630      	mov	r0, r6
 8003454:	f000 f80c 	bl	8003470 <__malloc_unlock>
 8003458:	e794      	b.n	8003384 <_malloc_r+0x20>
 800345a:	6005      	str	r5, [r0, #0]
 800345c:	e7d6      	b.n	800340c <_malloc_r+0xa8>
 800345e:	bf00      	nop
 8003460:	20003e7c 	.word	0x20003e7c

08003464 <__malloc_lock>:
 8003464:	4801      	ldr	r0, [pc, #4]	@ (800346c <__malloc_lock+0x8>)
 8003466:	f7ff bf01 	b.w	800326c <__retarget_lock_acquire_recursive>
 800346a:	bf00      	nop
 800346c:	20003e74 	.word	0x20003e74

08003470 <__malloc_unlock>:
 8003470:	4801      	ldr	r0, [pc, #4]	@ (8003478 <__malloc_unlock+0x8>)
 8003472:	f7ff befc 	b.w	800326e <__retarget_lock_release_recursive>
 8003476:	bf00      	nop
 8003478:	20003e74 	.word	0x20003e74

0800347c <__ssputs_r>:
 800347c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003480:	688e      	ldr	r6, [r1, #8]
 8003482:	461f      	mov	r7, r3
 8003484:	42be      	cmp	r6, r7
 8003486:	680b      	ldr	r3, [r1, #0]
 8003488:	4682      	mov	sl, r0
 800348a:	460c      	mov	r4, r1
 800348c:	4690      	mov	r8, r2
 800348e:	d82d      	bhi.n	80034ec <__ssputs_r+0x70>
 8003490:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003494:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003498:	d026      	beq.n	80034e8 <__ssputs_r+0x6c>
 800349a:	6965      	ldr	r5, [r4, #20]
 800349c:	6909      	ldr	r1, [r1, #16]
 800349e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80034a2:	eba3 0901 	sub.w	r9, r3, r1
 80034a6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80034aa:	1c7b      	adds	r3, r7, #1
 80034ac:	444b      	add	r3, r9
 80034ae:	106d      	asrs	r5, r5, #1
 80034b0:	429d      	cmp	r5, r3
 80034b2:	bf38      	it	cc
 80034b4:	461d      	movcc	r5, r3
 80034b6:	0553      	lsls	r3, r2, #21
 80034b8:	d527      	bpl.n	800350a <__ssputs_r+0x8e>
 80034ba:	4629      	mov	r1, r5
 80034bc:	f7ff ff52 	bl	8003364 <_malloc_r>
 80034c0:	4606      	mov	r6, r0
 80034c2:	b360      	cbz	r0, 800351e <__ssputs_r+0xa2>
 80034c4:	6921      	ldr	r1, [r4, #16]
 80034c6:	464a      	mov	r2, r9
 80034c8:	f7ff fed2 	bl	8003270 <memcpy>
 80034cc:	89a3      	ldrh	r3, [r4, #12]
 80034ce:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80034d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80034d6:	81a3      	strh	r3, [r4, #12]
 80034d8:	6126      	str	r6, [r4, #16]
 80034da:	6165      	str	r5, [r4, #20]
 80034dc:	444e      	add	r6, r9
 80034de:	eba5 0509 	sub.w	r5, r5, r9
 80034e2:	6026      	str	r6, [r4, #0]
 80034e4:	60a5      	str	r5, [r4, #8]
 80034e6:	463e      	mov	r6, r7
 80034e8:	42be      	cmp	r6, r7
 80034ea:	d900      	bls.n	80034ee <__ssputs_r+0x72>
 80034ec:	463e      	mov	r6, r7
 80034ee:	6820      	ldr	r0, [r4, #0]
 80034f0:	4632      	mov	r2, r6
 80034f2:	4641      	mov	r1, r8
 80034f4:	f000 faa6 	bl	8003a44 <memmove>
 80034f8:	68a3      	ldr	r3, [r4, #8]
 80034fa:	1b9b      	subs	r3, r3, r6
 80034fc:	60a3      	str	r3, [r4, #8]
 80034fe:	6823      	ldr	r3, [r4, #0]
 8003500:	4433      	add	r3, r6
 8003502:	6023      	str	r3, [r4, #0]
 8003504:	2000      	movs	r0, #0
 8003506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800350a:	462a      	mov	r2, r5
 800350c:	f000 fac4 	bl	8003a98 <_realloc_r>
 8003510:	4606      	mov	r6, r0
 8003512:	2800      	cmp	r0, #0
 8003514:	d1e0      	bne.n	80034d8 <__ssputs_r+0x5c>
 8003516:	6921      	ldr	r1, [r4, #16]
 8003518:	4650      	mov	r0, sl
 800351a:	f7ff feb7 	bl	800328c <_free_r>
 800351e:	230c      	movs	r3, #12
 8003520:	f8ca 3000 	str.w	r3, [sl]
 8003524:	89a3      	ldrh	r3, [r4, #12]
 8003526:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800352a:	81a3      	strh	r3, [r4, #12]
 800352c:	f04f 30ff 	mov.w	r0, #4294967295
 8003530:	e7e9      	b.n	8003506 <__ssputs_r+0x8a>
	...

08003534 <_svfiprintf_r>:
 8003534:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003538:	4698      	mov	r8, r3
 800353a:	898b      	ldrh	r3, [r1, #12]
 800353c:	061b      	lsls	r3, r3, #24
 800353e:	b09d      	sub	sp, #116	@ 0x74
 8003540:	4607      	mov	r7, r0
 8003542:	460d      	mov	r5, r1
 8003544:	4614      	mov	r4, r2
 8003546:	d510      	bpl.n	800356a <_svfiprintf_r+0x36>
 8003548:	690b      	ldr	r3, [r1, #16]
 800354a:	b973      	cbnz	r3, 800356a <_svfiprintf_r+0x36>
 800354c:	2140      	movs	r1, #64	@ 0x40
 800354e:	f7ff ff09 	bl	8003364 <_malloc_r>
 8003552:	6028      	str	r0, [r5, #0]
 8003554:	6128      	str	r0, [r5, #16]
 8003556:	b930      	cbnz	r0, 8003566 <_svfiprintf_r+0x32>
 8003558:	230c      	movs	r3, #12
 800355a:	603b      	str	r3, [r7, #0]
 800355c:	f04f 30ff 	mov.w	r0, #4294967295
 8003560:	b01d      	add	sp, #116	@ 0x74
 8003562:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003566:	2340      	movs	r3, #64	@ 0x40
 8003568:	616b      	str	r3, [r5, #20]
 800356a:	2300      	movs	r3, #0
 800356c:	9309      	str	r3, [sp, #36]	@ 0x24
 800356e:	2320      	movs	r3, #32
 8003570:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003574:	f8cd 800c 	str.w	r8, [sp, #12]
 8003578:	2330      	movs	r3, #48	@ 0x30
 800357a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8003718 <_svfiprintf_r+0x1e4>
 800357e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003582:	f04f 0901 	mov.w	r9, #1
 8003586:	4623      	mov	r3, r4
 8003588:	469a      	mov	sl, r3
 800358a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800358e:	b10a      	cbz	r2, 8003594 <_svfiprintf_r+0x60>
 8003590:	2a25      	cmp	r2, #37	@ 0x25
 8003592:	d1f9      	bne.n	8003588 <_svfiprintf_r+0x54>
 8003594:	ebba 0b04 	subs.w	fp, sl, r4
 8003598:	d00b      	beq.n	80035b2 <_svfiprintf_r+0x7e>
 800359a:	465b      	mov	r3, fp
 800359c:	4622      	mov	r2, r4
 800359e:	4629      	mov	r1, r5
 80035a0:	4638      	mov	r0, r7
 80035a2:	f7ff ff6b 	bl	800347c <__ssputs_r>
 80035a6:	3001      	adds	r0, #1
 80035a8:	f000 80a7 	beq.w	80036fa <_svfiprintf_r+0x1c6>
 80035ac:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80035ae:	445a      	add	r2, fp
 80035b0:	9209      	str	r2, [sp, #36]	@ 0x24
 80035b2:	f89a 3000 	ldrb.w	r3, [sl]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	f000 809f 	beq.w	80036fa <_svfiprintf_r+0x1c6>
 80035bc:	2300      	movs	r3, #0
 80035be:	f04f 32ff 	mov.w	r2, #4294967295
 80035c2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80035c6:	f10a 0a01 	add.w	sl, sl, #1
 80035ca:	9304      	str	r3, [sp, #16]
 80035cc:	9307      	str	r3, [sp, #28]
 80035ce:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80035d2:	931a      	str	r3, [sp, #104]	@ 0x68
 80035d4:	4654      	mov	r4, sl
 80035d6:	2205      	movs	r2, #5
 80035d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80035dc:	484e      	ldr	r0, [pc, #312]	@ (8003718 <_svfiprintf_r+0x1e4>)
 80035de:	f7fc fe07 	bl	80001f0 <memchr>
 80035e2:	9a04      	ldr	r2, [sp, #16]
 80035e4:	b9d8      	cbnz	r0, 800361e <_svfiprintf_r+0xea>
 80035e6:	06d0      	lsls	r0, r2, #27
 80035e8:	bf44      	itt	mi
 80035ea:	2320      	movmi	r3, #32
 80035ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80035f0:	0711      	lsls	r1, r2, #28
 80035f2:	bf44      	itt	mi
 80035f4:	232b      	movmi	r3, #43	@ 0x2b
 80035f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80035fa:	f89a 3000 	ldrb.w	r3, [sl]
 80035fe:	2b2a      	cmp	r3, #42	@ 0x2a
 8003600:	d015      	beq.n	800362e <_svfiprintf_r+0xfa>
 8003602:	9a07      	ldr	r2, [sp, #28]
 8003604:	4654      	mov	r4, sl
 8003606:	2000      	movs	r0, #0
 8003608:	f04f 0c0a 	mov.w	ip, #10
 800360c:	4621      	mov	r1, r4
 800360e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003612:	3b30      	subs	r3, #48	@ 0x30
 8003614:	2b09      	cmp	r3, #9
 8003616:	d94b      	bls.n	80036b0 <_svfiprintf_r+0x17c>
 8003618:	b1b0      	cbz	r0, 8003648 <_svfiprintf_r+0x114>
 800361a:	9207      	str	r2, [sp, #28]
 800361c:	e014      	b.n	8003648 <_svfiprintf_r+0x114>
 800361e:	eba0 0308 	sub.w	r3, r0, r8
 8003622:	fa09 f303 	lsl.w	r3, r9, r3
 8003626:	4313      	orrs	r3, r2
 8003628:	9304      	str	r3, [sp, #16]
 800362a:	46a2      	mov	sl, r4
 800362c:	e7d2      	b.n	80035d4 <_svfiprintf_r+0xa0>
 800362e:	9b03      	ldr	r3, [sp, #12]
 8003630:	1d19      	adds	r1, r3, #4
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	9103      	str	r1, [sp, #12]
 8003636:	2b00      	cmp	r3, #0
 8003638:	bfbb      	ittet	lt
 800363a:	425b      	neglt	r3, r3
 800363c:	f042 0202 	orrlt.w	r2, r2, #2
 8003640:	9307      	strge	r3, [sp, #28]
 8003642:	9307      	strlt	r3, [sp, #28]
 8003644:	bfb8      	it	lt
 8003646:	9204      	strlt	r2, [sp, #16]
 8003648:	7823      	ldrb	r3, [r4, #0]
 800364a:	2b2e      	cmp	r3, #46	@ 0x2e
 800364c:	d10a      	bne.n	8003664 <_svfiprintf_r+0x130>
 800364e:	7863      	ldrb	r3, [r4, #1]
 8003650:	2b2a      	cmp	r3, #42	@ 0x2a
 8003652:	d132      	bne.n	80036ba <_svfiprintf_r+0x186>
 8003654:	9b03      	ldr	r3, [sp, #12]
 8003656:	1d1a      	adds	r2, r3, #4
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	9203      	str	r2, [sp, #12]
 800365c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003660:	3402      	adds	r4, #2
 8003662:	9305      	str	r3, [sp, #20]
 8003664:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8003728 <_svfiprintf_r+0x1f4>
 8003668:	7821      	ldrb	r1, [r4, #0]
 800366a:	2203      	movs	r2, #3
 800366c:	4650      	mov	r0, sl
 800366e:	f7fc fdbf 	bl	80001f0 <memchr>
 8003672:	b138      	cbz	r0, 8003684 <_svfiprintf_r+0x150>
 8003674:	9b04      	ldr	r3, [sp, #16]
 8003676:	eba0 000a 	sub.w	r0, r0, sl
 800367a:	2240      	movs	r2, #64	@ 0x40
 800367c:	4082      	lsls	r2, r0
 800367e:	4313      	orrs	r3, r2
 8003680:	3401      	adds	r4, #1
 8003682:	9304      	str	r3, [sp, #16]
 8003684:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003688:	4824      	ldr	r0, [pc, #144]	@ (800371c <_svfiprintf_r+0x1e8>)
 800368a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800368e:	2206      	movs	r2, #6
 8003690:	f7fc fdae 	bl	80001f0 <memchr>
 8003694:	2800      	cmp	r0, #0
 8003696:	d036      	beq.n	8003706 <_svfiprintf_r+0x1d2>
 8003698:	4b21      	ldr	r3, [pc, #132]	@ (8003720 <_svfiprintf_r+0x1ec>)
 800369a:	bb1b      	cbnz	r3, 80036e4 <_svfiprintf_r+0x1b0>
 800369c:	9b03      	ldr	r3, [sp, #12]
 800369e:	3307      	adds	r3, #7
 80036a0:	f023 0307 	bic.w	r3, r3, #7
 80036a4:	3308      	adds	r3, #8
 80036a6:	9303      	str	r3, [sp, #12]
 80036a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80036aa:	4433      	add	r3, r6
 80036ac:	9309      	str	r3, [sp, #36]	@ 0x24
 80036ae:	e76a      	b.n	8003586 <_svfiprintf_r+0x52>
 80036b0:	fb0c 3202 	mla	r2, ip, r2, r3
 80036b4:	460c      	mov	r4, r1
 80036b6:	2001      	movs	r0, #1
 80036b8:	e7a8      	b.n	800360c <_svfiprintf_r+0xd8>
 80036ba:	2300      	movs	r3, #0
 80036bc:	3401      	adds	r4, #1
 80036be:	9305      	str	r3, [sp, #20]
 80036c0:	4619      	mov	r1, r3
 80036c2:	f04f 0c0a 	mov.w	ip, #10
 80036c6:	4620      	mov	r0, r4
 80036c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80036cc:	3a30      	subs	r2, #48	@ 0x30
 80036ce:	2a09      	cmp	r2, #9
 80036d0:	d903      	bls.n	80036da <_svfiprintf_r+0x1a6>
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d0c6      	beq.n	8003664 <_svfiprintf_r+0x130>
 80036d6:	9105      	str	r1, [sp, #20]
 80036d8:	e7c4      	b.n	8003664 <_svfiprintf_r+0x130>
 80036da:	fb0c 2101 	mla	r1, ip, r1, r2
 80036de:	4604      	mov	r4, r0
 80036e0:	2301      	movs	r3, #1
 80036e2:	e7f0      	b.n	80036c6 <_svfiprintf_r+0x192>
 80036e4:	ab03      	add	r3, sp, #12
 80036e6:	9300      	str	r3, [sp, #0]
 80036e8:	462a      	mov	r2, r5
 80036ea:	4b0e      	ldr	r3, [pc, #56]	@ (8003724 <_svfiprintf_r+0x1f0>)
 80036ec:	a904      	add	r1, sp, #16
 80036ee:	4638      	mov	r0, r7
 80036f0:	f3af 8000 	nop.w
 80036f4:	1c42      	adds	r2, r0, #1
 80036f6:	4606      	mov	r6, r0
 80036f8:	d1d6      	bne.n	80036a8 <_svfiprintf_r+0x174>
 80036fa:	89ab      	ldrh	r3, [r5, #12]
 80036fc:	065b      	lsls	r3, r3, #25
 80036fe:	f53f af2d 	bmi.w	800355c <_svfiprintf_r+0x28>
 8003702:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003704:	e72c      	b.n	8003560 <_svfiprintf_r+0x2c>
 8003706:	ab03      	add	r3, sp, #12
 8003708:	9300      	str	r3, [sp, #0]
 800370a:	462a      	mov	r2, r5
 800370c:	4b05      	ldr	r3, [pc, #20]	@ (8003724 <_svfiprintf_r+0x1f0>)
 800370e:	a904      	add	r1, sp, #16
 8003710:	4638      	mov	r0, r7
 8003712:	f000 f879 	bl	8003808 <_printf_i>
 8003716:	e7ed      	b.n	80036f4 <_svfiprintf_r+0x1c0>
 8003718:	08003c48 	.word	0x08003c48
 800371c:	08003c52 	.word	0x08003c52
 8003720:	00000000 	.word	0x00000000
 8003724:	0800347d 	.word	0x0800347d
 8003728:	08003c4e 	.word	0x08003c4e

0800372c <_printf_common>:
 800372c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003730:	4616      	mov	r6, r2
 8003732:	4698      	mov	r8, r3
 8003734:	688a      	ldr	r2, [r1, #8]
 8003736:	690b      	ldr	r3, [r1, #16]
 8003738:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800373c:	4293      	cmp	r3, r2
 800373e:	bfb8      	it	lt
 8003740:	4613      	movlt	r3, r2
 8003742:	6033      	str	r3, [r6, #0]
 8003744:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003748:	4607      	mov	r7, r0
 800374a:	460c      	mov	r4, r1
 800374c:	b10a      	cbz	r2, 8003752 <_printf_common+0x26>
 800374e:	3301      	adds	r3, #1
 8003750:	6033      	str	r3, [r6, #0]
 8003752:	6823      	ldr	r3, [r4, #0]
 8003754:	0699      	lsls	r1, r3, #26
 8003756:	bf42      	ittt	mi
 8003758:	6833      	ldrmi	r3, [r6, #0]
 800375a:	3302      	addmi	r3, #2
 800375c:	6033      	strmi	r3, [r6, #0]
 800375e:	6825      	ldr	r5, [r4, #0]
 8003760:	f015 0506 	ands.w	r5, r5, #6
 8003764:	d106      	bne.n	8003774 <_printf_common+0x48>
 8003766:	f104 0a19 	add.w	sl, r4, #25
 800376a:	68e3      	ldr	r3, [r4, #12]
 800376c:	6832      	ldr	r2, [r6, #0]
 800376e:	1a9b      	subs	r3, r3, r2
 8003770:	42ab      	cmp	r3, r5
 8003772:	dc26      	bgt.n	80037c2 <_printf_common+0x96>
 8003774:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003778:	6822      	ldr	r2, [r4, #0]
 800377a:	3b00      	subs	r3, #0
 800377c:	bf18      	it	ne
 800377e:	2301      	movne	r3, #1
 8003780:	0692      	lsls	r2, r2, #26
 8003782:	d42b      	bmi.n	80037dc <_printf_common+0xb0>
 8003784:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003788:	4641      	mov	r1, r8
 800378a:	4638      	mov	r0, r7
 800378c:	47c8      	blx	r9
 800378e:	3001      	adds	r0, #1
 8003790:	d01e      	beq.n	80037d0 <_printf_common+0xa4>
 8003792:	6823      	ldr	r3, [r4, #0]
 8003794:	6922      	ldr	r2, [r4, #16]
 8003796:	f003 0306 	and.w	r3, r3, #6
 800379a:	2b04      	cmp	r3, #4
 800379c:	bf02      	ittt	eq
 800379e:	68e5      	ldreq	r5, [r4, #12]
 80037a0:	6833      	ldreq	r3, [r6, #0]
 80037a2:	1aed      	subeq	r5, r5, r3
 80037a4:	68a3      	ldr	r3, [r4, #8]
 80037a6:	bf0c      	ite	eq
 80037a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80037ac:	2500      	movne	r5, #0
 80037ae:	4293      	cmp	r3, r2
 80037b0:	bfc4      	itt	gt
 80037b2:	1a9b      	subgt	r3, r3, r2
 80037b4:	18ed      	addgt	r5, r5, r3
 80037b6:	2600      	movs	r6, #0
 80037b8:	341a      	adds	r4, #26
 80037ba:	42b5      	cmp	r5, r6
 80037bc:	d11a      	bne.n	80037f4 <_printf_common+0xc8>
 80037be:	2000      	movs	r0, #0
 80037c0:	e008      	b.n	80037d4 <_printf_common+0xa8>
 80037c2:	2301      	movs	r3, #1
 80037c4:	4652      	mov	r2, sl
 80037c6:	4641      	mov	r1, r8
 80037c8:	4638      	mov	r0, r7
 80037ca:	47c8      	blx	r9
 80037cc:	3001      	adds	r0, #1
 80037ce:	d103      	bne.n	80037d8 <_printf_common+0xac>
 80037d0:	f04f 30ff 	mov.w	r0, #4294967295
 80037d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80037d8:	3501      	adds	r5, #1
 80037da:	e7c6      	b.n	800376a <_printf_common+0x3e>
 80037dc:	18e1      	adds	r1, r4, r3
 80037de:	1c5a      	adds	r2, r3, #1
 80037e0:	2030      	movs	r0, #48	@ 0x30
 80037e2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80037e6:	4422      	add	r2, r4
 80037e8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80037ec:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80037f0:	3302      	adds	r3, #2
 80037f2:	e7c7      	b.n	8003784 <_printf_common+0x58>
 80037f4:	2301      	movs	r3, #1
 80037f6:	4622      	mov	r2, r4
 80037f8:	4641      	mov	r1, r8
 80037fa:	4638      	mov	r0, r7
 80037fc:	47c8      	blx	r9
 80037fe:	3001      	adds	r0, #1
 8003800:	d0e6      	beq.n	80037d0 <_printf_common+0xa4>
 8003802:	3601      	adds	r6, #1
 8003804:	e7d9      	b.n	80037ba <_printf_common+0x8e>
	...

08003808 <_printf_i>:
 8003808:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800380c:	7e0f      	ldrb	r7, [r1, #24]
 800380e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003810:	2f78      	cmp	r7, #120	@ 0x78
 8003812:	4691      	mov	r9, r2
 8003814:	4680      	mov	r8, r0
 8003816:	460c      	mov	r4, r1
 8003818:	469a      	mov	sl, r3
 800381a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800381e:	d807      	bhi.n	8003830 <_printf_i+0x28>
 8003820:	2f62      	cmp	r7, #98	@ 0x62
 8003822:	d80a      	bhi.n	800383a <_printf_i+0x32>
 8003824:	2f00      	cmp	r7, #0
 8003826:	f000 80d1 	beq.w	80039cc <_printf_i+0x1c4>
 800382a:	2f58      	cmp	r7, #88	@ 0x58
 800382c:	f000 80b8 	beq.w	80039a0 <_printf_i+0x198>
 8003830:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003834:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003838:	e03a      	b.n	80038b0 <_printf_i+0xa8>
 800383a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800383e:	2b15      	cmp	r3, #21
 8003840:	d8f6      	bhi.n	8003830 <_printf_i+0x28>
 8003842:	a101      	add	r1, pc, #4	@ (adr r1, 8003848 <_printf_i+0x40>)
 8003844:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003848:	080038a1 	.word	0x080038a1
 800384c:	080038b5 	.word	0x080038b5
 8003850:	08003831 	.word	0x08003831
 8003854:	08003831 	.word	0x08003831
 8003858:	08003831 	.word	0x08003831
 800385c:	08003831 	.word	0x08003831
 8003860:	080038b5 	.word	0x080038b5
 8003864:	08003831 	.word	0x08003831
 8003868:	08003831 	.word	0x08003831
 800386c:	08003831 	.word	0x08003831
 8003870:	08003831 	.word	0x08003831
 8003874:	080039b3 	.word	0x080039b3
 8003878:	080038df 	.word	0x080038df
 800387c:	0800396d 	.word	0x0800396d
 8003880:	08003831 	.word	0x08003831
 8003884:	08003831 	.word	0x08003831
 8003888:	080039d5 	.word	0x080039d5
 800388c:	08003831 	.word	0x08003831
 8003890:	080038df 	.word	0x080038df
 8003894:	08003831 	.word	0x08003831
 8003898:	08003831 	.word	0x08003831
 800389c:	08003975 	.word	0x08003975
 80038a0:	6833      	ldr	r3, [r6, #0]
 80038a2:	1d1a      	adds	r2, r3, #4
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	6032      	str	r2, [r6, #0]
 80038a8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80038ac:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80038b0:	2301      	movs	r3, #1
 80038b2:	e09c      	b.n	80039ee <_printf_i+0x1e6>
 80038b4:	6833      	ldr	r3, [r6, #0]
 80038b6:	6820      	ldr	r0, [r4, #0]
 80038b8:	1d19      	adds	r1, r3, #4
 80038ba:	6031      	str	r1, [r6, #0]
 80038bc:	0606      	lsls	r6, r0, #24
 80038be:	d501      	bpl.n	80038c4 <_printf_i+0xbc>
 80038c0:	681d      	ldr	r5, [r3, #0]
 80038c2:	e003      	b.n	80038cc <_printf_i+0xc4>
 80038c4:	0645      	lsls	r5, r0, #25
 80038c6:	d5fb      	bpl.n	80038c0 <_printf_i+0xb8>
 80038c8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80038cc:	2d00      	cmp	r5, #0
 80038ce:	da03      	bge.n	80038d8 <_printf_i+0xd0>
 80038d0:	232d      	movs	r3, #45	@ 0x2d
 80038d2:	426d      	negs	r5, r5
 80038d4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80038d8:	4858      	ldr	r0, [pc, #352]	@ (8003a3c <_printf_i+0x234>)
 80038da:	230a      	movs	r3, #10
 80038dc:	e011      	b.n	8003902 <_printf_i+0xfa>
 80038de:	6821      	ldr	r1, [r4, #0]
 80038e0:	6833      	ldr	r3, [r6, #0]
 80038e2:	0608      	lsls	r0, r1, #24
 80038e4:	f853 5b04 	ldr.w	r5, [r3], #4
 80038e8:	d402      	bmi.n	80038f0 <_printf_i+0xe8>
 80038ea:	0649      	lsls	r1, r1, #25
 80038ec:	bf48      	it	mi
 80038ee:	b2ad      	uxthmi	r5, r5
 80038f0:	2f6f      	cmp	r7, #111	@ 0x6f
 80038f2:	4852      	ldr	r0, [pc, #328]	@ (8003a3c <_printf_i+0x234>)
 80038f4:	6033      	str	r3, [r6, #0]
 80038f6:	bf14      	ite	ne
 80038f8:	230a      	movne	r3, #10
 80038fa:	2308      	moveq	r3, #8
 80038fc:	2100      	movs	r1, #0
 80038fe:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003902:	6866      	ldr	r6, [r4, #4]
 8003904:	60a6      	str	r6, [r4, #8]
 8003906:	2e00      	cmp	r6, #0
 8003908:	db05      	blt.n	8003916 <_printf_i+0x10e>
 800390a:	6821      	ldr	r1, [r4, #0]
 800390c:	432e      	orrs	r6, r5
 800390e:	f021 0104 	bic.w	r1, r1, #4
 8003912:	6021      	str	r1, [r4, #0]
 8003914:	d04b      	beq.n	80039ae <_printf_i+0x1a6>
 8003916:	4616      	mov	r6, r2
 8003918:	fbb5 f1f3 	udiv	r1, r5, r3
 800391c:	fb03 5711 	mls	r7, r3, r1, r5
 8003920:	5dc7      	ldrb	r7, [r0, r7]
 8003922:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003926:	462f      	mov	r7, r5
 8003928:	42bb      	cmp	r3, r7
 800392a:	460d      	mov	r5, r1
 800392c:	d9f4      	bls.n	8003918 <_printf_i+0x110>
 800392e:	2b08      	cmp	r3, #8
 8003930:	d10b      	bne.n	800394a <_printf_i+0x142>
 8003932:	6823      	ldr	r3, [r4, #0]
 8003934:	07df      	lsls	r7, r3, #31
 8003936:	d508      	bpl.n	800394a <_printf_i+0x142>
 8003938:	6923      	ldr	r3, [r4, #16]
 800393a:	6861      	ldr	r1, [r4, #4]
 800393c:	4299      	cmp	r1, r3
 800393e:	bfde      	ittt	le
 8003940:	2330      	movle	r3, #48	@ 0x30
 8003942:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003946:	f106 36ff 	addle.w	r6, r6, #4294967295
 800394a:	1b92      	subs	r2, r2, r6
 800394c:	6122      	str	r2, [r4, #16]
 800394e:	f8cd a000 	str.w	sl, [sp]
 8003952:	464b      	mov	r3, r9
 8003954:	aa03      	add	r2, sp, #12
 8003956:	4621      	mov	r1, r4
 8003958:	4640      	mov	r0, r8
 800395a:	f7ff fee7 	bl	800372c <_printf_common>
 800395e:	3001      	adds	r0, #1
 8003960:	d14a      	bne.n	80039f8 <_printf_i+0x1f0>
 8003962:	f04f 30ff 	mov.w	r0, #4294967295
 8003966:	b004      	add	sp, #16
 8003968:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800396c:	6823      	ldr	r3, [r4, #0]
 800396e:	f043 0320 	orr.w	r3, r3, #32
 8003972:	6023      	str	r3, [r4, #0]
 8003974:	4832      	ldr	r0, [pc, #200]	@ (8003a40 <_printf_i+0x238>)
 8003976:	2778      	movs	r7, #120	@ 0x78
 8003978:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800397c:	6823      	ldr	r3, [r4, #0]
 800397e:	6831      	ldr	r1, [r6, #0]
 8003980:	061f      	lsls	r7, r3, #24
 8003982:	f851 5b04 	ldr.w	r5, [r1], #4
 8003986:	d402      	bmi.n	800398e <_printf_i+0x186>
 8003988:	065f      	lsls	r7, r3, #25
 800398a:	bf48      	it	mi
 800398c:	b2ad      	uxthmi	r5, r5
 800398e:	6031      	str	r1, [r6, #0]
 8003990:	07d9      	lsls	r1, r3, #31
 8003992:	bf44      	itt	mi
 8003994:	f043 0320 	orrmi.w	r3, r3, #32
 8003998:	6023      	strmi	r3, [r4, #0]
 800399a:	b11d      	cbz	r5, 80039a4 <_printf_i+0x19c>
 800399c:	2310      	movs	r3, #16
 800399e:	e7ad      	b.n	80038fc <_printf_i+0xf4>
 80039a0:	4826      	ldr	r0, [pc, #152]	@ (8003a3c <_printf_i+0x234>)
 80039a2:	e7e9      	b.n	8003978 <_printf_i+0x170>
 80039a4:	6823      	ldr	r3, [r4, #0]
 80039a6:	f023 0320 	bic.w	r3, r3, #32
 80039aa:	6023      	str	r3, [r4, #0]
 80039ac:	e7f6      	b.n	800399c <_printf_i+0x194>
 80039ae:	4616      	mov	r6, r2
 80039b0:	e7bd      	b.n	800392e <_printf_i+0x126>
 80039b2:	6833      	ldr	r3, [r6, #0]
 80039b4:	6825      	ldr	r5, [r4, #0]
 80039b6:	6961      	ldr	r1, [r4, #20]
 80039b8:	1d18      	adds	r0, r3, #4
 80039ba:	6030      	str	r0, [r6, #0]
 80039bc:	062e      	lsls	r6, r5, #24
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	d501      	bpl.n	80039c6 <_printf_i+0x1be>
 80039c2:	6019      	str	r1, [r3, #0]
 80039c4:	e002      	b.n	80039cc <_printf_i+0x1c4>
 80039c6:	0668      	lsls	r0, r5, #25
 80039c8:	d5fb      	bpl.n	80039c2 <_printf_i+0x1ba>
 80039ca:	8019      	strh	r1, [r3, #0]
 80039cc:	2300      	movs	r3, #0
 80039ce:	6123      	str	r3, [r4, #16]
 80039d0:	4616      	mov	r6, r2
 80039d2:	e7bc      	b.n	800394e <_printf_i+0x146>
 80039d4:	6833      	ldr	r3, [r6, #0]
 80039d6:	1d1a      	adds	r2, r3, #4
 80039d8:	6032      	str	r2, [r6, #0]
 80039da:	681e      	ldr	r6, [r3, #0]
 80039dc:	6862      	ldr	r2, [r4, #4]
 80039de:	2100      	movs	r1, #0
 80039e0:	4630      	mov	r0, r6
 80039e2:	f7fc fc05 	bl	80001f0 <memchr>
 80039e6:	b108      	cbz	r0, 80039ec <_printf_i+0x1e4>
 80039e8:	1b80      	subs	r0, r0, r6
 80039ea:	6060      	str	r0, [r4, #4]
 80039ec:	6863      	ldr	r3, [r4, #4]
 80039ee:	6123      	str	r3, [r4, #16]
 80039f0:	2300      	movs	r3, #0
 80039f2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80039f6:	e7aa      	b.n	800394e <_printf_i+0x146>
 80039f8:	6923      	ldr	r3, [r4, #16]
 80039fa:	4632      	mov	r2, r6
 80039fc:	4649      	mov	r1, r9
 80039fe:	4640      	mov	r0, r8
 8003a00:	47d0      	blx	sl
 8003a02:	3001      	adds	r0, #1
 8003a04:	d0ad      	beq.n	8003962 <_printf_i+0x15a>
 8003a06:	6823      	ldr	r3, [r4, #0]
 8003a08:	079b      	lsls	r3, r3, #30
 8003a0a:	d413      	bmi.n	8003a34 <_printf_i+0x22c>
 8003a0c:	68e0      	ldr	r0, [r4, #12]
 8003a0e:	9b03      	ldr	r3, [sp, #12]
 8003a10:	4298      	cmp	r0, r3
 8003a12:	bfb8      	it	lt
 8003a14:	4618      	movlt	r0, r3
 8003a16:	e7a6      	b.n	8003966 <_printf_i+0x15e>
 8003a18:	2301      	movs	r3, #1
 8003a1a:	4632      	mov	r2, r6
 8003a1c:	4649      	mov	r1, r9
 8003a1e:	4640      	mov	r0, r8
 8003a20:	47d0      	blx	sl
 8003a22:	3001      	adds	r0, #1
 8003a24:	d09d      	beq.n	8003962 <_printf_i+0x15a>
 8003a26:	3501      	adds	r5, #1
 8003a28:	68e3      	ldr	r3, [r4, #12]
 8003a2a:	9903      	ldr	r1, [sp, #12]
 8003a2c:	1a5b      	subs	r3, r3, r1
 8003a2e:	42ab      	cmp	r3, r5
 8003a30:	dcf2      	bgt.n	8003a18 <_printf_i+0x210>
 8003a32:	e7eb      	b.n	8003a0c <_printf_i+0x204>
 8003a34:	2500      	movs	r5, #0
 8003a36:	f104 0619 	add.w	r6, r4, #25
 8003a3a:	e7f5      	b.n	8003a28 <_printf_i+0x220>
 8003a3c:	08003c59 	.word	0x08003c59
 8003a40:	08003c6a 	.word	0x08003c6a

08003a44 <memmove>:
 8003a44:	4288      	cmp	r0, r1
 8003a46:	b510      	push	{r4, lr}
 8003a48:	eb01 0402 	add.w	r4, r1, r2
 8003a4c:	d902      	bls.n	8003a54 <memmove+0x10>
 8003a4e:	4284      	cmp	r4, r0
 8003a50:	4623      	mov	r3, r4
 8003a52:	d807      	bhi.n	8003a64 <memmove+0x20>
 8003a54:	1e43      	subs	r3, r0, #1
 8003a56:	42a1      	cmp	r1, r4
 8003a58:	d008      	beq.n	8003a6c <memmove+0x28>
 8003a5a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003a5e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003a62:	e7f8      	b.n	8003a56 <memmove+0x12>
 8003a64:	4402      	add	r2, r0
 8003a66:	4601      	mov	r1, r0
 8003a68:	428a      	cmp	r2, r1
 8003a6a:	d100      	bne.n	8003a6e <memmove+0x2a>
 8003a6c:	bd10      	pop	{r4, pc}
 8003a6e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003a72:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003a76:	e7f7      	b.n	8003a68 <memmove+0x24>

08003a78 <_sbrk_r>:
 8003a78:	b538      	push	{r3, r4, r5, lr}
 8003a7a:	4d06      	ldr	r5, [pc, #24]	@ (8003a94 <_sbrk_r+0x1c>)
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	4604      	mov	r4, r0
 8003a80:	4608      	mov	r0, r1
 8003a82:	602b      	str	r3, [r5, #0]
 8003a84:	f7fd fa4e 	bl	8000f24 <_sbrk>
 8003a88:	1c43      	adds	r3, r0, #1
 8003a8a:	d102      	bne.n	8003a92 <_sbrk_r+0x1a>
 8003a8c:	682b      	ldr	r3, [r5, #0]
 8003a8e:	b103      	cbz	r3, 8003a92 <_sbrk_r+0x1a>
 8003a90:	6023      	str	r3, [r4, #0]
 8003a92:	bd38      	pop	{r3, r4, r5, pc}
 8003a94:	20003e70 	.word	0x20003e70

08003a98 <_realloc_r>:
 8003a98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a9c:	4607      	mov	r7, r0
 8003a9e:	4614      	mov	r4, r2
 8003aa0:	460d      	mov	r5, r1
 8003aa2:	b921      	cbnz	r1, 8003aae <_realloc_r+0x16>
 8003aa4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003aa8:	4611      	mov	r1, r2
 8003aaa:	f7ff bc5b 	b.w	8003364 <_malloc_r>
 8003aae:	b92a      	cbnz	r2, 8003abc <_realloc_r+0x24>
 8003ab0:	f7ff fbec 	bl	800328c <_free_r>
 8003ab4:	4625      	mov	r5, r4
 8003ab6:	4628      	mov	r0, r5
 8003ab8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003abc:	f000 f81a 	bl	8003af4 <_malloc_usable_size_r>
 8003ac0:	4284      	cmp	r4, r0
 8003ac2:	4606      	mov	r6, r0
 8003ac4:	d802      	bhi.n	8003acc <_realloc_r+0x34>
 8003ac6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003aca:	d8f4      	bhi.n	8003ab6 <_realloc_r+0x1e>
 8003acc:	4621      	mov	r1, r4
 8003ace:	4638      	mov	r0, r7
 8003ad0:	f7ff fc48 	bl	8003364 <_malloc_r>
 8003ad4:	4680      	mov	r8, r0
 8003ad6:	b908      	cbnz	r0, 8003adc <_realloc_r+0x44>
 8003ad8:	4645      	mov	r5, r8
 8003ada:	e7ec      	b.n	8003ab6 <_realloc_r+0x1e>
 8003adc:	42b4      	cmp	r4, r6
 8003ade:	4622      	mov	r2, r4
 8003ae0:	4629      	mov	r1, r5
 8003ae2:	bf28      	it	cs
 8003ae4:	4632      	movcs	r2, r6
 8003ae6:	f7ff fbc3 	bl	8003270 <memcpy>
 8003aea:	4629      	mov	r1, r5
 8003aec:	4638      	mov	r0, r7
 8003aee:	f7ff fbcd 	bl	800328c <_free_r>
 8003af2:	e7f1      	b.n	8003ad8 <_realloc_r+0x40>

08003af4 <_malloc_usable_size_r>:
 8003af4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003af8:	1f18      	subs	r0, r3, #4
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	bfbc      	itt	lt
 8003afe:	580b      	ldrlt	r3, [r1, r0]
 8003b00:	18c0      	addlt	r0, r0, r3
 8003b02:	4770      	bx	lr

08003b04 <_init>:
 8003b04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b06:	bf00      	nop
 8003b08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b0a:	bc08      	pop	{r3}
 8003b0c:	469e      	mov	lr, r3
 8003b0e:	4770      	bx	lr

08003b10 <_fini>:
 8003b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b12:	bf00      	nop
 8003b14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b16:	bc08      	pop	{r3}
 8003b18:	469e      	mov	lr, r3
 8003b1a:	4770      	bx	lr
